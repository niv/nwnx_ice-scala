// **********************************************************************
//
// Copyright (c) 2003-2009 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.3.1

package NWN;

public final class NWScriptPrxHelper extends Ice.ObjectPrxHelperBase implements NWScriptPrx
{
    public void
    actionAttack(NWObject oAttackee, boolean bPassive)
        throws NotInContextException
    {
        actionAttack(oAttackee, bPassive, null, false);
    }

    public void
    actionAttack(NWObject oAttackee, boolean bPassive, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionAttack(oAttackee, bPassive, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionAttack(NWObject oAttackee, boolean bPassive, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionAttack");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionAttack(oAttackee, bPassive, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionCastFakeSpellAtLocation(int nSpell, NWLocation lTarget, ProjectilePathType tProjectilePathType)
        throws NotInContextException
    {
        actionCastFakeSpellAtLocation(nSpell, lTarget, tProjectilePathType, null, false);
    }

    public void
    actionCastFakeSpellAtLocation(int nSpell, NWLocation lTarget, ProjectilePathType tProjectilePathType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionCastFakeSpellAtLocation(nSpell, lTarget, tProjectilePathType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionCastFakeSpellAtLocation(int nSpell, NWLocation lTarget, ProjectilePathType tProjectilePathType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionCastFakeSpellAtLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionCastFakeSpellAtLocation(nSpell, lTarget, tProjectilePathType, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionCastFakeSpellAtObject(int nSpell, NWObject oTarget, ProjectilePathType tProjectilePathType)
        throws NotInContextException
    {
        actionCastFakeSpellAtObject(nSpell, oTarget, tProjectilePathType, null, false);
    }

    public void
    actionCastFakeSpellAtObject(int nSpell, NWObject oTarget, ProjectilePathType tProjectilePathType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionCastFakeSpellAtObject(nSpell, oTarget, tProjectilePathType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionCastFakeSpellAtObject(int nSpell, NWObject oTarget, ProjectilePathType tProjectilePathType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionCastFakeSpellAtObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionCastFakeSpellAtObject(nSpell, oTarget, tProjectilePathType, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionCastSpellAtLocation(int nSpell, NWLocation lTargetLocation, MetaMagic tMetaMagic, boolean bCheat, ProjectilePathType tProjectilePathType, boolean bInstantSpell)
        throws NotInContextException
    {
        actionCastSpellAtLocation(nSpell, lTargetLocation, tMetaMagic, bCheat, tProjectilePathType, bInstantSpell, null, false);
    }

    public void
    actionCastSpellAtLocation(int nSpell, NWLocation lTargetLocation, MetaMagic tMetaMagic, boolean bCheat, ProjectilePathType tProjectilePathType, boolean bInstantSpell, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionCastSpellAtLocation(nSpell, lTargetLocation, tMetaMagic, bCheat, tProjectilePathType, bInstantSpell, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionCastSpellAtLocation(int nSpell, NWLocation lTargetLocation, MetaMagic tMetaMagic, boolean bCheat, ProjectilePathType tProjectilePathType, boolean bInstantSpell, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionCastSpellAtLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionCastSpellAtLocation(nSpell, lTargetLocation, tMetaMagic, bCheat, tProjectilePathType, bInstantSpell, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionCastSpellAtObject(int nSpell, NWObject oTarget, MetaMagic tMetaMagic, boolean bCheat, int nDomainLevel, ProjectilePathType tProjectilePathType, boolean bInstantSpell)
        throws NotInContextException
    {
        actionCastSpellAtObject(nSpell, oTarget, tMetaMagic, bCheat, nDomainLevel, tProjectilePathType, bInstantSpell, null, false);
    }

    public void
    actionCastSpellAtObject(int nSpell, NWObject oTarget, MetaMagic tMetaMagic, boolean bCheat, int nDomainLevel, ProjectilePathType tProjectilePathType, boolean bInstantSpell, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionCastSpellAtObject(nSpell, oTarget, tMetaMagic, bCheat, nDomainLevel, tProjectilePathType, bInstantSpell, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionCastSpellAtObject(int nSpell, NWObject oTarget, MetaMagic tMetaMagic, boolean bCheat, int nDomainLevel, ProjectilePathType tProjectilePathType, boolean bInstantSpell, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionCastSpellAtObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionCastSpellAtObject(nSpell, oTarget, tMetaMagic, bCheat, nDomainLevel, tProjectilePathType, bInstantSpell, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionCloseDoor(NWObject oDoor)
        throws NotInContextException
    {
        actionCloseDoor(oDoor, null, false);
    }

    public void
    actionCloseDoor(NWObject oDoor, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionCloseDoor(oDoor, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionCloseDoor(NWObject oDoor, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionCloseDoor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionCloseDoor(oDoor, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionCounterSpell(NWObject oCounterSpellTarget)
        throws NotInContextException
    {
        actionCounterSpell(oCounterSpellTarget, null, false);
    }

    public void
    actionCounterSpell(NWObject oCounterSpellTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionCounterSpell(oCounterSpellTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionCounterSpell(NWObject oCounterSpellTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionCounterSpell");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionCounterSpell(oCounterSpellTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionEquipItem(NWObject oItem, InventorySlot tInventorySlot)
        throws NotInContextException
    {
        actionEquipItem(oItem, tInventorySlot, null, false);
    }

    public void
    actionEquipItem(NWObject oItem, InventorySlot tInventorySlot, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionEquipItem(oItem, tInventorySlot, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionEquipItem(NWObject oItem, InventorySlot tInventorySlot, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionEquipItem");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionEquipItem(oItem, tInventorySlot, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionEquipMostDamagingMelee(NWObject oVersus, boolean bOffHand)
        throws NotInContextException
    {
        actionEquipMostDamagingMelee(oVersus, bOffHand, null, false);
    }

    public void
    actionEquipMostDamagingMelee(NWObject oVersus, boolean bOffHand, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionEquipMostDamagingMelee(oVersus, bOffHand, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionEquipMostDamagingMelee(NWObject oVersus, boolean bOffHand, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionEquipMostDamagingMelee");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionEquipMostDamagingMelee(oVersus, bOffHand, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionEquipMostDamagingRanged(NWObject oVersus)
        throws NotInContextException
    {
        actionEquipMostDamagingRanged(oVersus, null, false);
    }

    public void
    actionEquipMostDamagingRanged(NWObject oVersus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionEquipMostDamagingRanged(oVersus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionEquipMostDamagingRanged(NWObject oVersus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionEquipMostDamagingRanged");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionEquipMostDamagingRanged(oVersus, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionEquipMostEffectiveArmor()
        throws NotInContextException
    {
        actionEquipMostEffectiveArmor(null, false);
    }

    public void
    actionEquipMostEffectiveArmor(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionEquipMostEffectiveArmor(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionEquipMostEffectiveArmor(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionEquipMostEffectiveArmor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionEquipMostEffectiveArmor(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionExamine(NWObject oExamine)
        throws NotInContextException
    {
        actionExamine(oExamine, null, false);
    }

    public void
    actionExamine(NWObject oExamine, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionExamine(oExamine, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionExamine(NWObject oExamine, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionExamine");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionExamine(oExamine, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionForceFollowObject(NWObject oFollow, double fFollowDistance)
        throws NotInContextException
    {
        actionForceFollowObject(oFollow, fFollowDistance, null, false);
    }

    public void
    actionForceFollowObject(NWObject oFollow, double fFollowDistance, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionForceFollowObject(oFollow, fFollowDistance, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionForceFollowObject(NWObject oFollow, double fFollowDistance, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionForceFollowObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionForceFollowObject(oFollow, fFollowDistance, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionForceMoveToLocation(NWLocation lDestination, boolean bRun, double fTimeout)
        throws NotInContextException
    {
        actionForceMoveToLocation(lDestination, bRun, fTimeout, null, false);
    }

    public void
    actionForceMoveToLocation(NWLocation lDestination, boolean bRun, double fTimeout, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionForceMoveToLocation(lDestination, bRun, fTimeout, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionForceMoveToLocation(NWLocation lDestination, boolean bRun, double fTimeout, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionForceMoveToLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionForceMoveToLocation(lDestination, bRun, fTimeout, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionForceMoveToObject(NWObject oMoveTo, boolean bRun, double fRange, double fTimeout)
        throws NotInContextException
    {
        actionForceMoveToObject(oMoveTo, bRun, fRange, fTimeout, null, false);
    }

    public void
    actionForceMoveToObject(NWObject oMoveTo, boolean bRun, double fRange, double fTimeout, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionForceMoveToObject(oMoveTo, bRun, fRange, fTimeout, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionForceMoveToObject(NWObject oMoveTo, boolean bRun, double fRange, double fTimeout, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionForceMoveToObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionForceMoveToObject(oMoveTo, bRun, fRange, fTimeout, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionGiveItem(NWObject oItem, NWObject oGiveTo)
        throws NotInContextException
    {
        actionGiveItem(oItem, oGiveTo, null, false);
    }

    public void
    actionGiveItem(NWObject oItem, NWObject oGiveTo, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionGiveItem(oItem, oGiveTo, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionGiveItem(NWObject oItem, NWObject oGiveTo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionGiveItem");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionGiveItem(oItem, oGiveTo, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionInteractObject(NWObject oPlaceable)
        throws NotInContextException
    {
        actionInteractObject(oPlaceable, null, false);
    }

    public void
    actionInteractObject(NWObject oPlaceable, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionInteractObject(oPlaceable, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionInteractObject(NWObject oPlaceable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionInteractObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionInteractObject(oPlaceable, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionJumpToLocation(NWLocation lLocation)
        throws NotInContextException
    {
        actionJumpToLocation(lLocation, null, false);
    }

    public void
    actionJumpToLocation(NWLocation lLocation, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionJumpToLocation(lLocation, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionJumpToLocation(NWLocation lLocation, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionJumpToLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionJumpToLocation(lLocation, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionJumpToObject(NWObject oToJumpTo, boolean bWalkStraightLineToPoint)
        throws NotInContextException
    {
        actionJumpToObject(oToJumpTo, bWalkStraightLineToPoint, null, false);
    }

    public void
    actionJumpToObject(NWObject oToJumpTo, boolean bWalkStraightLineToPoint, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionJumpToObject(oToJumpTo, bWalkStraightLineToPoint, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionJumpToObject(NWObject oToJumpTo, boolean bWalkStraightLineToPoint, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionJumpToObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionJumpToObject(oToJumpTo, bWalkStraightLineToPoint, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionLockObject(NWObject oTarget)
        throws NotInContextException
    {
        actionLockObject(oTarget, null, false);
    }

    public void
    actionLockObject(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionLockObject(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionLockObject(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionLockObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionLockObject(oTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionMoveAwayFromLocation(NWLocation lMoveAwayFrom, boolean bRun, double fMoveAwayRange)
        throws NotInContextException
    {
        actionMoveAwayFromLocation(lMoveAwayFrom, bRun, fMoveAwayRange, null, false);
    }

    public void
    actionMoveAwayFromLocation(NWLocation lMoveAwayFrom, boolean bRun, double fMoveAwayRange, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionMoveAwayFromLocation(lMoveAwayFrom, bRun, fMoveAwayRange, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionMoveAwayFromLocation(NWLocation lMoveAwayFrom, boolean bRun, double fMoveAwayRange, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionMoveAwayFromLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionMoveAwayFromLocation(lMoveAwayFrom, bRun, fMoveAwayRange, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionMoveAwayFromObject(NWObject oFleeFrom, boolean bRun, double fMoveAwayRange)
        throws NotInContextException
    {
        actionMoveAwayFromObject(oFleeFrom, bRun, fMoveAwayRange, null, false);
    }

    public void
    actionMoveAwayFromObject(NWObject oFleeFrom, boolean bRun, double fMoveAwayRange, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionMoveAwayFromObject(oFleeFrom, bRun, fMoveAwayRange, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionMoveAwayFromObject(NWObject oFleeFrom, boolean bRun, double fMoveAwayRange, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionMoveAwayFromObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionMoveAwayFromObject(oFleeFrom, bRun, fMoveAwayRange, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionMoveToLocation(NWLocation lDestination, boolean bRun)
        throws NotInContextException
    {
        actionMoveToLocation(lDestination, bRun, null, false);
    }

    public void
    actionMoveToLocation(NWLocation lDestination, boolean bRun, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionMoveToLocation(lDestination, bRun, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionMoveToLocation(NWLocation lDestination, boolean bRun, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionMoveToLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionMoveToLocation(lDestination, bRun, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionMoveToObject(NWObject oMoveTo, boolean bRun, double fRange)
        throws NotInContextException
    {
        actionMoveToObject(oMoveTo, bRun, fRange, null, false);
    }

    public void
    actionMoveToObject(NWObject oMoveTo, boolean bRun, double fRange, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionMoveToObject(oMoveTo, bRun, fRange, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionMoveToObject(NWObject oMoveTo, boolean bRun, double fRange, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionMoveToObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionMoveToObject(oMoveTo, bRun, fRange, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionOpenDoor(NWObject oDoor)
        throws NotInContextException
    {
        actionOpenDoor(oDoor, null, false);
    }

    public void
    actionOpenDoor(NWObject oDoor, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionOpenDoor(oDoor, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionOpenDoor(NWObject oDoor, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionOpenDoor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionOpenDoor(oDoor, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionPauseConversation()
        throws NotInContextException
    {
        actionPauseConversation(null, false);
    }

    public void
    actionPauseConversation(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionPauseConversation(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionPauseConversation(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionPauseConversation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionPauseConversation(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionPickUpItem(NWObject oItem)
        throws NotInContextException
    {
        actionPickUpItem(oItem, null, false);
    }

    public void
    actionPickUpItem(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionPickUpItem(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionPickUpItem(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionPickUpItem");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionPickUpItem(oItem, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionPlayAnimation(int nAnimation, double fSpeed, double fDurationSeconds)
        throws NotInContextException
    {
        actionPlayAnimation(nAnimation, fSpeed, fDurationSeconds, null, false);
    }

    public void
    actionPlayAnimation(int nAnimation, double fSpeed, double fDurationSeconds, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionPlayAnimation(nAnimation, fSpeed, fDurationSeconds, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionPlayAnimation(int nAnimation, double fSpeed, double fDurationSeconds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionPlayAnimation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionPlayAnimation(nAnimation, fSpeed, fDurationSeconds, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionPutDownItem(NWObject oItem)
        throws NotInContextException
    {
        actionPutDownItem(oItem, null, false);
    }

    public void
    actionPutDownItem(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionPutDownItem(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionPutDownItem(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionPutDownItem");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionPutDownItem(oItem, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionRandomWalk()
        throws NotInContextException
    {
        actionRandomWalk(null, false);
    }

    public void
    actionRandomWalk(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionRandomWalk(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionRandomWalk(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionRandomWalk");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionRandomWalk(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionRest(boolean bCreatureToEnemyLineOfSightCheck)
        throws NotInContextException
    {
        actionRest(bCreatureToEnemyLineOfSightCheck, null, false);
    }

    public void
    actionRest(boolean bCreatureToEnemyLineOfSightCheck, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionRest(bCreatureToEnemyLineOfSightCheck, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionRest(boolean bCreatureToEnemyLineOfSightCheck, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionRest");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionRest(bCreatureToEnemyLineOfSightCheck, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionResumeConversation()
        throws NotInContextException
    {
        actionResumeConversation(null, false);
    }

    public void
    actionResumeConversation(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionResumeConversation(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionResumeConversation(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionResumeConversation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionResumeConversation(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionSit(NWObject oChair)
        throws NotInContextException
    {
        actionSit(oChair, null, false);
    }

    public void
    actionSit(NWObject oChair, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionSit(oChair, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionSit(NWObject oChair, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionSit");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionSit(oChair, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionSpeakString(String sStringToSpeak, TalkVolume tTalkVolume)
        throws NotInContextException
    {
        actionSpeakString(sStringToSpeak, tTalkVolume, null, false);
    }

    public void
    actionSpeakString(String sStringToSpeak, TalkVolume tTalkVolume, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionSpeakString(sStringToSpeak, tTalkVolume, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionSpeakString(String sStringToSpeak, TalkVolume tTalkVolume, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionSpeakString");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionSpeakString(sStringToSpeak, tTalkVolume, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionSpeakStringByStrRef(int nStrRef, TalkVolume tTalkVolume)
        throws NotInContextException
    {
        actionSpeakStringByStrRef(nStrRef, tTalkVolume, null, false);
    }

    public void
    actionSpeakStringByStrRef(int nStrRef, TalkVolume tTalkVolume, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionSpeakStringByStrRef(nStrRef, tTalkVolume, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionSpeakStringByStrRef(int nStrRef, TalkVolume tTalkVolume, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionSpeakStringByStrRef");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionSpeakStringByStrRef(nStrRef, tTalkVolume, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionStartConversation(NWObject oObjectToConverseWith, String sDialogResRef, boolean bPrivateConversation, boolean bPlayHello)
        throws NotInContextException
    {
        actionStartConversation(oObjectToConverseWith, sDialogResRef, bPrivateConversation, bPlayHello, null, false);
    }

    public void
    actionStartConversation(NWObject oObjectToConverseWith, String sDialogResRef, boolean bPrivateConversation, boolean bPlayHello, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionStartConversation(oObjectToConverseWith, sDialogResRef, bPrivateConversation, bPlayHello, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionStartConversation(NWObject oObjectToConverseWith, String sDialogResRef, boolean bPrivateConversation, boolean bPlayHello, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionStartConversation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionStartConversation(oObjectToConverseWith, sDialogResRef, bPrivateConversation, bPlayHello, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionTakeItem(NWObject oItem, NWObject oTakeFrom)
        throws NotInContextException
    {
        actionTakeItem(oItem, oTakeFrom, null, false);
    }

    public void
    actionTakeItem(NWObject oItem, NWObject oTakeFrom, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionTakeItem(oItem, oTakeFrom, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionTakeItem(NWObject oItem, NWObject oTakeFrom, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionTakeItem");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionTakeItem(oItem, oTakeFrom, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionUnequipItem(NWObject oItem)
        throws NotInContextException
    {
        actionUnequipItem(oItem, null, false);
    }

    public void
    actionUnequipItem(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionUnequipItem(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionUnequipItem(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionUnequipItem");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionUnequipItem(oItem, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionUnlockObject(NWObject oTarget)
        throws NotInContextException
    {
        actionUnlockObject(oTarget, null, false);
    }

    public void
    actionUnlockObject(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionUnlockObject(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionUnlockObject(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionUnlockObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionUnlockObject(oTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionUseFeat(int nFeat, NWObject oTarget)
        throws NotInContextException
    {
        actionUseFeat(nFeat, oTarget, null, false);
    }

    public void
    actionUseFeat(int nFeat, NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionUseFeat(nFeat, oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionUseFeat(int nFeat, NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionUseFeat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionUseFeat(nFeat, oTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionUseSkill(int nSkill, NWObject oTarget, int nSubSkill, NWObject oItemUsed)
        throws NotInContextException
    {
        actionUseSkill(nSkill, oTarget, nSubSkill, oItemUsed, null, false);
    }

    public void
    actionUseSkill(int nSkill, NWObject oTarget, int nSubSkill, NWObject oItemUsed, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionUseSkill(nSkill, oTarget, nSubSkill, oItemUsed, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionUseSkill(int nSkill, NWObject oTarget, int nSubSkill, NWObject oItemUsed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionUseSkill");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionUseSkill(nSkill, oTarget, nSubSkill, oItemUsed, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    actionWait(double fSeconds)
        throws NotInContextException
    {
        actionWait(fSeconds, null, false);
    }

    public void
    actionWait(double fSeconds, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        actionWait(fSeconds, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    actionWait(double fSeconds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("actionWait");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.actionWait(fSeconds, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    activatePortal(NWObject oTarget, String sIPaddress, String sPassword, String sWaypointTag, boolean bSeemless)
        throws NotInContextException
    {
        activatePortal(oTarget, sIPaddress, sPassword, sWaypointTag, bSeemless, null, false);
    }

    public void
    activatePortal(NWObject oTarget, String sIPaddress, String sPassword, String sWaypointTag, boolean bSeemless, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        activatePortal(oTarget, sIPaddress, sPassword, sWaypointTag, bSeemless, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    activatePortal(NWObject oTarget, String sIPaddress, String sPassword, String sWaypointTag, boolean bSeemless, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("activatePortal");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.activatePortal(oTarget, sIPaddress, sPassword, sWaypointTag, bSeemless, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    addHenchman(NWObject oMaster, NWObject oHenchman)
        throws NotInContextException
    {
        addHenchman(oMaster, oHenchman, null, false);
    }

    public void
    addHenchman(NWObject oMaster, NWObject oHenchman, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        addHenchman(oMaster, oHenchman, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    addHenchman(NWObject oMaster, NWObject oHenchman, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addHenchman");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.addHenchman(oMaster, oHenchman, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    addItemProperty(DurationType tDurationType, NWItemProperty ipProperty, NWObject oItem, double fDuration)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        addItemProperty(tDurationType, ipProperty, oItem, fDuration, null, false);
    }

    public void
    addItemProperty(DurationType tDurationType, NWItemProperty ipProperty, NWObject oItem, double fDuration, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        addItemProperty(tDurationType, ipProperty, oItem, fDuration, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    addItemProperty(DurationType tDurationType, NWItemProperty ipProperty, NWObject oItem, double fDuration, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addItemProperty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.addItemProperty(tDurationType, ipProperty, oItem, fDuration, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    addJournalQuestEntry(String szPlotID, int nState, NWObject oCreature, boolean bAllPartyMembers, boolean bAllPlayers, boolean bAllowOverrideHigher)
        throws NotInContextException
    {
        addJournalQuestEntry(szPlotID, nState, oCreature, bAllPartyMembers, bAllPlayers, bAllowOverrideHigher, null, false);
    }

    public void
    addJournalQuestEntry(String szPlotID, int nState, NWObject oCreature, boolean bAllPartyMembers, boolean bAllPlayers, boolean bAllowOverrideHigher, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        addJournalQuestEntry(szPlotID, nState, oCreature, bAllPartyMembers, bAllPlayers, bAllowOverrideHigher, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    addJournalQuestEntry(String szPlotID, int nState, NWObject oCreature, boolean bAllPartyMembers, boolean bAllPlayers, boolean bAllowOverrideHigher, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addJournalQuestEntry");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.addJournalQuestEntry(szPlotID, nState, oCreature, bAllPartyMembers, bAllPlayers, bAllowOverrideHigher, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    addToParty(NWObject oPC, NWObject oPartyLeader)
        throws NotInContextException
    {
        addToParty(oPC, oPartyLeader, null, false);
    }

    public void
    addToParty(NWObject oPC, NWObject oPartyLeader, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        addToParty(oPC, oPartyLeader, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    addToParty(NWObject oPC, NWObject oPartyLeader, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addToParty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.addToParty(oPC, oPartyLeader, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    adjustAlignment(NWObject oSubject, Alignment tAlignment, int nShift, boolean bAllPartyMembers)
        throws NotInContextException
    {
        adjustAlignment(oSubject, tAlignment, nShift, bAllPartyMembers, null, false);
    }

    public void
    adjustAlignment(NWObject oSubject, Alignment tAlignment, int nShift, boolean bAllPartyMembers, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        adjustAlignment(oSubject, tAlignment, nShift, bAllPartyMembers, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    adjustAlignment(NWObject oSubject, Alignment tAlignment, int nShift, boolean bAllPartyMembers, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("adjustAlignment");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.adjustAlignment(oSubject, tAlignment, nShift, bAllPartyMembers, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    adjustReputation(NWObject oTarget, NWObject oSourceFactionMember, int nAdjustment)
        throws NotInContextException
    {
        adjustReputation(oTarget, oSourceFactionMember, nAdjustment, null, false);
    }

    public void
    adjustReputation(NWObject oTarget, NWObject oSourceFactionMember, int nAdjustment, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        adjustReputation(oTarget, oSourceFactionMember, nAdjustment, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    adjustReputation(NWObject oTarget, NWObject oSourceFactionMember, int nAdjustment, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("adjustReputation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.adjustReputation(oTarget, oSourceFactionMember, nAdjustment, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject[]
    allByTag(String tag)
        throws NotInContextException
    {
        return allByTag(tag, null, false);
    }

    public NWObject[]
    allByTag(String tag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return allByTag(tag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject[]
    allByTag(String tag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("allByTag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.allByTag(tag, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect[]
    allEffects(NWObject o)
        throws NotInContextException
    {
        return allEffects(o, null, false);
    }

    public NWEffect[]
    allEffects(NWObject o, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return allEffects(o, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect[]
    allEffects(NWObject o, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("allEffects");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.allEffects(o, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWCreatureEquipped
    allEquipped(NWObject o)
        throws NotInContextException
    {
        return allEquipped(o, null, false);
    }

    public NWCreatureEquipped
    allEquipped(NWObject o, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return allEquipped(o, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWCreatureEquipped
    allEquipped(NWObject o, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("allEquipped");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.allEquipped(o, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject[]
    allInArea(NWObject area)
        throws NotInContextException
    {
        return allInArea(area, null, false);
    }

    public NWObject[]
    allInArea(NWObject area, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return allInArea(area, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject[]
    allInArea(NWObject area, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("allInArea");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.allInArea(area, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject[]
    allInFaction(NWObject memberOf, boolean bPCOnly)
        throws NotInContextException
    {
        return allInFaction(memberOf, bPCOnly, null, false);
    }

    public NWObject[]
    allInFaction(NWObject memberOf, boolean bPCOnly, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return allInFaction(memberOf, bPCOnly, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject[]
    allInFaction(NWObject memberOf, boolean bPCOnly, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("allInFaction");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.allInFaction(memberOf, bPCOnly, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject[]
    allInInventory(NWObject o)
        throws NotInContextException
    {
        return allInInventory(o, null, false);
    }

    public NWObject[]
    allInInventory(NWObject o, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return allInInventory(o, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject[]
    allInInventory(NWObject o, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("allInInventory");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.allInInventory(o, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject[]
    allInShape(ShapeType tShapeType, double fSize, NWLocation lTarget, boolean bLineOfSight, ObjectType tObjectType, NWVector vOrigin)
        throws NotInContextException
    {
        return allInShape(tShapeType, fSize, lTarget, bLineOfSight, tObjectType, vOrigin, null, false);
    }

    public NWObject[]
    allInShape(ShapeType tShapeType, double fSize, NWLocation lTarget, boolean bLineOfSight, ObjectType tObjectType, NWVector vOrigin, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return allInShape(tShapeType, fSize, lTarget, bLineOfSight, tObjectType, vOrigin, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject[]
    allInShape(ShapeType tShapeType, double fSize, NWLocation lTarget, boolean bLineOfSight, ObjectType tObjectType, NWVector vOrigin, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("allInShape");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.allInShape(tShapeType, fSize, lTarget, bLineOfSight, tObjectType, vOrigin, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty[]
    allItemProperties(NWObject item)
        throws NotInContextException
    {
        return allItemProperties(item, null, false);
    }

    public NWItemProperty[]
    allItemProperties(NWObject item, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return allItemProperties(item, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty[]
    allItemProperties(NWObject item, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("allItemProperties");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.allItemProperties(item, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject[]
    allPCs()
        throws NotInContextException
    {
        return allPCs(null, false);
    }

    public NWObject[]
    allPCs(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return allPCs(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject[]
    allPCs(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("allPCs");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.allPCs(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    ambientSoundChangeDay(NWObject oArea, int nTrack)
        throws NotInContextException
    {
        ambientSoundChangeDay(oArea, nTrack, null, false);
    }

    public void
    ambientSoundChangeDay(NWObject oArea, int nTrack, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        ambientSoundChangeDay(oArea, nTrack, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    ambientSoundChangeDay(NWObject oArea, int nTrack, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ambientSoundChangeDay");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.ambientSoundChangeDay(oArea, nTrack, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    ambientSoundChangeNight(NWObject oArea, int nTrack)
        throws NotInContextException
    {
        ambientSoundChangeNight(oArea, nTrack, null, false);
    }

    public void
    ambientSoundChangeNight(NWObject oArea, int nTrack, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        ambientSoundChangeNight(oArea, nTrack, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    ambientSoundChangeNight(NWObject oArea, int nTrack, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ambientSoundChangeNight");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.ambientSoundChangeNight(oArea, nTrack, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    ambientSoundPlay(NWObject oArea)
        throws NotInContextException
    {
        ambientSoundPlay(oArea, null, false);
    }

    public void
    ambientSoundPlay(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        ambientSoundPlay(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    ambientSoundPlay(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ambientSoundPlay");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.ambientSoundPlay(oArea, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    ambientSoundSetDayVolume(NWObject oArea, int nVolume)
        throws NotInContextException
    {
        ambientSoundSetDayVolume(oArea, nVolume, null, false);
    }

    public void
    ambientSoundSetDayVolume(NWObject oArea, int nVolume, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        ambientSoundSetDayVolume(oArea, nVolume, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    ambientSoundSetDayVolume(NWObject oArea, int nVolume, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ambientSoundSetDayVolume");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.ambientSoundSetDayVolume(oArea, nVolume, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    ambientSoundSetNightVolume(NWObject oArea, int nVolume)
        throws NotInContextException
    {
        ambientSoundSetNightVolume(oArea, nVolume, null, false);
    }

    public void
    ambientSoundSetNightVolume(NWObject oArea, int nVolume, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        ambientSoundSetNightVolume(oArea, nVolume, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    ambientSoundSetNightVolume(NWObject oArea, int nVolume, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ambientSoundSetNightVolume");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.ambientSoundSetNightVolume(oArea, nVolume, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    ambientSoundStop(NWObject oArea)
        throws NotInContextException
    {
        ambientSoundStop(oArea, null, false);
    }

    public void
    ambientSoundStop(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        ambientSoundStop(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    ambientSoundStop(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ambientSoundStop");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.ambientSoundStop(oArea, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWVector
    angleToVector(double fAngle)
        throws NotInContextException
    {
        return angleToVector(fAngle, null, false);
    }

    public NWVector
    angleToVector(double fAngle, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return angleToVector(fAngle, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWVector
    angleToVector(double fAngle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("angleToVector");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.angleToVector(fAngle, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    applyEffectAtLocation(DurationType tDurationType, NWEffect eEffect, NWLocation lLocation, double fDuration)
        throws InvalidEffectException,
               NotInContextException
    {
        applyEffectAtLocation(tDurationType, eEffect, lLocation, fDuration, null, false);
    }

    public void
    applyEffectAtLocation(DurationType tDurationType, NWEffect eEffect, NWLocation lLocation, double fDuration, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        applyEffectAtLocation(tDurationType, eEffect, lLocation, fDuration, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    applyEffectAtLocation(DurationType tDurationType, NWEffect eEffect, NWLocation lLocation, double fDuration, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("applyEffectAtLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.applyEffectAtLocation(tDurationType, eEffect, lLocation, fDuration, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    applyEffectToObject(DurationType tDurationType, NWEffect eEffect, NWObject oTarget, double fDuration)
        throws InvalidEffectException,
               NotInContextException
    {
        applyEffectToObject(tDurationType, eEffect, oTarget, fDuration, null, false);
    }

    public void
    applyEffectToObject(DurationType tDurationType, NWEffect eEffect, NWObject oTarget, double fDuration, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        applyEffectToObject(tDurationType, eEffect, oTarget, fDuration, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    applyEffectToObject(DurationType tDurationType, NWEffect eEffect, NWObject oTarget, double fDuration, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("applyEffectToObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.applyEffectToObject(tDurationType, eEffect, oTarget, fDuration, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    badBadReplaceMeThisDoesNothing()
        throws NotInContextException
    {
        return badBadReplaceMeThisDoesNothing(null, false);
    }

    public NWItemProperty
    badBadReplaceMeThisDoesNothing(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return badBadReplaceMeThisDoesNothing(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    badBadReplaceMeThisDoesNothing(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("badBadReplaceMeThisDoesNothing");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.badBadReplaceMeThisDoesNothing(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    beginConversation(String sResRef, NWObject oObjectToDialog)
        throws NotInContextException
    {
        return beginConversation(sResRef, oObjectToDialog, null, false);
    }

    public int
    beginConversation(String sResRef, NWObject oObjectToDialog, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return beginConversation(sResRef, oObjectToDialog, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    beginConversation(String sResRef, NWObject oObjectToDialog, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("beginConversation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.beginConversation(sResRef, oObjectToDialog, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    blackScreen(NWObject oCreature)
        throws NotInContextException
    {
        blackScreen(oCreature, null, false);
    }

    public void
    blackScreen(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        blackScreen(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    blackScreen(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("blackScreen");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.blackScreen(oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    bootPC(NWObject oPlayer)
        throws NotInContextException
    {
        bootPC(oPlayer, null, false);
    }

    public void
    bootPC(NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        bootPC(oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    bootPC(NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("bootPC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.bootPC(oPlayer, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    changeFaction(NWObject oObjectToChangeFaction, NWObject oMemberOfFactionToJoin)
        throws NotInContextException
    {
        changeFaction(oObjectToChangeFaction, oMemberOfFactionToJoin, null, false);
    }

    public void
    changeFaction(NWObject oObjectToChangeFaction, NWObject oMemberOfFactionToJoin, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        changeFaction(oObjectToChangeFaction, oMemberOfFactionToJoin, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    changeFaction(NWObject oObjectToChangeFaction, NWObject oMemberOfFactionToJoin, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("changeFaction");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.changeFaction(oObjectToChangeFaction, oMemberOfFactionToJoin, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    changeToStandardFaction(NWObject oCreatureToChange, StandardFaction tStandardFaction)
        throws NotInContextException
    {
        changeToStandardFaction(oCreatureToChange, tStandardFaction, null, false);
    }

    public void
    changeToStandardFaction(NWObject oCreatureToChange, StandardFaction tStandardFaction, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        changeToStandardFaction(oCreatureToChange, tStandardFaction, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    changeToStandardFaction(NWObject oCreatureToChange, StandardFaction tStandardFaction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("changeToStandardFaction");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.changeToStandardFaction(oCreatureToChange, tStandardFaction, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    clearAllActions(boolean bClearCombatState)
        throws NotInContextException
    {
        clearAllActions(bClearCombatState, null, false);
    }

    public void
    clearAllActions(boolean bClearCombatState, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        clearAllActions(bClearCombatState, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    clearAllActions(boolean bClearCombatState, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("clearAllActions");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.clearAllActions(bClearCombatState, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    clearPersonalReputation(NWObject oTarget, NWObject oSource)
        throws NotInContextException
    {
        clearPersonalReputation(oTarget, oSource, null, false);
    }

    public void
    clearPersonalReputation(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        clearPersonalReputation(oTarget, oSource, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    clearPersonalReputation(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("clearPersonalReputation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.clearPersonalReputation(oTarget, oSource, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    clearState()
    {
        clearState(null, false);
    }

    public void
    clearState(java.util.Map<String, String> __ctx)
    {
        clearState(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    clearState(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.clearState(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    copyItem(NWObject oItem, NWObject oTargetInventory, boolean bCopyVars)
        throws NotInContextException
    {
        return copyItem(oItem, oTargetInventory, bCopyVars, null, false);
    }

    public NWObject
    copyItem(NWObject oItem, NWObject oTargetInventory, boolean bCopyVars, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return copyItem(oItem, oTargetInventory, bCopyVars, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    copyItem(NWObject oItem, NWObject oTargetInventory, boolean bCopyVars, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("copyItem");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.copyItem(oItem, oTargetInventory, bCopyVars, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    copyItemAndModify(NWObject oItem, int nType, int nIndex, int nNewValue, boolean bCopyVars)
        throws NotInContextException
    {
        return copyItemAndModify(oItem, nType, nIndex, nNewValue, bCopyVars, null, false);
    }

    public NWObject
    copyItemAndModify(NWObject oItem, int nType, int nIndex, int nNewValue, boolean bCopyVars, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return copyItemAndModify(oItem, nType, nIndex, nNewValue, bCopyVars, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    copyItemAndModify(NWObject oItem, int nType, int nIndex, int nNewValue, boolean bCopyVars, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("copyItemAndModify");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.copyItemAndModify(oItem, nType, nIndex, nNewValue, bCopyVars, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    copyObject(NWObject oSource, NWLocation locLocation, NWObject oOwner, String sNewTag)
        throws NotInContextException
    {
        return copyObject(oSource, locLocation, oOwner, sNewTag, null, false);
    }

    public NWObject
    copyObject(NWObject oSource, NWLocation locLocation, NWObject oOwner, String sNewTag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return copyObject(oSource, locLocation, oOwner, sNewTag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    copyObject(NWObject oSource, NWLocation locLocation, NWObject oOwner, String sNewTag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("copyObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.copyObject(oSource, locLocation, oOwner, sNewTag, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    createItemOnObject(String sItemTemplate, NWObject oTarget, int nStackSize, String sNewTag)
        throws NotInContextException
    {
        return createItemOnObject(sItemTemplate, oTarget, nStackSize, sNewTag, null, false);
    }

    public NWObject
    createItemOnObject(String sItemTemplate, NWObject oTarget, int nStackSize, String sNewTag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return createItemOnObject(sItemTemplate, oTarget, nStackSize, sNewTag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    createItemOnObject(String sItemTemplate, NWObject oTarget, int nStackSize, String sNewTag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("createItemOnObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.createItemOnObject(sItemTemplate, oTarget, nStackSize, sNewTag, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    createObject(ObjectType tObjectType, String sTemplate, NWLocation lLocation, boolean bUseAppearAnimation, String sNewTag)
        throws NotInContextException
    {
        return createObject(tObjectType, sTemplate, lLocation, bUseAppearAnimation, sNewTag, null, false);
    }

    public NWObject
    createObject(ObjectType tObjectType, String sTemplate, NWLocation lLocation, boolean bUseAppearAnimation, String sNewTag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return createObject(tObjectType, sTemplate, lLocation, bUseAppearAnimation, sNewTag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    createObject(ObjectType tObjectType, String sTemplate, NWLocation lLocation, boolean bUseAppearAnimation, String sNewTag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("createObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.createObject(tObjectType, sTemplate, lLocation, bUseAppearAnimation, sNewTag, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    createTrapAtLocation(TrapType tTrapType, NWLocation lLocation, double fSize, String sTag, StandardFaction tStandardFaction, String sOnDisarmScript, String sOnTrapTriggeredScript)
        throws NotInContextException
    {
        return createTrapAtLocation(tTrapType, lLocation, fSize, sTag, tStandardFaction, sOnDisarmScript, sOnTrapTriggeredScript, null, false);
    }

    public NWObject
    createTrapAtLocation(TrapType tTrapType, NWLocation lLocation, double fSize, String sTag, StandardFaction tStandardFaction, String sOnDisarmScript, String sOnTrapTriggeredScript, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return createTrapAtLocation(tTrapType, lLocation, fSize, sTag, tStandardFaction, sOnDisarmScript, sOnTrapTriggeredScript, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    createTrapAtLocation(TrapType tTrapType, NWLocation lLocation, double fSize, String sTag, StandardFaction tStandardFaction, String sOnDisarmScript, String sOnTrapTriggeredScript, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("createTrapAtLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.createTrapAtLocation(tTrapType, lLocation, fSize, sTag, tStandardFaction, sOnDisarmScript, sOnTrapTriggeredScript, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    createTrapOnObject(TrapType tTrapType, NWObject oObject, StandardFaction tStandardFaction, String sOnDisarmScript, String sOnTrapTriggeredScript)
        throws NotInContextException
    {
        createTrapOnObject(tTrapType, oObject, tStandardFaction, sOnDisarmScript, sOnTrapTriggeredScript, null, false);
    }

    public void
    createTrapOnObject(TrapType tTrapType, NWObject oObject, StandardFaction tStandardFaction, String sOnDisarmScript, String sOnTrapTriggeredScript, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        createTrapOnObject(tTrapType, oObject, tStandardFaction, sOnDisarmScript, sOnTrapTriggeredScript, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    createTrapOnObject(TrapType tTrapType, NWObject oObject, StandardFaction tStandardFaction, String sOnDisarmScript, String sOnTrapTriggeredScript, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("createTrapOnObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.createTrapOnObject(tTrapType, oObject, tStandardFaction, sOnDisarmScript, sOnTrapTriggeredScript, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    dayToNight(NWObject oPlayer, double fTransitionTime)
        throws NotInContextException
    {
        dayToNight(oPlayer, fTransitionTime, null, false);
    }

    public void
    dayToNight(NWObject oPlayer, double fTransitionTime, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        dayToNight(oPlayer, fTransitionTime, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    dayToNight(NWObject oPlayer, double fTransitionTime, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("dayToNight");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.dayToNight(oPlayer, fTransitionTime, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    decrementRemainingFeatUses(NWObject oCreature, int nFeat)
        throws NotInContextException
    {
        decrementRemainingFeatUses(oCreature, nFeat, null, false);
    }

    public void
    decrementRemainingFeatUses(NWObject oCreature, int nFeat, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        decrementRemainingFeatUses(oCreature, nFeat, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    decrementRemainingFeatUses(NWObject oCreature, int nFeat, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("decrementRemainingFeatUses");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.decrementRemainingFeatUses(oCreature, nFeat, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    decrementRemainingSpellUses(NWObject oCreature, int nSpell)
        throws NotInContextException
    {
        decrementRemainingSpellUses(oCreature, nSpell, null, false);
    }

    public void
    decrementRemainingSpellUses(NWObject oCreature, int nSpell, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        decrementRemainingSpellUses(oCreature, nSpell, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    decrementRemainingSpellUses(NWObject oCreature, int nSpell, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("decrementRemainingSpellUses");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.decrementRemainingSpellUses(oCreature, nSpell, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    delState(String key)
    {
        delState(key, null, false);
    }

    public void
    delState(String key, java.util.Map<String, String> __ctx)
    {
        delState(key, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    delState(String key, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.delState(key, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    deleteCampaignVariable(String sCampaignName, String sVarName, NWObject oPlayer)
        throws NotInContextException
    {
        deleteCampaignVariable(sCampaignName, sVarName, oPlayer, null, false);
    }

    public void
    deleteCampaignVariable(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        deleteCampaignVariable(sCampaignName, sVarName, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    deleteCampaignVariable(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteCampaignVariable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.deleteCampaignVariable(sCampaignName, sVarName, oPlayer, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    deleteLocalFloat(NWObject oObject, String sVarName)
        throws NotInContextException
    {
        deleteLocalFloat(oObject, sVarName, null, false);
    }

    public void
    deleteLocalFloat(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        deleteLocalFloat(oObject, sVarName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    deleteLocalFloat(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteLocalFloat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.deleteLocalFloat(oObject, sVarName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    deleteLocalInt(NWObject oObject, String sVarName)
        throws NotInContextException
    {
        deleteLocalInt(oObject, sVarName, null, false);
    }

    public void
    deleteLocalInt(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        deleteLocalInt(oObject, sVarName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    deleteLocalInt(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteLocalInt");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.deleteLocalInt(oObject, sVarName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    deleteLocalLocation(NWObject oObject, String sVarName)
        throws NotInContextException
    {
        deleteLocalLocation(oObject, sVarName, null, false);
    }

    public void
    deleteLocalLocation(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        deleteLocalLocation(oObject, sVarName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    deleteLocalLocation(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteLocalLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.deleteLocalLocation(oObject, sVarName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    deleteLocalObject(NWObject oObject, String sVarName)
        throws NotInContextException
    {
        deleteLocalObject(oObject, sVarName, null, false);
    }

    public void
    deleteLocalObject(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        deleteLocalObject(oObject, sVarName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    deleteLocalObject(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteLocalObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.deleteLocalObject(oObject, sVarName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    deleteLocalString(NWObject oObject, String sVarName)
        throws NotInContextException
    {
        deleteLocalString(oObject, sVarName, null, false);
    }

    public void
    deleteLocalString(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        deleteLocalString(oObject, sVarName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    deleteLocalString(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteLocalString");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.deleteLocalString(oObject, sVarName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    destroyCampaignDatabase(String sCampaignName)
        throws NotInContextException
    {
        destroyCampaignDatabase(sCampaignName, null, false);
    }

    public void
    destroyCampaignDatabase(String sCampaignName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        destroyCampaignDatabase(sCampaignName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    destroyCampaignDatabase(String sCampaignName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("destroyCampaignDatabase");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.destroyCampaignDatabase(sCampaignName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    destroyObject(NWObject oDestroy, double fDelay)
        throws NotInContextException
    {
        destroyObject(oDestroy, fDelay, null, false);
    }

    public void
    destroyObject(NWObject oDestroy, double fDelay, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        destroyObject(oDestroy, fDelay, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    destroyObject(NWObject oDestroy, double fDelay, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("destroyObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.destroyObject(oDestroy, fDelay, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    doDoorAction(NWObject oTargetDoor, DoorAction tDoorAction)
        throws NotInContextException
    {
        doDoorAction(oTargetDoor, tDoorAction, null, false);
    }

    public void
    doDoorAction(NWObject oTargetDoor, DoorAction tDoorAction, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        doDoorAction(oTargetDoor, tDoorAction, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    doDoorAction(NWObject oTargetDoor, DoorAction tDoorAction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("doDoorAction");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.doDoorAction(oTargetDoor, tDoorAction, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    doPlaceableObjectAction(NWObject oPlaceable, PlaceableAction tPlaceableAction)
        throws NotInContextException
    {
        doPlaceableObjectAction(oPlaceable, tPlaceableAction, null, false);
    }

    public void
    doPlaceableObjectAction(NWObject oPlaceable, PlaceableAction tPlaceableAction, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        doPlaceableObjectAction(oPlaceable, tPlaceableAction, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    doPlaceableObjectAction(NWObject oPlaceable, PlaceableAction tPlaceableAction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("doPlaceableObjectAction");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.doPlaceableObjectAction(oPlaceable, tPlaceableAction, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    doSinglePlayerAutoSave()
        throws NotInContextException
    {
        doSinglePlayerAutoSave(null, false);
    }

    public void
    doSinglePlayerAutoSave(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        doSinglePlayerAutoSave(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    doSinglePlayerAutoSave(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("doSinglePlayerAutoSave");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.doSinglePlayerAutoSave(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    doWhirlwindAttack(boolean bDisplayFeedback, boolean bImproved)
        throws NotInContextException
    {
        doWhirlwindAttack(bDisplayFeedback, bImproved, null, false);
    }

    public void
    doWhirlwindAttack(boolean bDisplayFeedback, boolean bImproved, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        doWhirlwindAttack(bDisplayFeedback, bImproved, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    doWhirlwindAttack(boolean bDisplayFeedback, boolean bImproved, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("doWhirlwindAttack");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.doWhirlwindAttack(bDisplayFeedback, bImproved, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectACDecrease(int nValue, ACModifyType tACModifyType, DamageType tDamageType)
        throws NotInContextException
    {
        return effectACDecrease(nValue, tACModifyType, tDamageType, null, false);
    }

    public NWEffect
    effectACDecrease(int nValue, ACModifyType tACModifyType, DamageType tDamageType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectACDecrease(nValue, tACModifyType, tDamageType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectACDecrease(int nValue, ACModifyType tACModifyType, DamageType tDamageType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectACDecrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectACDecrease(nValue, tACModifyType, tDamageType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectACIncrease(int nValue, ACModifyType tACModifyType, DamageType tDamageType)
        throws NotInContextException
    {
        return effectACIncrease(nValue, tACModifyType, tDamageType, null, false);
    }

    public NWEffect
    effectACIncrease(int nValue, ACModifyType tACModifyType, DamageType tDamageType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectACIncrease(nValue, tACModifyType, tDamageType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectACIncrease(int nValue, ACModifyType tACModifyType, DamageType tDamageType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectACIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectACIncrease(nValue, tACModifyType, tDamageType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectAbilityDecrease(Ability tAbility, int nModifyBy)
        throws NotInContextException
    {
        return effectAbilityDecrease(tAbility, nModifyBy, null, false);
    }

    public NWEffect
    effectAbilityDecrease(Ability tAbility, int nModifyBy, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectAbilityDecrease(tAbility, nModifyBy, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectAbilityDecrease(Ability tAbility, int nModifyBy, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectAbilityDecrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectAbilityDecrease(tAbility, nModifyBy, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectAbilityIncrease(Ability tAbility, int nModifyBy)
        throws NotInContextException
    {
        return effectAbilityIncrease(tAbility, nModifyBy, null, false);
    }

    public NWEffect
    effectAbilityIncrease(Ability tAbility, int nModifyBy, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectAbilityIncrease(tAbility, nModifyBy, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectAbilityIncrease(Ability tAbility, int nModifyBy, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectAbilityIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectAbilityIncrease(tAbility, nModifyBy, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectAppear(int nAnimation)
        throws NotInContextException
    {
        return effectAppear(nAnimation, null, false);
    }

    public NWEffect
    effectAppear(int nAnimation, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectAppear(nAnimation, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectAppear(int nAnimation, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectAppear");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectAppear(nAnimation, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectAreaOfEffect(int nAreaEffectId, String sOnEnterScript, String sHeartbeatScript, String sOnExitScript)
        throws NotInContextException
    {
        return effectAreaOfEffect(nAreaEffectId, sOnEnterScript, sHeartbeatScript, sOnExitScript, null, false);
    }

    public NWEffect
    effectAreaOfEffect(int nAreaEffectId, String sOnEnterScript, String sHeartbeatScript, String sOnExitScript, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectAreaOfEffect(nAreaEffectId, sOnEnterScript, sHeartbeatScript, sOnExitScript, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectAreaOfEffect(int nAreaEffectId, String sOnEnterScript, String sHeartbeatScript, String sOnExitScript, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectAreaOfEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectAreaOfEffect(nAreaEffectId, sOnEnterScript, sHeartbeatScript, sOnExitScript, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectAttackDecrease(int nPenalty, AttackBonus tAttackBonus)
        throws NotInContextException
    {
        return effectAttackDecrease(nPenalty, tAttackBonus, null, false);
    }

    public NWEffect
    effectAttackDecrease(int nPenalty, AttackBonus tAttackBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectAttackDecrease(nPenalty, tAttackBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectAttackDecrease(int nPenalty, AttackBonus tAttackBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectAttackDecrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectAttackDecrease(nPenalty, tAttackBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectAttackIncrease(int nBonus, AttackBonus tAttackBonus)
        throws NotInContextException
    {
        return effectAttackIncrease(nBonus, tAttackBonus, null, false);
    }

    public NWEffect
    effectAttackIncrease(int nBonus, AttackBonus tAttackBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectAttackIncrease(nBonus, tAttackBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectAttackIncrease(int nBonus, AttackBonus tAttackBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectAttackIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectAttackIncrease(nBonus, tAttackBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectBeam(int nBeamVisualEffect, NWObject oEffector, CreaturePart tCreaturePart, boolean bMissEffect)
        throws NotInContextException
    {
        return effectBeam(nBeamVisualEffect, oEffector, tCreaturePart, bMissEffect, null, false);
    }

    public NWEffect
    effectBeam(int nBeamVisualEffect, NWObject oEffector, CreaturePart tCreaturePart, boolean bMissEffect, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectBeam(nBeamVisualEffect, oEffector, tCreaturePart, bMissEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectBeam(int nBeamVisualEffect, NWObject oEffector, CreaturePart tCreaturePart, boolean bMissEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectBeam");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectBeam(nBeamVisualEffect, oEffector, tCreaturePart, bMissEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectBlindness()
        throws NotInContextException
    {
        return effectBlindness(null, false);
    }

    public NWEffect
    effectBlindness(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectBlindness(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectBlindness(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectBlindness");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectBlindness(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectCharmed()
        throws NotInContextException
    {
        return effectCharmed(null, false);
    }

    public NWEffect
    effectCharmed(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectCharmed(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectCharmed(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectCharmed");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectCharmed(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectConcealment(int nPercentage, MissChanceType tMissChanceType)
        throws NotInContextException
    {
        return effectConcealment(nPercentage, tMissChanceType, null, false);
    }

    public NWEffect
    effectConcealment(int nPercentage, MissChanceType tMissChanceType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectConcealment(nPercentage, tMissChanceType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectConcealment(int nPercentage, MissChanceType tMissChanceType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectConcealment");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectConcealment(nPercentage, tMissChanceType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectConfused()
        throws NotInContextException
    {
        return effectConfused(null, false);
    }

    public NWEffect
    effectConfused(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectConfused(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectConfused(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectConfused");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectConfused(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectCurse(int nStrMod, int nDexMod, int nConMod, int nIntMod, int nWisMod, int nChaMod)
        throws NotInContextException
    {
        return effectCurse(nStrMod, nDexMod, nConMod, nIntMod, nWisMod, nChaMod, null, false);
    }

    public NWEffect
    effectCurse(int nStrMod, int nDexMod, int nConMod, int nIntMod, int nWisMod, int nChaMod, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectCurse(nStrMod, nDexMod, nConMod, nIntMod, nWisMod, nChaMod, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectCurse(int nStrMod, int nDexMod, int nConMod, int nIntMod, int nWisMod, int nChaMod, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectCurse");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectCurse(nStrMod, nDexMod, nConMod, nIntMod, nWisMod, nChaMod, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectCutsceneDominated()
        throws NotInContextException
    {
        return effectCutsceneDominated(null, false);
    }

    public NWEffect
    effectCutsceneDominated(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectCutsceneDominated(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectCutsceneDominated(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectCutsceneDominated");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectCutsceneDominated(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectCutsceneGhost()
        throws NotInContextException
    {
        return effectCutsceneGhost(null, false);
    }

    public NWEffect
    effectCutsceneGhost(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectCutsceneGhost(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectCutsceneGhost(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectCutsceneGhost");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectCutsceneGhost(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectCutsceneImmobilize()
        throws NotInContextException
    {
        return effectCutsceneImmobilize(null, false);
    }

    public NWEffect
    effectCutsceneImmobilize(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectCutsceneImmobilize(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectCutsceneImmobilize(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectCutsceneImmobilize");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectCutsceneImmobilize(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectCutsceneParalyze()
        throws NotInContextException
    {
        return effectCutsceneParalyze(null, false);
    }

    public NWEffect
    effectCutsceneParalyze(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectCutsceneParalyze(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectCutsceneParalyze(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectCutsceneParalyze");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectCutsceneParalyze(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDamage(int nDamageAmount, DamageType tDamageType, DamagePower tDamagePower)
        throws NotInContextException
    {
        return effectDamage(nDamageAmount, tDamageType, tDamagePower, null, false);
    }

    public NWEffect
    effectDamage(int nDamageAmount, DamageType tDamageType, DamagePower tDamagePower, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDamage(nDamageAmount, tDamageType, tDamagePower, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDamage(int nDamageAmount, DamageType tDamageType, DamagePower tDamagePower, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDamage");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDamage(nDamageAmount, tDamageType, tDamagePower, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDamageDecrease(int nPenalty, DamageType tDamageType)
        throws NotInContextException
    {
        return effectDamageDecrease(nPenalty, tDamageType, null, false);
    }

    public NWEffect
    effectDamageDecrease(int nPenalty, DamageType tDamageType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDamageDecrease(nPenalty, tDamageType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDamageDecrease(int nPenalty, DamageType tDamageType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDamageDecrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDamageDecrease(nPenalty, tDamageType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDamageImmunityDecrease(DamageType tDamageType, int nPercentImmunity)
        throws NotInContextException
    {
        return effectDamageImmunityDecrease(tDamageType, nPercentImmunity, null, false);
    }

    public NWEffect
    effectDamageImmunityDecrease(DamageType tDamageType, int nPercentImmunity, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDamageImmunityDecrease(tDamageType, nPercentImmunity, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDamageImmunityDecrease(DamageType tDamageType, int nPercentImmunity, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDamageImmunityDecrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDamageImmunityDecrease(tDamageType, nPercentImmunity, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDamageImmunityIncrease(DamageType tDamageType, int nPercentImmunity)
        throws NotInContextException
    {
        return effectDamageImmunityIncrease(tDamageType, nPercentImmunity, null, false);
    }

    public NWEffect
    effectDamageImmunityIncrease(DamageType tDamageType, int nPercentImmunity, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDamageImmunityIncrease(tDamageType, nPercentImmunity, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDamageImmunityIncrease(DamageType tDamageType, int nPercentImmunity, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDamageImmunityIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDamageImmunityIncrease(tDamageType, nPercentImmunity, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDamageIncrease(int nBonus, DamageType tDamageType)
        throws NotInContextException
    {
        return effectDamageIncrease(nBonus, tDamageType, null, false);
    }

    public NWEffect
    effectDamageIncrease(int nBonus, DamageType tDamageType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDamageIncrease(nBonus, tDamageType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDamageIncrease(int nBonus, DamageType tDamageType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDamageIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDamageIncrease(nBonus, tDamageType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDamageReduction(int nAmount, DamagePower tDamagePower, int nLimit)
        throws NotInContextException
    {
        return effectDamageReduction(nAmount, tDamagePower, nLimit, null, false);
    }

    public NWEffect
    effectDamageReduction(int nAmount, DamagePower tDamagePower, int nLimit, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDamageReduction(nAmount, tDamagePower, nLimit, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDamageReduction(int nAmount, DamagePower tDamagePower, int nLimit, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDamageReduction");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDamageReduction(nAmount, tDamagePower, nLimit, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDamageResistance(DamageType tDamageType, int nAmount, int nLimit)
        throws NotInContextException
    {
        return effectDamageResistance(tDamageType, nAmount, nLimit, null, false);
    }

    public NWEffect
    effectDamageResistance(DamageType tDamageType, int nAmount, int nLimit, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDamageResistance(tDamageType, nAmount, nLimit, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDamageResistance(DamageType tDamageType, int nAmount, int nLimit, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDamageResistance");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDamageResistance(tDamageType, nAmount, nLimit, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDamageShield(int nDamageAmount, int nRandomAmount, DamageType tDamageType)
        throws NotInContextException
    {
        return effectDamageShield(nDamageAmount, nRandomAmount, tDamageType, null, false);
    }

    public NWEffect
    effectDamageShield(int nDamageAmount, int nRandomAmount, DamageType tDamageType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDamageShield(nDamageAmount, nRandomAmount, tDamageType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDamageShield(int nDamageAmount, int nRandomAmount, DamageType tDamageType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDamageShield");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDamageShield(nDamageAmount, nRandomAmount, tDamageType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDarkness()
        throws NotInContextException
    {
        return effectDarkness(null, false);
    }

    public NWEffect
    effectDarkness(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDarkness(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDarkness(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDarkness");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDarkness(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDazed()
        throws NotInContextException
    {
        return effectDazed(null, false);
    }

    public NWEffect
    effectDazed(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDazed(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDazed(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDazed");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDazed(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDeaf()
        throws NotInContextException
    {
        return effectDeaf(null, false);
    }

    public NWEffect
    effectDeaf(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDeaf(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDeaf(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDeaf");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDeaf(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDeath(boolean bSpectacularDeath, boolean bDisplayFeedback)
        throws NotInContextException
    {
        return effectDeath(bSpectacularDeath, bDisplayFeedback, null, false);
    }

    public NWEffect
    effectDeath(boolean bSpectacularDeath, boolean bDisplayFeedback, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDeath(bSpectacularDeath, bDisplayFeedback, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDeath(boolean bSpectacularDeath, boolean bDisplayFeedback, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDeath");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDeath(bSpectacularDeath, bDisplayFeedback, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDisappear(int nAnimation)
        throws NotInContextException
    {
        return effectDisappear(nAnimation, null, false);
    }

    public NWEffect
    effectDisappear(int nAnimation, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDisappear(nAnimation, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDisappear(int nAnimation, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDisappear");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDisappear(nAnimation, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDisappearAppear(NWLocation lLocation, int nAnimation)
        throws NotInContextException
    {
        return effectDisappearAppear(lLocation, nAnimation, null, false);
    }

    public NWEffect
    effectDisappearAppear(NWLocation lLocation, int nAnimation, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDisappearAppear(lLocation, nAnimation, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDisappearAppear(NWLocation lLocation, int nAnimation, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDisappearAppear");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDisappearAppear(lLocation, nAnimation, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDisease(int nDiseaseType)
        throws NotInContextException
    {
        return effectDisease(nDiseaseType, null, false);
    }

    public NWEffect
    effectDisease(int nDiseaseType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDisease(nDiseaseType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDisease(int nDiseaseType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDisease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDisease(nDiseaseType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDispelMagicAll(int nCasterLevel)
        throws NotInContextException
    {
        return effectDispelMagicAll(nCasterLevel, null, false);
    }

    public NWEffect
    effectDispelMagicAll(int nCasterLevel, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDispelMagicAll(nCasterLevel, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDispelMagicAll(int nCasterLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDispelMagicAll");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDispelMagicAll(nCasterLevel, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDispelMagicBest(int nCasterLevel)
        throws NotInContextException
    {
        return effectDispelMagicBest(nCasterLevel, null, false);
    }

    public NWEffect
    effectDispelMagicBest(int nCasterLevel, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDispelMagicBest(nCasterLevel, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDispelMagicBest(int nCasterLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDispelMagicBest");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDispelMagicBest(nCasterLevel, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectDominated()
        throws NotInContextException
    {
        return effectDominated(null, false);
    }

    public NWEffect
    effectDominated(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectDominated(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectDominated(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectDominated");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectDominated(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectEntangle()
        throws NotInContextException
    {
        return effectEntangle(null, false);
    }

    public NWEffect
    effectEntangle(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectEntangle(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectEntangle(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectEntangle");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectEntangle(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectEthereal()
        throws NotInContextException
    {
        return effectEthereal(null, false);
    }

    public NWEffect
    effectEthereal(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectEthereal(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectEthereal(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectEthereal");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectEthereal(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectFrightened()
        throws NotInContextException
    {
        return effectFrightened(null, false);
    }

    public NWEffect
    effectFrightened(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectFrightened(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectFrightened(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectFrightened");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectFrightened(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectHaste()
        throws NotInContextException
    {
        return effectHaste(null, false);
    }

    public NWEffect
    effectHaste(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectHaste(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectHaste(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectHaste");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectHaste(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectHeal(int nDamageToHeal)
        throws NotInContextException
    {
        return effectHeal(nDamageToHeal, null, false);
    }

    public NWEffect
    effectHeal(int nDamageToHeal, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectHeal(nDamageToHeal, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectHeal(int nDamageToHeal, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectHeal");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectHeal(nDamageToHeal, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectHitPointChangeWhenDying(double fHitPointChangePerRound)
        throws NotInContextException
    {
        return effectHitPointChangeWhenDying(fHitPointChangePerRound, null, false);
    }

    public NWEffect
    effectHitPointChangeWhenDying(double fHitPointChangePerRound, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectHitPointChangeWhenDying(fHitPointChangePerRound, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectHitPointChangeWhenDying(double fHitPointChangePerRound, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectHitPointChangeWhenDying");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectHitPointChangeWhenDying(fHitPointChangePerRound, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectImmunity(ImmunityType tImmunityType)
        throws NotInContextException
    {
        return effectImmunity(tImmunityType, null, false);
    }

    public NWEffect
    effectImmunity(ImmunityType tImmunityType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectImmunity(tImmunityType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectImmunity(ImmunityType tImmunityType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectImmunity");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectImmunity(tImmunityType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectInvisibility(int nInvisibilityType)
        throws NotInContextException
    {
        return effectInvisibility(nInvisibilityType, null, false);
    }

    public NWEffect
    effectInvisibility(int nInvisibilityType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectInvisibility(nInvisibilityType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectInvisibility(int nInvisibilityType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectInvisibility");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectInvisibility(nInvisibilityType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectKnockdown()
        throws NotInContextException
    {
        return effectKnockdown(null, false);
    }

    public NWEffect
    effectKnockdown(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectKnockdown(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectKnockdown(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectKnockdown");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectKnockdown(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectLinkEffects(NWEffect eChildEffect, NWEffect eParentEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return effectLinkEffects(eChildEffect, eParentEffect, null, false);
    }

    public NWEffect
    effectLinkEffects(NWEffect eChildEffect, NWEffect eParentEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return effectLinkEffects(eChildEffect, eParentEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectLinkEffects(NWEffect eChildEffect, NWEffect eParentEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectLinkEffects");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectLinkEffects(eChildEffect, eParentEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectMissChance(int nPercentage, MissChanceType tMissChanceType)
        throws NotInContextException
    {
        return effectMissChance(nPercentage, tMissChanceType, null, false);
    }

    public NWEffect
    effectMissChance(int nPercentage, MissChanceType tMissChanceType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectMissChance(nPercentage, tMissChanceType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectMissChance(int nPercentage, MissChanceType tMissChanceType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectMissChance");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectMissChance(nPercentage, tMissChanceType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectModifyAttacks(int nAttacks)
        throws NotInContextException
    {
        return effectModifyAttacks(nAttacks, null, false);
    }

    public NWEffect
    effectModifyAttacks(int nAttacks, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectModifyAttacks(nAttacks, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectModifyAttacks(int nAttacks, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectModifyAttacks");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectModifyAttacks(nAttacks, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectMovementSpeedDecrease(int nPercentChange)
        throws NotInContextException
    {
        return effectMovementSpeedDecrease(nPercentChange, null, false);
    }

    public NWEffect
    effectMovementSpeedDecrease(int nPercentChange, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectMovementSpeedDecrease(nPercentChange, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectMovementSpeedDecrease(int nPercentChange, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectMovementSpeedDecrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectMovementSpeedDecrease(nPercentChange, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectMovementSpeedIncrease(int nPercentChange)
        throws NotInContextException
    {
        return effectMovementSpeedIncrease(nPercentChange, null, false);
    }

    public NWEffect
    effectMovementSpeedIncrease(int nPercentChange, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectMovementSpeedIncrease(nPercentChange, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectMovementSpeedIncrease(int nPercentChange, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectMovementSpeedIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectMovementSpeedIncrease(nPercentChange, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectNegativeLevel(int nNumLevels, boolean bHPBonus)
        throws NotInContextException
    {
        return effectNegativeLevel(nNumLevels, bHPBonus, null, false);
    }

    public NWEffect
    effectNegativeLevel(int nNumLevels, boolean bHPBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectNegativeLevel(nNumLevels, bHPBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectNegativeLevel(int nNumLevels, boolean bHPBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectNegativeLevel");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectNegativeLevel(nNumLevels, bHPBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectParalyze()
        throws NotInContextException
    {
        return effectParalyze(null, false);
    }

    public NWEffect
    effectParalyze(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectParalyze(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectParalyze(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectParalyze");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectParalyze(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectPetrify()
        throws NotInContextException
    {
        return effectPetrify(null, false);
    }

    public NWEffect
    effectPetrify(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectPetrify(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectPetrify(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectPetrify");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectPetrify(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectPoison(int nPoisonType)
        throws NotInContextException
    {
        return effectPoison(nPoisonType, null, false);
    }

    public NWEffect
    effectPoison(int nPoisonType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectPoison(nPoisonType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectPoison(int nPoisonType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectPoison");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectPoison(nPoisonType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectPolymorph(int nPolymorphSelection, boolean bLocked)
        throws NotInContextException
    {
        return effectPolymorph(nPolymorphSelection, bLocked, null, false);
    }

    public NWEffect
    effectPolymorph(int nPolymorphSelection, boolean bLocked, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectPolymorph(nPolymorphSelection, bLocked, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectPolymorph(int nPolymorphSelection, boolean bLocked, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectPolymorph");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectPolymorph(nPolymorphSelection, bLocked, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectRegenerate(int nAmount, double fIntervalSeconds)
        throws NotInContextException
    {
        return effectRegenerate(nAmount, fIntervalSeconds, null, false);
    }

    public NWEffect
    effectRegenerate(int nAmount, double fIntervalSeconds, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectRegenerate(nAmount, fIntervalSeconds, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectRegenerate(int nAmount, double fIntervalSeconds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectRegenerate");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectRegenerate(nAmount, fIntervalSeconds, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectResurrection()
        throws NotInContextException
    {
        return effectResurrection(null, false);
    }

    public NWEffect
    effectResurrection(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectResurrection(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectResurrection(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectResurrection");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectResurrection(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSanctuary(int nDifficultyClass)
        throws NotInContextException
    {
        return effectSanctuary(nDifficultyClass, null, false);
    }

    public NWEffect
    effectSanctuary(int nDifficultyClass, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSanctuary(nDifficultyClass, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSanctuary(int nDifficultyClass, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSanctuary");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSanctuary(nDifficultyClass, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSavingThrowDecrease(int nSave, int nValue, SaveType tSaveType)
        throws NotInContextException
    {
        return effectSavingThrowDecrease(nSave, nValue, tSaveType, null, false);
    }

    public NWEffect
    effectSavingThrowDecrease(int nSave, int nValue, SaveType tSaveType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSavingThrowDecrease(nSave, nValue, tSaveType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSavingThrowDecrease(int nSave, int nValue, SaveType tSaveType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSavingThrowDecrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSavingThrowDecrease(nSave, nValue, tSaveType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSavingThrowIncrease(int nSave, int nValue, SaveType tSaveType)
        throws NotInContextException
    {
        return effectSavingThrowIncrease(nSave, nValue, tSaveType, null, false);
    }

    public NWEffect
    effectSavingThrowIncrease(int nSave, int nValue, SaveType tSaveType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSavingThrowIncrease(nSave, nValue, tSaveType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSavingThrowIncrease(int nSave, int nValue, SaveType tSaveType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSavingThrowIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSavingThrowIncrease(nSave, nValue, tSaveType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSeeInvisible()
        throws NotInContextException
    {
        return effectSeeInvisible(null, false);
    }

    public NWEffect
    effectSeeInvisible(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSeeInvisible(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSeeInvisible(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSeeInvisible");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSeeInvisible(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSilence()
        throws NotInContextException
    {
        return effectSilence(null, false);
    }

    public NWEffect
    effectSilence(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSilence(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSilence(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSilence");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSilence(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSkillDecrease(int nSkill, int nValue)
        throws NotInContextException
    {
        return effectSkillDecrease(nSkill, nValue, null, false);
    }

    public NWEffect
    effectSkillDecrease(int nSkill, int nValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSkillDecrease(nSkill, nValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSkillDecrease(int nSkill, int nValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSkillDecrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSkillDecrease(nSkill, nValue, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSkillIncrease(int nSkill, int nValue)
        throws NotInContextException
    {
        return effectSkillIncrease(nSkill, nValue, null, false);
    }

    public NWEffect
    effectSkillIncrease(int nSkill, int nValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSkillIncrease(nSkill, nValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSkillIncrease(int nSkill, int nValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSkillIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSkillIncrease(nSkill, nValue, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSleep()
        throws NotInContextException
    {
        return effectSleep(null, false);
    }

    public NWEffect
    effectSleep(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSleep(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSleep(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSleep");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSleep(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSlow()
        throws NotInContextException
    {
        return effectSlow(null, false);
    }

    public NWEffect
    effectSlow(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSlow(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSlow(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSlow");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSlow(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSpellFailure(int nPercent, SpellSchool tSpellSchool)
        throws NotInContextException
    {
        return effectSpellFailure(nPercent, tSpellSchool, null, false);
    }

    public NWEffect
    effectSpellFailure(int nPercent, SpellSchool tSpellSchool, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSpellFailure(nPercent, tSpellSchool, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSpellFailure(int nPercent, SpellSchool tSpellSchool, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSpellFailure");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSpellFailure(nPercent, tSpellSchool, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSpellImmunity(int nImmunityToSpell)
        throws NotInContextException
    {
        return effectSpellImmunity(nImmunityToSpell, null, false);
    }

    public NWEffect
    effectSpellImmunity(int nImmunityToSpell, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSpellImmunity(nImmunityToSpell, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSpellImmunity(int nImmunityToSpell, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSpellImmunity");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSpellImmunity(nImmunityToSpell, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSpellLevelAbsorption(int nMaxSpellLevelAbsorbed, int nTotalSpellLevelsAbsorbed, SpellSchool tSpellSchool)
        throws NotInContextException
    {
        return effectSpellLevelAbsorption(nMaxSpellLevelAbsorbed, nTotalSpellLevelsAbsorbed, tSpellSchool, null, false);
    }

    public NWEffect
    effectSpellLevelAbsorption(int nMaxSpellLevelAbsorbed, int nTotalSpellLevelsAbsorbed, SpellSchool tSpellSchool, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSpellLevelAbsorption(nMaxSpellLevelAbsorbed, nTotalSpellLevelsAbsorbed, tSpellSchool, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSpellLevelAbsorption(int nMaxSpellLevelAbsorbed, int nTotalSpellLevelsAbsorbed, SpellSchool tSpellSchool, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSpellLevelAbsorption");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSpellLevelAbsorption(nMaxSpellLevelAbsorbed, nTotalSpellLevelsAbsorbed, tSpellSchool, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSpellResistanceDecrease(int nValue)
        throws NotInContextException
    {
        return effectSpellResistanceDecrease(nValue, null, false);
    }

    public NWEffect
    effectSpellResistanceDecrease(int nValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSpellResistanceDecrease(nValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSpellResistanceDecrease(int nValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSpellResistanceDecrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSpellResistanceDecrease(nValue, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSpellResistanceIncrease(int nValue)
        throws NotInContextException
    {
        return effectSpellResistanceIncrease(nValue, null, false);
    }

    public NWEffect
    effectSpellResistanceIncrease(int nValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSpellResistanceIncrease(nValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSpellResistanceIncrease(int nValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSpellResistanceIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSpellResistanceIncrease(nValue, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectStunned()
        throws NotInContextException
    {
        return effectStunned(null, false);
    }

    public NWEffect
    effectStunned(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectStunned(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectStunned(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectStunned");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectStunned(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSummonCreature(String sCreatureResref, int nVisualEffectId, double fDelaySeconds, boolean bUseAppearAnimation)
        throws NotInContextException
    {
        return effectSummonCreature(sCreatureResref, nVisualEffectId, fDelaySeconds, bUseAppearAnimation, null, false);
    }

    public NWEffect
    effectSummonCreature(String sCreatureResref, int nVisualEffectId, double fDelaySeconds, boolean bUseAppearAnimation, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSummonCreature(sCreatureResref, nVisualEffectId, fDelaySeconds, bUseAppearAnimation, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSummonCreature(String sCreatureResref, int nVisualEffectId, double fDelaySeconds, boolean bUseAppearAnimation, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSummonCreature");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSummonCreature(sCreatureResref, nVisualEffectId, fDelaySeconds, bUseAppearAnimation, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectSwarm(boolean bLooping, String sCreatureTemplate1, String sCreatureTemplate2, String sCreatureTemplate3, String sCreatureTemplate4)
        throws NotInContextException
    {
        return effectSwarm(bLooping, sCreatureTemplate1, sCreatureTemplate2, sCreatureTemplate3, sCreatureTemplate4, null, false);
    }

    public NWEffect
    effectSwarm(boolean bLooping, String sCreatureTemplate1, String sCreatureTemplate2, String sCreatureTemplate3, String sCreatureTemplate4, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectSwarm(bLooping, sCreatureTemplate1, sCreatureTemplate2, sCreatureTemplate3, sCreatureTemplate4, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectSwarm(boolean bLooping, String sCreatureTemplate1, String sCreatureTemplate2, String sCreatureTemplate3, String sCreatureTemplate4, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectSwarm");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectSwarm(bLooping, sCreatureTemplate1, sCreatureTemplate2, sCreatureTemplate3, sCreatureTemplate4, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectTemporaryHitpoints(int nHitPoints)
        throws NotInContextException
    {
        return effectTemporaryHitpoints(nHitPoints, null, false);
    }

    public NWEffect
    effectTemporaryHitpoints(int nHitPoints, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectTemporaryHitpoints(nHitPoints, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectTemporaryHitpoints(int nHitPoints, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectTemporaryHitpoints");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectTemporaryHitpoints(nHitPoints, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectTimeStop()
        throws NotInContextException
    {
        return effectTimeStop(null, false);
    }

    public NWEffect
    effectTimeStop(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectTimeStop(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectTimeStop(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectTimeStop");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectTimeStop(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectTrueSeeing()
        throws NotInContextException
    {
        return effectTrueSeeing(null, false);
    }

    public NWEffect
    effectTrueSeeing(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectTrueSeeing(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectTrueSeeing(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectTrueSeeing");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectTrueSeeing(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectTurnResistanceDecrease(int nHitDice)
        throws NotInContextException
    {
        return effectTurnResistanceDecrease(nHitDice, null, false);
    }

    public NWEffect
    effectTurnResistanceDecrease(int nHitDice, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectTurnResistanceDecrease(nHitDice, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectTurnResistanceDecrease(int nHitDice, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectTurnResistanceDecrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectTurnResistanceDecrease(nHitDice, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectTurnResistanceIncrease(int nHitDice)
        throws NotInContextException
    {
        return effectTurnResistanceIncrease(nHitDice, null, false);
    }

    public NWEffect
    effectTurnResistanceIncrease(int nHitDice, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectTurnResistanceIncrease(nHitDice, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectTurnResistanceIncrease(int nHitDice, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectTurnResistanceIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectTurnResistanceIncrease(nHitDice, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectTurned()
        throws NotInContextException
    {
        return effectTurned(null, false);
    }

    public NWEffect
    effectTurned(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectTurned(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectTurned(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectTurned");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectTurned(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectUltravision()
        throws NotInContextException
    {
        return effectUltravision(null, false);
    }

    public NWEffect
    effectUltravision(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectUltravision(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectUltravision(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectUltravision");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectUltravision(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    effectVisualEffect(int nVisualEffectId, boolean bMissEffect)
        throws NotInContextException
    {
        return effectVisualEffect(nVisualEffectId, bMissEffect, null, false);
    }

    public NWEffect
    effectVisualEffect(int nVisualEffectId, boolean bMissEffect, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return effectVisualEffect(nVisualEffectId, bMissEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    effectVisualEffect(int nVisualEffectId, boolean bMissEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("effectVisualEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.effectVisualEffect(nVisualEffectId, bMissEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    endGame(String sEndMovie)
        throws NotInContextException
    {
        endGame(sEndMovie, null, false);
    }

    public void
    endGame(String sEndMovie, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        endGame(sEndMovie, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    endGame(String sEndMovie, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("endGame");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.endGame(sEndMovie, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    executeScript(String sScript, NWObject oTarget)
        throws NotInContextException
    {
        executeScript(sScript, oTarget, null, false);
    }

    public void
    executeScript(String sScript, NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        executeScript(sScript, oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    executeScript(String sScript, NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("executeScript");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.executeScript(sScript, oTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    exploreAreaForPlayer(NWObject oArea, NWObject oPlayer, boolean bExplored)
        throws NotInContextException
    {
        exploreAreaForPlayer(oArea, oPlayer, bExplored, null, false);
    }

    public void
    exploreAreaForPlayer(NWObject oArea, NWObject oPlayer, boolean bExplored, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        exploreAreaForPlayer(oArea, oPlayer, bExplored, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    exploreAreaForPlayer(NWObject oArea, NWObject oPlayer, boolean bExplored, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("exploreAreaForPlayer");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.exploreAreaForPlayer(oArea, oPlayer, bExplored, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    exportAllCharacters()
        throws NotInContextException
    {
        exportAllCharacters(null, false);
    }

    public void
    exportAllCharacters(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        exportAllCharacters(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    exportAllCharacters(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("exportAllCharacters");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.exportAllCharacters(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    exportSingleCharacter(NWObject oPlayer)
        throws NotInContextException
    {
        exportSingleCharacter(oPlayer, null, false);
    }

    public void
    exportSingleCharacter(NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        exportSingleCharacter(oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    exportSingleCharacter(NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("exportSingleCharacter");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.exportSingleCharacter(oPlayer, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    extraordinaryEffect(NWEffect eEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return extraordinaryEffect(eEffect, null, false);
    }

    public NWEffect
    extraordinaryEffect(NWEffect eEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return extraordinaryEffect(eEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    extraordinaryEffect(NWEffect eEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("extraordinaryEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.extraordinaryEffect(eEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    fadeFromBlack(NWObject oCreature, double fSpeed)
        throws NotInContextException
    {
        fadeFromBlack(oCreature, fSpeed, null, false);
    }

    public void
    fadeFromBlack(NWObject oCreature, double fSpeed, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        fadeFromBlack(oCreature, fSpeed, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    fadeFromBlack(NWObject oCreature, double fSpeed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("fadeFromBlack");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.fadeFromBlack(oCreature, fSpeed, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    fadeToBlack(NWObject oCreature, double fSpeed)
        throws NotInContextException
    {
        fadeToBlack(oCreature, fSpeed, null, false);
    }

    public void
    fadeToBlack(NWObject oCreature, double fSpeed, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        fadeToBlack(oCreature, fSpeed, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    fadeToBlack(NWObject oCreature, double fSpeed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("fadeToBlack");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.fadeToBlack(oCreature, fSpeed, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    floatingTextStrRefOnCreature(int nStrRefToDisplay, NWObject oCreatureToFloatAbove, boolean bBroadcastToFaction)
        throws NotInContextException
    {
        floatingTextStrRefOnCreature(nStrRefToDisplay, oCreatureToFloatAbove, bBroadcastToFaction, null, false);
    }

    public void
    floatingTextStrRefOnCreature(int nStrRefToDisplay, NWObject oCreatureToFloatAbove, boolean bBroadcastToFaction, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        floatingTextStrRefOnCreature(nStrRefToDisplay, oCreatureToFloatAbove, bBroadcastToFaction, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    floatingTextStrRefOnCreature(int nStrRefToDisplay, NWObject oCreatureToFloatAbove, boolean bBroadcastToFaction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("floatingTextStrRefOnCreature");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.floatingTextStrRefOnCreature(nStrRefToDisplay, oCreatureToFloatAbove, bBroadcastToFaction, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    floatingTextStringOnCreature(String sStringToDisplay, NWObject oCreatureToFloatAbove, boolean bBroadcastToFaction)
        throws NotInContextException
    {
        floatingTextStringOnCreature(sStringToDisplay, oCreatureToFloatAbove, bBroadcastToFaction, null, false);
    }

    public void
    floatingTextStringOnCreature(String sStringToDisplay, NWObject oCreatureToFloatAbove, boolean bBroadcastToFaction, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        floatingTextStringOnCreature(sStringToDisplay, oCreatureToFloatAbove, bBroadcastToFaction, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    floatingTextStringOnCreature(String sStringToDisplay, NWObject oCreatureToFloatAbove, boolean bBroadcastToFaction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("floatingTextStringOnCreature");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.floatingTextStringOnCreature(sStringToDisplay, oCreatureToFloatAbove, bBroadcastToFaction, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    forceRest(NWObject oCreature)
        throws NotInContextException
    {
        forceRest(oCreature, null, false);
    }

    public void
    forceRest(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        forceRest(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    forceRest(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("forceRest");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.forceRest(oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SavingThrowResult
    fortitudeSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus)
        throws NotInContextException
    {
        return fortitudeSave(oCreature, nDC, tSaveType, oSaveVersus, null, false);
    }

    public SavingThrowResult
    fortitudeSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return fortitudeSave(oCreature, nDC, tSaveType, oSaveVersus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SavingThrowResult
    fortitudeSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("fortitudeSave");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.fortitudeSave(oCreature, nDC, tSaveType, oSaveVersus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    get2DAString(String s2DA, String sColumn, int nRow)
        throws NotInContextException
    {
        return get2DAString(s2DA, sColumn, nRow, null, false);
    }

    public String
    get2DAString(String s2DA, String sColumn, int nRow, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return get2DAString(s2DA, sColumn, nRow, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    get2DAString(String s2DA, String sColumn, int nRow, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("get2DAString");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.get2DAString(s2DA, sColumn, nRow, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getAC(NWObject oObject)
        throws NotInContextException
    {
        return getAC(oObject, null, false);
    }

    public int
    getAC(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAC(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getAC(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAC(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public AILevel
    getAILevel(NWObject oTarget)
        throws NotInContextException
    {
        return getAILevel(oTarget, null, false);
    }

    public AILevel
    getAILevel(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAILevel(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private AILevel
    getAILevel(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAILevel");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAILevel(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getAbilityModifier(Ability tAbility, NWObject oCreature)
        throws NotInContextException
    {
        return getAbilityModifier(tAbility, oCreature, null, false);
    }

    public int
    getAbilityModifier(Ability tAbility, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAbilityModifier(tAbility, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getAbilityModifier(Ability tAbility, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAbilityModifier");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAbilityModifier(tAbility, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getAbilityScore(NWObject oCreature, Ability tAbility, boolean bBaseAbilityScore)
        throws NotInContextException
    {
        return getAbilityScore(oCreature, tAbility, bBaseAbilityScore, null, false);
    }

    public int
    getAbilityScore(NWObject oCreature, Ability tAbility, boolean bBaseAbilityScore, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAbilityScore(oCreature, tAbility, bBaseAbilityScore, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getAbilityScore(NWObject oCreature, Ability tAbility, boolean bBaseAbilityScore, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAbilityScore");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAbilityScore(oCreature, tAbility, bBaseAbilityScore, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getActionMode(NWObject oCreature, ActionMode tActionMode)
        throws NotInContextException
    {
        return getActionMode(oCreature, tActionMode, null, false);
    }

    public boolean
    getActionMode(NWObject oCreature, ActionMode tActionMode, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getActionMode(oCreature, tActionMode, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getActionMode(NWObject oCreature, ActionMode tActionMode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getActionMode");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getActionMode(oCreature, tActionMode, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getAge(NWObject oCreature)
        throws NotInContextException
    {
        return getAge(oCreature, null, false);
    }

    public int
    getAge(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAge(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getAge(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAge");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAge(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public Alignment
    getAlignmentGoodEvil(NWObject oCreature)
        throws NotInContextException
    {
        return getAlignmentGoodEvil(oCreature, null, false);
    }

    public Alignment
    getAlignmentGoodEvil(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAlignmentGoodEvil(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private Alignment
    getAlignmentGoodEvil(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAlignmentGoodEvil");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAlignmentGoodEvil(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public Alignment
    getAlignmentLawChaos(NWObject oCreature)
        throws NotInContextException
    {
        return getAlignmentLawChaos(oCreature, null, false);
    }

    public Alignment
    getAlignmentLawChaos(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAlignmentLawChaos(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private Alignment
    getAlignmentLawChaos(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAlignmentLawChaos");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAlignmentLawChaos(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getAnimalCompanionCreatureType(NWObject oCreature)
        throws NotInContextException
    {
        return getAnimalCompanionCreatureType(oCreature, null, false);
    }

    public int
    getAnimalCompanionCreatureType(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAnimalCompanionCreatureType(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getAnimalCompanionCreatureType(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAnimalCompanionCreatureType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAnimalCompanionCreatureType(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getAnimalCompanionName(NWObject oTarget)
        throws NotInContextException
    {
        return getAnimalCompanionName(oTarget, null, false);
    }

    public String
    getAnimalCompanionName(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAnimalCompanionName(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getAnimalCompanionName(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAnimalCompanionName");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAnimalCompanionName(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getAppearanceType(NWObject oCreature)
        throws NotInContextException
    {
        return getAppearanceType(oCreature, null, false);
    }

    public int
    getAppearanceType(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAppearanceType(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getAppearanceType(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAppearanceType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAppearanceType(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getArcaneSpellFailure(NWObject oCreature)
        throws NotInContextException
    {
        return getArcaneSpellFailure(oCreature, null, false);
    }

    public int
    getArcaneSpellFailure(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getArcaneSpellFailure(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getArcaneSpellFailure(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getArcaneSpellFailure");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getArcaneSpellFailure(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getArea(NWObject oTarget)
        throws NotInContextException
    {
        return getArea(oTarget, null, false);
    }

    public NWObject
    getArea(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getArea(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getArea(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getArea");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getArea(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getAreaOfEffectCreator(NWObject oAreaOfEffectObject)
        throws NotInContextException
    {
        return getAreaOfEffectCreator(oAreaOfEffectObject, null, false);
    }

    public NWObject
    getAreaOfEffectCreator(NWObject oAreaOfEffectObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAreaOfEffectCreator(oAreaOfEffectObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getAreaOfEffectCreator(NWObject oAreaOfEffectObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAreaOfEffectCreator");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAreaOfEffectCreator(oAreaOfEffectObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getAreaSize(int nAreaDimension, NWObject oArea)
        throws NotInContextException
    {
        return getAreaSize(nAreaDimension, oArea, null, false);
    }

    public int
    getAreaSize(int nAreaDimension, NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAreaSize(nAreaDimension, oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getAreaSize(int nAreaDimension, NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAreaSize");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAreaSize(nAreaDimension, oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getAssociate(AssociateType tAssociateType, NWObject oMaster, int nTh)
        throws NotInContextException
    {
        return getAssociate(tAssociateType, oMaster, nTh, null, false);
    }

    public NWObject
    getAssociate(AssociateType tAssociateType, NWObject oMaster, int nTh, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAssociate(tAssociateType, oMaster, nTh, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getAssociate(AssociateType tAssociateType, NWObject oMaster, int nTh, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAssociate");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAssociate(tAssociateType, oMaster, nTh, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public AssociateType
    getAssociateType(NWObject oAssociate)
        throws NotInContextException
    {
        return getAssociateType(oAssociate, null, false);
    }

    public AssociateType
    getAssociateType(NWObject oAssociate, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAssociateType(oAssociate, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private AssociateType
    getAssociateType(NWObject oAssociate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAssociateType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAssociateType(oAssociate, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getAttackTarget(NWObject oCreature)
        throws NotInContextException
    {
        return getAttackTarget(oCreature, null, false);
    }

    public NWObject
    getAttackTarget(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAttackTarget(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getAttackTarget(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAttackTarget");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAttackTarget(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getAttemptedAttackTarget()
        throws NotInContextException
    {
        return getAttemptedAttackTarget(null, false);
    }

    public NWObject
    getAttemptedAttackTarget(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAttemptedAttackTarget(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getAttemptedAttackTarget(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAttemptedAttackTarget");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAttemptedAttackTarget(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getAttemptedSpellTarget()
        throws NotInContextException
    {
        return getAttemptedSpellTarget(null, false);
    }

    public NWObject
    getAttemptedSpellTarget(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getAttemptedSpellTarget(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getAttemptedSpellTarget(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAttemptedSpellTarget");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getAttemptedSpellTarget(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getBaseAttackBonus(NWObject oCreature)
        throws NotInContextException
    {
        return getBaseAttackBonus(oCreature, null, false);
    }

    public int
    getBaseAttackBonus(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getBaseAttackBonus(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getBaseAttackBonus(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getBaseAttackBonus");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getBaseAttackBonus(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getBaseItemType(NWObject oItem)
        throws NotInContextException
    {
        return getBaseItemType(oItem, null, false);
    }

    public int
    getBaseItemType(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getBaseItemType(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getBaseItemType(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getBaseItemType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getBaseItemType(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getBlockingDoor()
        throws NotInContextException
    {
        return getBlockingDoor(null, false);
    }

    public NWObject
    getBlockingDoor(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getBlockingDoor(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getBlockingDoor(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getBlockingDoor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getBlockingDoor(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getCalendarDay()
        throws NotInContextException
    {
        return getCalendarDay(null, false);
    }

    public int
    getCalendarDay(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCalendarDay(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getCalendarDay(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCalendarDay");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCalendarDay(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getCalendarMonth()
        throws NotInContextException
    {
        return getCalendarMonth(null, false);
    }

    public int
    getCalendarMonth(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCalendarMonth(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getCalendarMonth(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCalendarMonth");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCalendarMonth(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getCalendarYear()
        throws NotInContextException
    {
        return getCalendarYear(null, false);
    }

    public int
    getCalendarYear(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCalendarYear(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getCalendarYear(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCalendarYear");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCalendarYear(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getCampaignFloat(String sCampaignName, String sVarName, NWObject oPlayer)
        throws NotInContextException
    {
        return getCampaignFloat(sCampaignName, sVarName, oPlayer, null, false);
    }

    public double
    getCampaignFloat(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCampaignFloat(sCampaignName, sVarName, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getCampaignFloat(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCampaignFloat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCampaignFloat(sCampaignName, sVarName, oPlayer, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getCampaignInt(String sCampaignName, String sVarName, NWObject oPlayer)
        throws NotInContextException
    {
        return getCampaignInt(sCampaignName, sVarName, oPlayer, null, false);
    }

    public int
    getCampaignInt(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCampaignInt(sCampaignName, sVarName, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getCampaignInt(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCampaignInt");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCampaignInt(sCampaignName, sVarName, oPlayer, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWLocation
    getCampaignLocation(String sCampaignName, String sVarName, NWObject oPlayer)
        throws NotInContextException
    {
        return getCampaignLocation(sCampaignName, sVarName, oPlayer, null, false);
    }

    public NWLocation
    getCampaignLocation(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCampaignLocation(sCampaignName, sVarName, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWLocation
    getCampaignLocation(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCampaignLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCampaignLocation(sCampaignName, sVarName, oPlayer, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getCampaignString(String sCampaignName, String sVarName, NWObject oPlayer)
        throws NotInContextException
    {
        return getCampaignString(sCampaignName, sVarName, oPlayer, null, false);
    }

    public String
    getCampaignString(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCampaignString(sCampaignName, sVarName, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getCampaignString(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCampaignString");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCampaignString(sCampaignName, sVarName, oPlayer, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWVector
    getCampaignVector(String sCampaignName, String sVarName, NWObject oPlayer)
        throws NotInContextException
    {
        return getCampaignVector(sCampaignName, sVarName, oPlayer, null, false);
    }

    public NWVector
    getCampaignVector(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCampaignVector(sCampaignName, sVarName, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWVector
    getCampaignVector(String sCampaignName, String sVarName, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCampaignVector");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCampaignVector(sCampaignName, sVarName, oPlayer, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getCasterLevel(NWObject oCreature)
        throws NotInContextException
    {
        return getCasterLevel(oCreature, null, false);
    }

    public int
    getCasterLevel(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCasterLevel(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getCasterLevel(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCasterLevel");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCasterLevel(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getChallengeRating(NWObject oCreature)
        throws NotInContextException
    {
        return getChallengeRating(oCreature, null, false);
    }

    public double
    getChallengeRating(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getChallengeRating(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getChallengeRating(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getChallengeRating");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getChallengeRating(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getClassByPosition(int nClassPosition, NWObject oCreature)
        throws NotInContextException
    {
        return getClassByPosition(nClassPosition, oCreature, null, false);
    }

    public int
    getClassByPosition(int nClassPosition, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getClassByPosition(nClassPosition, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getClassByPosition(int nClassPosition, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getClassByPosition");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getClassByPosition(nClassPosition, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getClickingObject()
        throws NotInContextException
    {
        return getClickingObject(null, false);
    }

    public NWObject
    getClickingObject(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getClickingObject(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getClickingObject(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getClickingObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getClickingObject(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getColor(NWObject oObject, int nColorChannel)
        throws NotInContextException
    {
        return getColor(oObject, nColorChannel, null, false);
    }

    public int
    getColor(NWObject oObject, int nColorChannel, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getColor(oObject, nColorChannel, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getColor(NWObject oObject, int nColorChannel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getColor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getColor(oObject, nColorChannel, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getCommandable(NWObject oTarget)
        throws NotInContextException
    {
        return getCommandable(oTarget, null, false);
    }

    public boolean
    getCommandable(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCommandable(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getCommandable(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCommandable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCommandable(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getCreatureBodyPart(CreaturePart tCreaturePart, NWObject oCreature)
        throws NotInContextException
    {
        return getCreatureBodyPart(tCreaturePart, oCreature, null, false);
    }

    public int
    getCreatureBodyPart(CreaturePart tCreaturePart, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCreatureBodyPart(tCreaturePart, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getCreatureBodyPart(CreaturePart tCreaturePart, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCreatureBodyPart");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCreatureBodyPart(tCreaturePart, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public CreatureSize
    getCreatureSize(NWObject oCreature)
        throws NotInContextException
    {
        return getCreatureSize(oCreature, null, false);
    }

    public CreatureSize
    getCreatureSize(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCreatureSize(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private CreatureSize
    getCreatureSize(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCreatureSize");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCreatureSize(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getCreatureStartingPackage(NWObject oCreature)
        throws NotInContextException
    {
        return getCreatureStartingPackage(oCreature, null, false);
    }

    public int
    getCreatureStartingPackage(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCreatureStartingPackage(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getCreatureStartingPackage(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCreatureStartingPackage");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCreatureStartingPackage(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getCreatureTailType(NWObject oCreature)
        throws NotInContextException
    {
        return getCreatureTailType(oCreature, null, false);
    }

    public int
    getCreatureTailType(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCreatureTailType(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getCreatureTailType(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCreatureTailType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCreatureTailType(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getCreatureWingType(NWObject oCreature)
        throws NotInContextException
    {
        return getCreatureWingType(oCreature, null, false);
    }

    public int
    getCreatureWingType(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCreatureWingType(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getCreatureWingType(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCreatureWingType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCreatureWingType(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public Action
    getCurrentAction(NWObject oObject)
        throws NotInContextException
    {
        return getCurrentAction(oObject, null, false);
    }

    public Action
    getCurrentAction(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCurrentAction(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private Action
    getCurrentAction(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCurrentAction");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCurrentAction(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getCurrentHitPoints(NWObject oObject)
        throws NotInContextException
    {
        return getCurrentHitPoints(oObject, null, false);
    }

    public int
    getCurrentHitPoints(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCurrentHitPoints(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getCurrentHitPoints(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCurrentHitPoints");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCurrentHitPoints(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getCutsceneCameraMoveRate(NWObject oCreature)
        throws NotInContextException
    {
        return getCutsceneCameraMoveRate(oCreature, null, false);
    }

    public double
    getCutsceneCameraMoveRate(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCutsceneCameraMoveRate(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getCutsceneCameraMoveRate(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCutsceneCameraMoveRate");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCutsceneCameraMoveRate(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getCutsceneMode(NWObject oCreature)
        throws NotInContextException
    {
        return getCutsceneMode(oCreature, null, false);
    }

    public boolean
    getCutsceneMode(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getCutsceneMode(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getCutsceneMode(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCutsceneMode");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getCutsceneMode(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getDamageDealtByType(DamageType tDamageType)
        throws NotInContextException
    {
        return getDamageDealtByType(tDamageType, null, false);
    }

    public int
    getDamageDealtByType(DamageType tDamageType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getDamageDealtByType(tDamageType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getDamageDealtByType(DamageType tDamageType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDamageDealtByType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getDamageDealtByType(tDamageType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getDefensiveCastingMode(NWObject oCreature)
        throws NotInContextException
    {
        return getDefensiveCastingMode(oCreature, null, false);
    }

    public int
    getDefensiveCastingMode(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getDefensiveCastingMode(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getDefensiveCastingMode(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDefensiveCastingMode");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getDefensiveCastingMode(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getDeity(NWObject oCreature)
        throws NotInContextException
    {
        return getDeity(oCreature, null, false);
    }

    public String
    getDeity(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getDeity(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getDeity(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDeity");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getDeity(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getDescription(NWObject oObject, boolean bOriginalDescription, boolean bIdentifiedDescription)
        throws NotInContextException
    {
        return getDescription(oObject, bOriginalDescription, bIdentifiedDescription, null, false);
    }

    public String
    getDescription(NWObject oObject, boolean bOriginalDescription, boolean bIdentifiedDescription, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getDescription(oObject, bOriginalDescription, bIdentifiedDescription, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getDescription(NWObject oObject, boolean bOriginalDescription, boolean bIdentifiedDescription, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDescription");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getDescription(oObject, bOriginalDescription, bIdentifiedDescription, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getDetectMode(NWObject oCreature)
        throws NotInContextException
    {
        return getDetectMode(oCreature, null, false);
    }

    public int
    getDetectMode(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getDetectMode(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getDetectMode(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDetectMode");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getDetectMode(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getDialogSoundLength(int nStrRef)
        throws NotInContextException
    {
        return getDialogSoundLength(nStrRef, null, false);
    }

    public double
    getDialogSoundLength(int nStrRef, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getDialogSoundLength(nStrRef, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getDialogSoundLength(int nStrRef, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDialogSoundLength");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getDialogSoundLength(nStrRef, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getDistanceBetween(NWObject oObjectA, NWObject oObjectB)
        throws NotInContextException
    {
        return getDistanceBetween(oObjectA, oObjectB, null, false);
    }

    public double
    getDistanceBetween(NWObject oObjectA, NWObject oObjectB, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getDistanceBetween(oObjectA, oObjectB, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getDistanceBetween(NWObject oObjectA, NWObject oObjectB, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDistanceBetween");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getDistanceBetween(oObjectA, oObjectB, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getDistanceBetweenLocations(NWLocation lLocationA, NWLocation lLocationB)
        throws NotInContextException
    {
        return getDistanceBetweenLocations(lLocationA, lLocationB, null, false);
    }

    public double
    getDistanceBetweenLocations(NWLocation lLocationA, NWLocation lLocationB, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getDistanceBetweenLocations(lLocationA, lLocationB, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getDistanceBetweenLocations(NWLocation lLocationA, NWLocation lLocationB, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDistanceBetweenLocations");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getDistanceBetweenLocations(lLocationA, lLocationB, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getDistanceToObject(NWObject oObject)
        throws NotInContextException
    {
        return getDistanceToObject(oObject, null, false);
    }

    public double
    getDistanceToObject(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getDistanceToObject(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getDistanceToObject(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDistanceToObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getDistanceToObject(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getDroppableFlag(NWObject oItem)
        throws NotInContextException
    {
        return getDroppableFlag(oItem, null, false);
    }

    public boolean
    getDroppableFlag(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getDroppableFlag(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getDroppableFlag(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDroppableFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getDroppableFlag(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getEffectCreator(NWEffect eEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectCreator(eEffect, null, false);
    }

    public NWObject
    getEffectCreator(NWEffect eEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectCreator(eEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getEffectCreator(NWEffect eEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEffectCreator");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEffectCreator(eEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getEffectDuration(NWEffect e)
        throws InvalidEffectException
    {
        return getEffectDuration(e, null, false);
    }

    public double
    getEffectDuration(NWEffect e, java.util.Map<String, String> __ctx)
        throws InvalidEffectException
    {
        return getEffectDuration(e, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getEffectDuration(NWEffect e, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEffectDuration");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEffectDuration(e, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DurationType
    getEffectDurationType(NWEffect eEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectDurationType(eEffect, null, false);
    }

    public DurationType
    getEffectDurationType(NWEffect eEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectDurationType(eEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DurationType
    getEffectDurationType(NWEffect eEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEffectDurationType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEffectDurationType(eEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getEffectExposed(NWEffect eff)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectExposed(eff, null, false);
    }

    public boolean
    getEffectExposed(NWEffect eff, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectExposed(eff, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getEffectExposed(NWEffect eff, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEffectExposed");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEffectExposed(eff, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getEffectIconShown(NWEffect eff)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectIconShown(eff, null, false);
    }

    public boolean
    getEffectIconShown(NWEffect eff, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectIconShown(eff, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getEffectIconShown(NWEffect eff, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEffectIconShown");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEffectIconShown(eff, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getEffectInteger(NWEffect e, int index)
        throws InvalidArgumentException,
               InvalidEffectException
    {
        return getEffectInteger(e, index, null, false);
    }

    public int
    getEffectInteger(NWEffect e, int index, java.util.Map<String, String> __ctx)
        throws InvalidArgumentException,
               InvalidEffectException
    {
        return getEffectInteger(e, index, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getEffectInteger(NWEffect e, int index, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidArgumentException,
               InvalidEffectException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEffectInteger");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEffectInteger(e, index, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getEffectSpellId(NWEffect eSpellEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectSpellId(eSpellEffect, null, false);
    }

    public int
    getEffectSpellId(NWEffect eSpellEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectSpellId(eSpellEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getEffectSpellId(NWEffect eSpellEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEffectSpellId");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEffectSpellId(eSpellEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public EffectSubType
    getEffectSubType(NWEffect eEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectSubType(eEffect, null, false);
    }

    public EffectSubType
    getEffectSubType(NWEffect eEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectSubType(eEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private EffectSubType
    getEffectSubType(NWEffect eEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEffectSubType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEffectSubType(eEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public EffectType
    getEffectType(NWEffect eEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectType(eEffect, null, false);
    }

    public EffectType
    getEffectType(NWEffect eEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return getEffectType(eEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private EffectType
    getEffectType(NWEffect eEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEffectType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEffectType(eEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getEncounterActive(NWObject oEncounter)
        throws NotInContextException
    {
        return getEncounterActive(oEncounter, null, false);
    }

    public int
    getEncounterActive(NWObject oEncounter, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getEncounterActive(oEncounter, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getEncounterActive(NWObject oEncounter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEncounterActive");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEncounterActive(oEncounter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getEncounterDifficulty(NWObject oEncounter)
        throws NotInContextException
    {
        return getEncounterDifficulty(oEncounter, null, false);
    }

    public int
    getEncounterDifficulty(NWObject oEncounter, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getEncounterDifficulty(oEncounter, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getEncounterDifficulty(NWObject oEncounter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEncounterDifficulty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEncounterDifficulty(oEncounter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getEncounterSpawnsCurrent(NWObject oEncounter)
        throws NotInContextException
    {
        return getEncounterSpawnsCurrent(oEncounter, null, false);
    }

    public int
    getEncounterSpawnsCurrent(NWObject oEncounter, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getEncounterSpawnsCurrent(oEncounter, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getEncounterSpawnsCurrent(NWObject oEncounter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEncounterSpawnsCurrent");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEncounterSpawnsCurrent(oEncounter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getEncounterSpawnsMax(NWObject oEncounter)
        throws NotInContextException
    {
        return getEncounterSpawnsMax(oEncounter, null, false);
    }

    public int
    getEncounterSpawnsMax(NWObject oEncounter, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getEncounterSpawnsMax(oEncounter, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getEncounterSpawnsMax(NWObject oEncounter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEncounterSpawnsMax");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEncounterSpawnsMax(oEncounter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getEnteringObject()
        throws NotInContextException
    {
        return getEnteringObject(null, false);
    }

    public NWObject
    getEnteringObject(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getEnteringObject(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getEnteringObject(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEnteringObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getEnteringObject(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getExitingObject()
        throws NotInContextException
    {
        return getExitingObject(null, false);
    }

    public NWObject
    getExitingObject(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getExitingObject(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getExitingObject(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExitingObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getExitingObject(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getFacing(NWObject oTarget)
        throws NotInContextException
    {
        return getFacing(oTarget, null, false);
    }

    public double
    getFacing(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFacing(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getFacing(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFacing");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFacing(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFactionAverageGoodEvilAlignment(NWObject oFactionMember)
        throws NotInContextException
    {
        return getFactionAverageGoodEvilAlignment(oFactionMember, null, false);
    }

    public int
    getFactionAverageGoodEvilAlignment(NWObject oFactionMember, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionAverageGoodEvilAlignment(oFactionMember, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFactionAverageGoodEvilAlignment(NWObject oFactionMember, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionAverageGoodEvilAlignment");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionAverageGoodEvilAlignment(oFactionMember, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFactionAverageLawChaosAlignment(NWObject oFactionMember)
        throws NotInContextException
    {
        return getFactionAverageLawChaosAlignment(oFactionMember, null, false);
    }

    public int
    getFactionAverageLawChaosAlignment(NWObject oFactionMember, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionAverageLawChaosAlignment(oFactionMember, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFactionAverageLawChaosAlignment(NWObject oFactionMember, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionAverageLawChaosAlignment");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionAverageLawChaosAlignment(oFactionMember, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFactionAverageLevel(NWObject oFactionMember)
        throws NotInContextException
    {
        return getFactionAverageLevel(oFactionMember, null, false);
    }

    public int
    getFactionAverageLevel(NWObject oFactionMember, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionAverageLevel(oFactionMember, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFactionAverageLevel(NWObject oFactionMember, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionAverageLevel");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionAverageLevel(oFactionMember, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFactionAverageReputation(NWObject oSourceFactionMember, NWObject oTarget)
        throws NotInContextException
    {
        return getFactionAverageReputation(oSourceFactionMember, oTarget, null, false);
    }

    public int
    getFactionAverageReputation(NWObject oSourceFactionMember, NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionAverageReputation(oSourceFactionMember, oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFactionAverageReputation(NWObject oSourceFactionMember, NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionAverageReputation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionAverageReputation(oSourceFactionMember, oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFactionAverageXP(NWObject oFactionMember)
        throws NotInContextException
    {
        return getFactionAverageXP(oFactionMember, null, false);
    }

    public int
    getFactionAverageXP(NWObject oFactionMember, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionAverageXP(oFactionMember, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFactionAverageXP(NWObject oFactionMember, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionAverageXP");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionAverageXP(oFactionMember, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getFactionBestAC(NWObject oFactionMember, boolean bMustBeVisible)
        throws NotInContextException
    {
        return getFactionBestAC(oFactionMember, bMustBeVisible, null, false);
    }

    public NWObject
    getFactionBestAC(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionBestAC(oFactionMember, bMustBeVisible, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getFactionBestAC(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionBestAC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionBestAC(oFactionMember, bMustBeVisible, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getFactionEqual(NWObject oFirstObject, NWObject oSecondObject)
        throws NotInContextException
    {
        return getFactionEqual(oFirstObject, oSecondObject, null, false);
    }

    public boolean
    getFactionEqual(NWObject oFirstObject, NWObject oSecondObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionEqual(oFirstObject, oSecondObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getFactionEqual(NWObject oFirstObject, NWObject oSecondObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionEqual");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionEqual(oFirstObject, oSecondObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFactionGold(NWObject oFactionMember)
        throws NotInContextException
    {
        return getFactionGold(oFactionMember, null, false);
    }

    public int
    getFactionGold(NWObject oFactionMember, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionGold(oFactionMember, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFactionGold(NWObject oFactionMember, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionGold");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionGold(oFactionMember, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getFactionLeader(NWObject oMemberOfFaction)
        throws NotInContextException
    {
        return getFactionLeader(oMemberOfFaction, null, false);
    }

    public NWObject
    getFactionLeader(NWObject oMemberOfFaction, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionLeader(oMemberOfFaction, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getFactionLeader(NWObject oMemberOfFaction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionLeader");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionLeader(oMemberOfFaction, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getFactionLeastDamagedMember(NWObject oFactionMember, boolean bMustBeVisible)
        throws NotInContextException
    {
        return getFactionLeastDamagedMember(oFactionMember, bMustBeVisible, null, false);
    }

    public NWObject
    getFactionLeastDamagedMember(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionLeastDamagedMember(oFactionMember, bMustBeVisible, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getFactionLeastDamagedMember(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionLeastDamagedMember");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionLeastDamagedMember(oFactionMember, bMustBeVisible, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getFactionMostDamagedMember(NWObject oFactionMember, boolean bMustBeVisible)
        throws NotInContextException
    {
        return getFactionMostDamagedMember(oFactionMember, bMustBeVisible, null, false);
    }

    public NWObject
    getFactionMostDamagedMember(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionMostDamagedMember(oFactionMember, bMustBeVisible, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getFactionMostDamagedMember(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionMostDamagedMember");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionMostDamagedMember(oFactionMember, bMustBeVisible, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFactionMostFrequentClass(NWObject oFactionMember)
        throws NotInContextException
    {
        return getFactionMostFrequentClass(oFactionMember, null, false);
    }

    public int
    getFactionMostFrequentClass(NWObject oFactionMember, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionMostFrequentClass(oFactionMember, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFactionMostFrequentClass(NWObject oFactionMember, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionMostFrequentClass");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionMostFrequentClass(oFactionMember, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getFactionStrongestMember(NWObject oFactionMember, boolean bMustBeVisible)
        throws NotInContextException
    {
        return getFactionStrongestMember(oFactionMember, bMustBeVisible, null, false);
    }

    public NWObject
    getFactionStrongestMember(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionStrongestMember(oFactionMember, bMustBeVisible, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getFactionStrongestMember(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionStrongestMember");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionStrongestMember(oFactionMember, bMustBeVisible, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getFactionWeakestMember(NWObject oFactionMember, boolean bMustBeVisible)
        throws NotInContextException
    {
        return getFactionWeakestMember(oFactionMember, bMustBeVisible, null, false);
    }

    public NWObject
    getFactionWeakestMember(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionWeakestMember(oFactionMember, bMustBeVisible, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getFactionWeakestMember(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionWeakestMember");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionWeakestMember(oFactionMember, bMustBeVisible, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getFactionWorstAC(NWObject oFactionMember, boolean bMustBeVisible)
        throws NotInContextException
    {
        return getFactionWorstAC(oFactionMember, bMustBeVisible, null, false);
    }

    public NWObject
    getFactionWorstAC(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFactionWorstAC(oFactionMember, bMustBeVisible, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getFactionWorstAC(NWObject oFactionMember, boolean bMustBeVisible, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFactionWorstAC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFactionWorstAC(oFactionMember, bMustBeVisible, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFamiliarCreatureType(NWObject oCreature)
        throws NotInContextException
    {
        return getFamiliarCreatureType(oCreature, null, false);
    }

    public int
    getFamiliarCreatureType(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFamiliarCreatureType(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFamiliarCreatureType(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFamiliarCreatureType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFamiliarCreatureType(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getFamiliarName(NWObject oCreature)
        throws NotInContextException
    {
        return getFamiliarName(oCreature, null, false);
    }

    public String
    getFamiliarName(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFamiliarName(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getFamiliarName(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFamiliarName");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFamiliarName(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFogAmount(int nFogType, NWObject oArea)
        throws NotInContextException
    {
        return getFogAmount(nFogType, oArea, null, false);
    }

    public int
    getFogAmount(int nFogType, NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFogAmount(nFogType, oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFogAmount(int nFogType, NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFogAmount");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFogAmount(nFogType, oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFogColor(int nFogType, NWObject oArea)
        throws NotInContextException
    {
        return getFogColor(nFogType, oArea, null, false);
    }

    public int
    getFogColor(int nFogType, NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFogColor(nFogType, oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFogColor(int nFogType, NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFogColor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFogColor(nFogType, oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFootstepType(NWObject oCreature)
        throws NotInContextException
    {
        return getFootstepType(oCreature, null, false);
    }

    public int
    getFootstepType(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFootstepType(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFootstepType(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFootstepType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFootstepType(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getFortitudeSavingThrow(NWObject oTarget)
        throws NotInContextException
    {
        return getFortitudeSavingThrow(oTarget, null, false);
    }

    public int
    getFortitudeSavingThrow(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getFortitudeSavingThrow(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getFortitudeSavingThrow(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFortitudeSavingThrow");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getFortitudeSavingThrow(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getGameDifficulty()
        throws NotInContextException
    {
        return getGameDifficulty(null, false);
    }

    public int
    getGameDifficulty(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getGameDifficulty(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getGameDifficulty(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getGameDifficulty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getGameDifficulty(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public Gender
    getGender(NWObject oCreature)
        throws NotInContextException
    {
        return getGender(oCreature, null, false);
    }

    public Gender
    getGender(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getGender(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private Gender
    getGender(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getGender");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getGender(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getGoingToBeAttackedBy(NWObject oTarget)
        throws NotInContextException
    {
        return getGoingToBeAttackedBy(oTarget, null, false);
    }

    public NWObject
    getGoingToBeAttackedBy(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getGoingToBeAttackedBy(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getGoingToBeAttackedBy(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getGoingToBeAttackedBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getGoingToBeAttackedBy(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getGold(NWObject oTarget)
        throws NotInContextException
    {
        return getGold(oTarget, null, false);
    }

    public int
    getGold(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getGold(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getGold(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getGold");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getGold(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getGoldPieceValue(NWObject oItem)
        throws NotInContextException
    {
        return getGoldPieceValue(oItem, null, false);
    }

    public int
    getGoldPieceValue(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getGoldPieceValue(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getGoldPieceValue(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getGoldPieceValue");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getGoldPieceValue(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getGoodEvilValue(NWObject oCreature)
        throws NotInContextException
    {
        return getGoodEvilValue(oCreature, null, false);
    }

    public int
    getGoodEvilValue(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getGoodEvilValue(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getGoodEvilValue(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getGoodEvilValue");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getGoodEvilValue(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getHardness(NWObject oObject)
        throws NotInContextException
    {
        return getHardness(oObject, null, false);
    }

    public int
    getHardness(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getHardness(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getHardness(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getHardness");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getHardness(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getHasFeat(int nFeat, NWObject oCreature)
        throws NotInContextException
    {
        return getHasFeat(nFeat, oCreature, null, false);
    }

    public boolean
    getHasFeat(int nFeat, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getHasFeat(nFeat, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getHasFeat(int nFeat, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getHasFeat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getHasFeat(nFeat, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getHasFeatEffect(int nFeat, NWObject oObject)
        throws NotInContextException
    {
        return getHasFeatEffect(nFeat, oObject, null, false);
    }

    public boolean
    getHasFeatEffect(int nFeat, NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getHasFeatEffect(nFeat, oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getHasFeatEffect(int nFeat, NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getHasFeatEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getHasFeatEffect(nFeat, oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getHasInventory(NWObject oObject)
        throws NotInContextException
    {
        return getHasInventory(oObject, null, false);
    }

    public boolean
    getHasInventory(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getHasInventory(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getHasInventory(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getHasInventory");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getHasInventory(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getHasSkill(int nSkill, NWObject oCreature)
        throws NotInContextException
    {
        return getHasSkill(nSkill, oCreature, null, false);
    }

    public boolean
    getHasSkill(int nSkill, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getHasSkill(nSkill, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getHasSkill(int nSkill, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getHasSkill");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getHasSkill(nSkill, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getHasSpell(int nSpell, NWObject oCreature)
        throws NotInContextException
    {
        return getHasSpell(nSpell, oCreature, null, false);
    }

    public boolean
    getHasSpell(int nSpell, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getHasSpell(nSpell, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getHasSpell(int nSpell, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getHasSpell");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getHasSpell(nSpell, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getHasSpellEffect(int nSpell, NWObject oObject)
        throws NotInContextException
    {
        return getHasSpellEffect(nSpell, oObject, null, false);
    }

    public boolean
    getHasSpellEffect(int nSpell, NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getHasSpellEffect(nSpell, oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getHasSpellEffect(int nSpell, NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getHasSpellEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getHasSpellEffect(nSpell, oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getHenchman(NWObject oMaster, int nNth)
        throws NotInContextException
    {
        return getHenchman(oMaster, nNth, null, false);
    }

    public NWObject
    getHenchman(NWObject oMaster, int nNth, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getHenchman(oMaster, nNth, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getHenchman(NWObject oMaster, int nNth, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getHenchman");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getHenchman(oMaster, nNth, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getHitDice(NWObject oCreature)
        throws NotInContextException
    {
        return getHitDice(oCreature, null, false);
    }

    public int
    getHitDice(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getHitDice(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getHitDice(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getHitDice");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getHitDice(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIdentified(NWObject oItem)
        throws NotInContextException
    {
        return getIdentified(oItem, null, false);
    }

    public boolean
    getIdentified(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIdentified(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIdentified(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIdentified");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIdentified(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getImmortal(NWObject oTarget)
        throws NotInContextException
    {
        return getImmortal(oTarget, null, false);
    }

    public boolean
    getImmortal(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getImmortal(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getImmortal(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getImmortal");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getImmortal(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getInfiniteFlag(NWObject oItem)
        throws NotInContextException
    {
        return getInfiniteFlag(oItem, null, false);
    }

    public boolean
    getInfiniteFlag(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getInfiniteFlag(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getInfiniteFlag(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getInfiniteFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getInfiniteFlag(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getInventoryDisturbItem()
        throws NotInContextException
    {
        return getInventoryDisturbItem(null, false);
    }

    public NWObject
    getInventoryDisturbItem(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getInventoryDisturbItem(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getInventoryDisturbItem(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getInventoryDisturbItem");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getInventoryDisturbItem(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getInventoryDisturbType()
        throws NotInContextException
    {
        return getInventoryDisturbType(null, false);
    }

    public int
    getInventoryDisturbType(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getInventoryDisturbType(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getInventoryDisturbType(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getInventoryDisturbType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getInventoryDisturbType(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsAreaAboveGround(NWObject oArea)
        throws NotInContextException
    {
        return getIsAreaAboveGround(oArea, null, false);
    }

    public boolean
    getIsAreaAboveGround(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsAreaAboveGround(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsAreaAboveGround(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsAreaAboveGround");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsAreaAboveGround(oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsAreaInterior(NWObject oArea)
        throws NotInContextException
    {
        return getIsAreaInterior(oArea, null, false);
    }

    public boolean
    getIsAreaInterior(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsAreaInterior(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsAreaInterior(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsAreaInterior");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsAreaInterior(oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsAreaNatural(NWObject oArea)
        throws NotInContextException
    {
        return getIsAreaNatural(oArea, null, false);
    }

    public boolean
    getIsAreaNatural(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsAreaNatural(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsAreaNatural(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsAreaNatural");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsAreaNatural(oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsCreatureDisarmable(NWObject oCreature)
        throws NotInContextException
    {
        return getIsCreatureDisarmable(oCreature, null, false);
    }

    public boolean
    getIsCreatureDisarmable(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsCreatureDisarmable(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsCreatureDisarmable(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsCreatureDisarmable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsCreatureDisarmable(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsDM(NWObject oCreature)
        throws NotInContextException
    {
        return getIsDM(oCreature, null, false);
    }

    public boolean
    getIsDM(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsDM(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsDM(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsDM");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsDM(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsDMPossessed(NWObject oCreature)
        throws NotInContextException
    {
        return getIsDMPossessed(oCreature, null, false);
    }

    public boolean
    getIsDMPossessed(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsDMPossessed(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsDMPossessed(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsDMPossessed");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsDMPossessed(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsDawn()
        throws NotInContextException
    {
        return getIsDawn(null, false);
    }

    public boolean
    getIsDawn(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsDawn(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsDawn(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsDawn");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsDawn(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsDay()
        throws NotInContextException
    {
        return getIsDay(null, false);
    }

    public boolean
    getIsDay(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsDay(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsDay(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsDay");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsDay(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsDead(NWObject oCreature)
        throws NotInContextException
    {
        return getIsDead(oCreature, null, false);
    }

    public boolean
    getIsDead(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsDead(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsDead(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsDead");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsDead(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsDoorActionPossible(NWObject oTargetDoor, DoorAction tDoorAction)
        throws NotInContextException
    {
        return getIsDoorActionPossible(oTargetDoor, tDoorAction, null, false);
    }

    public boolean
    getIsDoorActionPossible(NWObject oTargetDoor, DoorAction tDoorAction, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsDoorActionPossible(oTargetDoor, tDoorAction, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsDoorActionPossible(NWObject oTargetDoor, DoorAction tDoorAction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsDoorActionPossible");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsDoorActionPossible(oTargetDoor, tDoorAction, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsDusk()
        throws NotInContextException
    {
        return getIsDusk(null, false);
    }

    public boolean
    getIsDusk(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsDusk(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsDusk(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsDusk");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsDusk(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsEffectValid(NWEffect eEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return getIsEffectValid(eEffect, null, false);
    }

    public boolean
    getIsEffectValid(NWEffect eEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return getIsEffectValid(eEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsEffectValid(NWEffect eEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsEffectValid");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsEffectValid(eEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsEncounterCreature(NWObject oCreature)
        throws NotInContextException
    {
        return getIsEncounterCreature(oCreature, null, false);
    }

    public boolean
    getIsEncounterCreature(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsEncounterCreature(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsEncounterCreature(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsEncounterCreature");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsEncounterCreature(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsEnemy(NWObject oTarget, NWObject oSource)
        throws NotInContextException
    {
        return getIsEnemy(oTarget, oSource, null, false);
    }

    public boolean
    getIsEnemy(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsEnemy(oTarget, oSource, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsEnemy(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsEnemy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsEnemy(oTarget, oSource, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsFriend(NWObject oTarget, NWObject oSource)
        throws NotInContextException
    {
        return getIsFriend(oTarget, oSource, null, false);
    }

    public boolean
    getIsFriend(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsFriend(oTarget, oSource, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsFriend(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsFriend");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsFriend(oTarget, oSource, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsImmune(NWObject oCreature, ImmunityType tImmunityType, NWObject oVersus)
        throws NotInContextException
    {
        return getIsImmune(oCreature, tImmunityType, oVersus, null, false);
    }

    public boolean
    getIsImmune(NWObject oCreature, ImmunityType tImmunityType, NWObject oVersus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsImmune(oCreature, tImmunityType, oVersus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsImmune(NWObject oCreature, ImmunityType tImmunityType, NWObject oVersus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsImmune");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsImmune(oCreature, tImmunityType, oVersus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsInCombat(NWObject oCreature)
        throws NotInContextException
    {
        return getIsInCombat(oCreature, null, false);
    }

    public boolean
    getIsInCombat(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsInCombat(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsInCombat(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsInCombat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsInCombat(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsInSubArea(NWObject oCreature, NWObject oSubArea)
        throws NotInContextException
    {
        return getIsInSubArea(oCreature, oSubArea, null, false);
    }

    public boolean
    getIsInSubArea(NWObject oCreature, NWObject oSubArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsInSubArea(oCreature, oSubArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsInSubArea(NWObject oCreature, NWObject oSubArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsInSubArea");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsInSubArea(oCreature, oSubArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsItemPropertyValid(NWItemProperty ipProperty)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getIsItemPropertyValid(ipProperty, null, false);
    }

    public boolean
    getIsItemPropertyValid(NWItemProperty ipProperty, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getIsItemPropertyValid(ipProperty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsItemPropertyValid(NWItemProperty ipProperty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsItemPropertyValid");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsItemPropertyValid(ipProperty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsListening(NWObject oObject)
        throws NotInContextException
    {
        return getIsListening(oObject, null, false);
    }

    public boolean
    getIsListening(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsListening(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsListening(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsListening");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsListening(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsNeutral(NWObject oTarget, NWObject oSource)
        throws NotInContextException
    {
        return getIsNeutral(oTarget, oSource, null, false);
    }

    public boolean
    getIsNeutral(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsNeutral(oTarget, oSource, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsNeutral(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsNeutral");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsNeutral(oTarget, oSource, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsNight()
        throws NotInContextException
    {
        return getIsNight(null, false);
    }

    public boolean
    getIsNight(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsNight(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsNight(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsNight");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsNight(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsObjectValid(NWObject oObject)
        throws NotInContextException
    {
        return getIsObjectValid(oObject, null, false);
    }

    public boolean
    getIsObjectValid(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsObjectValid(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsObjectValid(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsObjectValid");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsObjectValid(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsOpen(NWObject oObject)
        throws NotInContextException
    {
        return getIsOpen(oObject, null, false);
    }

    public boolean
    getIsOpen(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsOpen(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsOpen(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsOpen");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsOpen(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsPC(NWObject oCreature)
        throws NotInContextException
    {
        return getIsPC(oCreature, null, false);
    }

    public boolean
    getIsPC(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsPC(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsPC(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsPC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsPC(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsPlaceableObjectActionPossible(NWObject oPlaceable, PlaceableAction tPlaceableAction)
        throws NotInContextException
    {
        return getIsPlaceableObjectActionPossible(oPlaceable, tPlaceableAction, null, false);
    }

    public boolean
    getIsPlaceableObjectActionPossible(NWObject oPlaceable, PlaceableAction tPlaceableAction, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsPlaceableObjectActionPossible(oPlaceable, tPlaceableAction, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsPlaceableObjectActionPossible(NWObject oPlaceable, PlaceableAction tPlaceableAction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsPlaceableObjectActionPossible");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsPlaceableObjectActionPossible(oPlaceable, tPlaceableAction, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsPlayableRacialType(NWObject oCreature)
        throws NotInContextException
    {
        return getIsPlayableRacialType(oCreature, null, false);
    }

    public boolean
    getIsPlayableRacialType(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsPlayableRacialType(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsPlayableRacialType(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsPlayableRacialType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsPlayableRacialType(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsPossessedFamiliar(NWObject oCreature)
        throws NotInContextException
    {
        return getIsPossessedFamiliar(oCreature, null, false);
    }

    public boolean
    getIsPossessedFamiliar(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsPossessedFamiliar(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsPossessedFamiliar(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsPossessedFamiliar");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsPossessedFamiliar(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsReactionTypeFriendly(NWObject oTarget, NWObject oSource)
        throws NotInContextException
    {
        return getIsReactionTypeFriendly(oTarget, oSource, null, false);
    }

    public boolean
    getIsReactionTypeFriendly(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsReactionTypeFriendly(oTarget, oSource, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsReactionTypeFriendly(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsReactionTypeFriendly");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsReactionTypeFriendly(oTarget, oSource, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsReactionTypeHostile(NWObject oTarget, NWObject oSource)
        throws NotInContextException
    {
        return getIsReactionTypeHostile(oTarget, oSource, null, false);
    }

    public boolean
    getIsReactionTypeHostile(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsReactionTypeHostile(oTarget, oSource, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsReactionTypeHostile(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsReactionTypeHostile");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsReactionTypeHostile(oTarget, oSource, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsReactionTypeNeutral(NWObject oTarget, NWObject oSource)
        throws NotInContextException
    {
        return getIsReactionTypeNeutral(oTarget, oSource, null, false);
    }

    public boolean
    getIsReactionTypeNeutral(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsReactionTypeNeutral(oTarget, oSource, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsReactionTypeNeutral(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsReactionTypeNeutral");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsReactionTypeNeutral(oTarget, oSource, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsResting(NWObject oCreature)
        throws NotInContextException
    {
        return getIsResting(oCreature, null, false);
    }

    public boolean
    getIsResting(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsResting(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsResting(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsResting");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsResting(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsSkillSuccessful(NWObject oTarget, int nSkill, int nDifficulty)
        throws NotInContextException
    {
        return getIsSkillSuccessful(oTarget, nSkill, nDifficulty, null, false);
    }

    public boolean
    getIsSkillSuccessful(NWObject oTarget, int nSkill, int nDifficulty, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsSkillSuccessful(oTarget, nSkill, nDifficulty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsSkillSuccessful(NWObject oTarget, int nSkill, int nDifficulty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsSkillSuccessful");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsSkillSuccessful(oTarget, nSkill, nDifficulty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsTrapped(NWObject oObject)
        throws NotInContextException
    {
        return getIsTrapped(oObject, null, false);
    }

    public boolean
    getIsTrapped(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsTrapped(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsTrapped(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsTrapped");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsTrapped(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getIsWeaponEffective(NWObject oVersus, boolean bOffHand)
        throws NotInContextException
    {
        return getIsWeaponEffective(oVersus, bOffHand, null, false);
    }

    public boolean
    getIsWeaponEffective(NWObject oVersus, boolean bOffHand, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getIsWeaponEffective(oVersus, bOffHand, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getIsWeaponEffective(NWObject oVersus, boolean bOffHand, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getIsWeaponEffective");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getIsWeaponEffective(oVersus, bOffHand, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemACValue(NWObject oItem)
        throws NotInContextException
    {
        return getItemACValue(oItem, null, false);
    }

    public int
    getItemACValue(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemACValue(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemACValue(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemACValue");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemACValue(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getItemActivated()
        throws NotInContextException
    {
        return getItemActivated(null, false);
    }

    public NWObject
    getItemActivated(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemActivated(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getItemActivated(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemActivated");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemActivated(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getItemActivatedTarget()
        throws NotInContextException
    {
        return getItemActivatedTarget(null, false);
    }

    public NWObject
    getItemActivatedTarget(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemActivatedTarget(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getItemActivatedTarget(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemActivatedTarget");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemActivatedTarget(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWLocation
    getItemActivatedTargetLocation()
        throws NotInContextException
    {
        return getItemActivatedTargetLocation(null, false);
    }

    public NWLocation
    getItemActivatedTargetLocation(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemActivatedTargetLocation(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWLocation
    getItemActivatedTargetLocation(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemActivatedTargetLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemActivatedTargetLocation(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getItemActivator()
        throws NotInContextException
    {
        return getItemActivator(null, false);
    }

    public NWObject
    getItemActivator(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemActivator(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getItemActivator(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemActivator");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemActivator(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemAppearance(NWObject oItem, int nType, int nIndex)
        throws NotInContextException
    {
        return getItemAppearance(oItem, nType, nIndex, null, false);
    }

    public int
    getItemAppearance(NWObject oItem, int nType, int nIndex, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemAppearance(oItem, nType, nIndex, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemAppearance(NWObject oItem, int nType, int nIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemAppearance");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemAppearance(oItem, nType, nIndex, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemCharges(NWObject oItem)
        throws NotInContextException
    {
        return getItemCharges(oItem, null, false);
    }

    public int
    getItemCharges(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemCharges(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemCharges(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemCharges");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemCharges(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getItemCursedFlag(NWObject oItem)
        throws NotInContextException
    {
        return getItemCursedFlag(oItem, null, false);
    }

    public boolean
    getItemCursedFlag(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemCursedFlag(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getItemCursedFlag(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemCursedFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemCursedFlag(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getItemHasItemProperty(NWObject oItem, int nProperty)
        throws NotInContextException
    {
        return getItemHasItemProperty(oItem, nProperty, null, false);
    }

    public boolean
    getItemHasItemProperty(NWObject oItem, int nProperty, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemHasItemProperty(oItem, nProperty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getItemHasItemProperty(NWObject oItem, int nProperty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemHasItemProperty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemHasItemProperty(oItem, nProperty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getItemInSlot(InventorySlot tInventorySlot, NWObject oCreature)
        throws NotInContextException
    {
        return getItemInSlot(tInventorySlot, oCreature, null, false);
    }

    public NWObject
    getItemInSlot(InventorySlot tInventorySlot, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemInSlot(tInventorySlot, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getItemInSlot(InventorySlot tInventorySlot, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemInSlot");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemInSlot(tInventorySlot, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getItemPossessedBy(NWObject oCreature, String sItemTag)
        throws NotInContextException
    {
        return getItemPossessedBy(oCreature, sItemTag, null, false);
    }

    public NWObject
    getItemPossessedBy(NWObject oCreature, String sItemTag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemPossessedBy(oCreature, sItemTag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getItemPossessedBy(NWObject oCreature, String sItemTag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPossessedBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPossessedBy(oCreature, sItemTag, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getItemPossessor(NWObject oItem)
        throws NotInContextException
    {
        return getItemPossessor(oItem, null, false);
    }

    public NWObject
    getItemPossessor(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemPossessor(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getItemPossessor(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPossessor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPossessor(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemPropertyCostTable(NWItemProperty iProp)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyCostTable(iProp, null, false);
    }

    public int
    getItemPropertyCostTable(NWItemProperty iProp, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyCostTable(iProp, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemPropertyCostTable(NWItemProperty iProp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPropertyCostTable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPropertyCostTable(iProp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemPropertyCostTableValue(NWItemProperty iProp)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyCostTableValue(iProp, null, false);
    }

    public int
    getItemPropertyCostTableValue(NWItemProperty iProp, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyCostTableValue(iProp, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemPropertyCostTableValue(NWItemProperty iProp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPropertyCostTableValue");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPropertyCostTableValue(iProp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getItemPropertyDuration(NWItemProperty e)
        throws InvalidEffectException
    {
        return getItemPropertyDuration(e, null, false);
    }

    public double
    getItemPropertyDuration(NWItemProperty e, java.util.Map<String, String> __ctx)
        throws InvalidEffectException
    {
        return getItemPropertyDuration(e, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getItemPropertyDuration(NWItemProperty e, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPropertyDuration");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPropertyDuration(e, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DurationType
    getItemPropertyDurationType(NWItemProperty ip)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyDurationType(ip, null, false);
    }

    public DurationType
    getItemPropertyDurationType(NWItemProperty ip, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyDurationType(ip, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DurationType
    getItemPropertyDurationType(NWItemProperty ip, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPropertyDurationType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPropertyDurationType(ip, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemPropertyInteger(NWItemProperty e, int index)
        throws InvalidArgumentException,
               InvalidItemPropertyException
    {
        return getItemPropertyInteger(e, index, null, false);
    }

    public int
    getItemPropertyInteger(NWItemProperty e, int index, java.util.Map<String, String> __ctx)
        throws InvalidArgumentException,
               InvalidItemPropertyException
    {
        return getItemPropertyInteger(e, index, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemPropertyInteger(NWItemProperty e, int index, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidArgumentException,
               InvalidItemPropertyException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPropertyInteger");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPropertyInteger(e, index, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemPropertyParam1(NWItemProperty iProp)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyParam1(iProp, null, false);
    }

    public int
    getItemPropertyParam1(NWItemProperty iProp, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyParam1(iProp, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemPropertyParam1(NWItemProperty iProp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPropertyParam1");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPropertyParam1(iProp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemPropertyParam1Value(NWItemProperty iProp)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyParam1Value(iProp, null, false);
    }

    public int
    getItemPropertyParam1Value(NWItemProperty iProp, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyParam1Value(iProp, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemPropertyParam1Value(NWItemProperty iProp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPropertyParam1Value");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPropertyParam1Value(iProp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemPropertySubType(NWItemProperty iProperty)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertySubType(iProperty, null, false);
    }

    public int
    getItemPropertySubType(NWItemProperty iProperty, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertySubType(iProperty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemPropertySubType(NWItemProperty iProperty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPropertySubType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPropertySubType(iProperty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemPropertyType(NWItemProperty ip)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyType(ip, null, false);
    }

    public int
    getItemPropertyType(NWItemProperty ip, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        return getItemPropertyType(ip, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemPropertyType(NWItemProperty ip, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemPropertyType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemPropertyType(ip, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getItemStackSize(NWObject oItem)
        throws NotInContextException
    {
        return getItemStackSize(oItem, null, false);
    }

    public int
    getItemStackSize(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getItemStackSize(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getItemStackSize(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getItemStackSize");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getItemStackSize(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getJournalQuestExperience(String szPlotID)
        throws NotInContextException
    {
        return getJournalQuestExperience(szPlotID, null, false);
    }

    public int
    getJournalQuestExperience(String szPlotID, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getJournalQuestExperience(szPlotID, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getJournalQuestExperience(String szPlotID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getJournalQuestExperience");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getJournalQuestExperience(szPlotID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getKeyRequiredFeedback(NWObject oObject)
        throws NotInContextException
    {
        return getKeyRequiredFeedback(oObject, null, false);
    }

    public String
    getKeyRequiredFeedback(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getKeyRequiredFeedback(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getKeyRequiredFeedback(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getKeyRequiredFeedback");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getKeyRequiredFeedback(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public AssociateCommand
    getLastAssociateCommand(NWObject oAssociate)
        throws NotInContextException
    {
        return getLastAssociateCommand(oAssociate, null, false);
    }

    public AssociateCommand
    getLastAssociateCommand(NWObject oAssociate, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastAssociateCommand(oAssociate, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private AssociateCommand
    getLastAssociateCommand(NWObject oAssociate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastAssociateCommand");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastAssociateCommand(oAssociate, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public CombatMode
    getLastAttackMode(NWObject oCreature)
        throws NotInContextException
    {
        return getLastAttackMode(oCreature, null, false);
    }

    public CombatMode
    getLastAttackMode(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastAttackMode(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private CombatMode
    getLastAttackMode(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastAttackMode");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastAttackMode(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SpecialAttack
    getLastAttackType(NWObject oCreature)
        throws NotInContextException
    {
        return getLastAttackType(oCreature, null, false);
    }

    public SpecialAttack
    getLastAttackType(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastAttackType(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SpecialAttack
    getLastAttackType(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastAttackType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastAttackType(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastAttacker(NWObject oAttackee)
        throws NotInContextException
    {
        return getLastAttacker(oAttackee, null, false);
    }

    public NWObject
    getLastAttacker(NWObject oAttackee, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastAttacker(oAttackee, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastAttacker(NWObject oAttackee, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastAttacker");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastAttacker(oAttackee, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastClosedBy()
        throws NotInContextException
    {
        return getLastClosedBy(null, false);
    }

    public NWObject
    getLastClosedBy(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastClosedBy(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastClosedBy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastClosedBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastClosedBy(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastDamager(NWObject oObject)
        throws NotInContextException
    {
        return getLastDamager(oObject, null, false);
    }

    public NWObject
    getLastDamager(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastDamager(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastDamager(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastDamager");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastDamager(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastDisarmed()
        throws NotInContextException
    {
        return getLastDisarmed(null, false);
    }

    public NWObject
    getLastDisarmed(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastDisarmed(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastDisarmed(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastDisarmed");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastDisarmed(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastDisturbed()
        throws NotInContextException
    {
        return getLastDisturbed(null, false);
    }

    public NWObject
    getLastDisturbed(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastDisturbed(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastDisturbed(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastDisturbed");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastDisturbed(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastHostileActor(NWObject oVictim)
        throws NotInContextException
    {
        return getLastHostileActor(oVictim, null, false);
    }

    public NWObject
    getLastHostileActor(NWObject oVictim, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastHostileActor(oVictim, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastHostileActor(NWObject oVictim, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastHostileActor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastHostileActor(oVictim, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastKiller()
        throws NotInContextException
    {
        return getLastKiller(null, false);
    }

    public NWObject
    getLastKiller(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastKiller(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastKiller(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastKiller");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastKiller(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastLocked()
        throws NotInContextException
    {
        return getLastLocked(null, false);
    }

    public NWObject
    getLastLocked(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastLocked(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastLocked(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastLocked");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastLocked(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastOpenedBy()
        throws NotInContextException
    {
        return getLastOpenedBy(null, false);
    }

    public NWObject
    getLastOpenedBy(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastOpenedBy(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastOpenedBy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastOpenedBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastOpenedBy(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastPCRested()
        throws NotInContextException
    {
        return getLastPCRested(null, false);
    }

    public NWObject
    getLastPCRested(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastPCRested(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastPCRested(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastPCRested");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastPCRested(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastPCToCancelCutscene()
        throws NotInContextException
    {
        return getLastPCToCancelCutscene(null, false);
    }

    public NWObject
    getLastPCToCancelCutscene(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastPCToCancelCutscene(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastPCToCancelCutscene(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastPCToCancelCutscene");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastPCToCancelCutscene(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastPerceived()
        throws NotInContextException
    {
        return getLastPerceived(null, false);
    }

    public NWObject
    getLastPerceived(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastPerceived(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastPerceived(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastPerceived");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastPerceived(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getLastPerceptionHeard()
        throws NotInContextException
    {
        return getLastPerceptionHeard(null, false);
    }

    public boolean
    getLastPerceptionHeard(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastPerceptionHeard(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getLastPerceptionHeard(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastPerceptionHeard");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastPerceptionHeard(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getLastPerceptionInaudible()
        throws NotInContextException
    {
        return getLastPerceptionInaudible(null, false);
    }

    public boolean
    getLastPerceptionInaudible(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastPerceptionInaudible(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getLastPerceptionInaudible(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastPerceptionInaudible");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastPerceptionInaudible(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getLastPerceptionSeen()
        throws NotInContextException
    {
        return getLastPerceptionSeen(null, false);
    }

    public boolean
    getLastPerceptionSeen(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastPerceptionSeen(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getLastPerceptionSeen(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastPerceptionSeen");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastPerceptionSeen(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getLastPerceptionVanished()
        throws NotInContextException
    {
        return getLastPerceptionVanished(null, false);
    }

    public boolean
    getLastPerceptionVanished(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastPerceptionVanished(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getLastPerceptionVanished(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastPerceptionVanished");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastPerceptionVanished(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastPlayerDied()
        throws NotInContextException
    {
        return getLastPlayerDied(null, false);
    }

    public NWObject
    getLastPlayerDied(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastPlayerDied(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastPlayerDied(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastPlayerDied");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastPlayerDied(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastPlayerDying()
        throws NotInContextException
    {
        return getLastPlayerDying(null, false);
    }

    public NWObject
    getLastPlayerDying(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastPlayerDying(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastPlayerDying(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastPlayerDying");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastPlayerDying(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastRespawnButtonPresser()
        throws NotInContextException
    {
        return getLastRespawnButtonPresser(null, false);
    }

    public NWObject
    getLastRespawnButtonPresser(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastRespawnButtonPresser(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastRespawnButtonPresser(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastRespawnButtonPresser");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastRespawnButtonPresser(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getLastRestEventType()
        throws NotInContextException
    {
        return getLastRestEventType(null, false);
    }

    public int
    getLastRestEventType(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastRestEventType(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getLastRestEventType(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastRestEventType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastRestEventType(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastSpeaker()
        throws NotInContextException
    {
        return getLastSpeaker(null, false);
    }

    public NWObject
    getLastSpeaker(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastSpeaker(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastSpeaker(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastSpeaker");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastSpeaker(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getLastSpell()
        throws NotInContextException
    {
        return getLastSpell(null, false);
    }

    public int
    getLastSpell(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastSpell(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getLastSpell(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastSpell");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastSpell(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getLastSpellCastClass()
        throws NotInContextException
    {
        return getLastSpellCastClass(null, false);
    }

    public int
    getLastSpellCastClass(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastSpellCastClass(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getLastSpellCastClass(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastSpellCastClass");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastSpellCastClass(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastSpellCaster()
        throws NotInContextException
    {
        return getLastSpellCaster(null, false);
    }

    public NWObject
    getLastSpellCaster(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastSpellCaster(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastSpellCaster(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastSpellCaster");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastSpellCaster(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getLastSpellHarmful()
        throws NotInContextException
    {
        return getLastSpellHarmful(null, false);
    }

    public boolean
    getLastSpellHarmful(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastSpellHarmful(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getLastSpellHarmful(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastSpellHarmful");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastSpellHarmful(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastTrapDetected(NWObject oTarget)
        throws NotInContextException
    {
        return getLastTrapDetected(oTarget, null, false);
    }

    public NWObject
    getLastTrapDetected(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastTrapDetected(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastTrapDetected(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastTrapDetected");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastTrapDetected(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastUnlocked()
        throws NotInContextException
    {
        return getLastUnlocked(null, false);
    }

    public NWObject
    getLastUnlocked(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastUnlocked(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastUnlocked(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastUnlocked");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastUnlocked(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastUsedBy()
        throws NotInContextException
    {
        return getLastUsedBy(null, false);
    }

    public NWObject
    getLastUsedBy(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastUsedBy(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastUsedBy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastUsedBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastUsedBy(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLastWeaponUsed(NWObject oCreature)
        throws NotInContextException
    {
        return getLastWeaponUsed(oCreature, null, false);
    }

    public NWObject
    getLastWeaponUsed(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLastWeaponUsed(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLastWeaponUsed(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLastWeaponUsed");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLastWeaponUsed(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getLawChaosValue(NWObject oCreature)
        throws NotInContextException
    {
        return getLawChaosValue(oCreature, null, false);
    }

    public int
    getLawChaosValue(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLawChaosValue(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getLawChaosValue(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLawChaosValue");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLawChaosValue(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getLevelByClass(int nClassType, NWObject oCreature)
        throws NotInContextException
    {
        return getLevelByClass(nClassType, oCreature, null, false);
    }

    public int
    getLevelByClass(int nClassType, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLevelByClass(nClassType, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getLevelByClass(int nClassType, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLevelByClass");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLevelByClass(nClassType, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getLevelByPosition(int nClassPosition, NWObject oCreature)
        throws NotInContextException
    {
        return getLevelByPosition(nClassPosition, oCreature, null, false);
    }

    public int
    getLevelByPosition(int nClassPosition, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLevelByPosition(nClassPosition, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getLevelByPosition(int nClassPosition, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLevelByPosition");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLevelByPosition(nClassPosition, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getListenPatternNumber()
        throws NotInContextException
    {
        return getListenPatternNumber(null, false);
    }

    public int
    getListenPatternNumber(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getListenPatternNumber(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getListenPatternNumber(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getListenPatternNumber");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getListenPatternNumber(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getLocalFloat(NWObject oObject, String sVarName)
        throws NotInContextException
    {
        return getLocalFloat(oObject, sVarName, null, false);
    }

    public double
    getLocalFloat(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLocalFloat(oObject, sVarName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getLocalFloat(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLocalFloat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLocalFloat(oObject, sVarName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getLocalInt(NWObject oObject, String sVarName)
        throws NotInContextException
    {
        return getLocalInt(oObject, sVarName, null, false);
    }

    public int
    getLocalInt(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLocalInt(oObject, sVarName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getLocalInt(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLocalInt");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLocalInt(oObject, sVarName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWLocation
    getLocalLocation(NWObject oObject, String sVarName)
        throws NotInContextException
    {
        return getLocalLocation(oObject, sVarName, null, false);
    }

    public NWLocation
    getLocalLocation(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLocalLocation(oObject, sVarName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWLocation
    getLocalLocation(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLocalLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLocalLocation(oObject, sVarName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getLocalObject(NWObject oObject, String sVarName)
        throws NotInContextException
    {
        return getLocalObject(oObject, sVarName, null, false);
    }

    public NWObject
    getLocalObject(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLocalObject(oObject, sVarName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getLocalObject(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLocalObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLocalObject(oObject, sVarName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getLocalString(NWObject oObject, String sVarName)
        throws NotInContextException
    {
        return getLocalString(oObject, sVarName, null, false);
    }

    public String
    getLocalString(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLocalString(oObject, sVarName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getLocalString(NWObject oObject, String sVarName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLocalString");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLocalString(oObject, sVarName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWLocation
    getLocation(NWObject oObject)
        throws NotInContextException
    {
        return getLocation(oObject, null, false);
    }

    public NWLocation
    getLocation(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLocation(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWLocation
    getLocation(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLocation(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getLockKeyRequired(NWObject oObject)
        throws NotInContextException
    {
        return getLockKeyRequired(oObject, null, false);
    }

    public boolean
    getLockKeyRequired(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLockKeyRequired(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getLockKeyRequired(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLockKeyRequired");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLockKeyRequired(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getLockKeyTag(NWObject oObject)
        throws NotInContextException
    {
        return getLockKeyTag(oObject, null, false);
    }

    public String
    getLockKeyTag(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLockKeyTag(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getLockKeyTag(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLockKeyTag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLockKeyTag(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getLockLockDC(NWObject oObject)
        throws NotInContextException
    {
        return getLockLockDC(oObject, null, false);
    }

    public int
    getLockLockDC(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLockLockDC(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getLockLockDC(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLockLockDC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLockLockDC(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getLockLockable(NWObject oObject)
        throws NotInContextException
    {
        return getLockLockable(oObject, null, false);
    }

    public boolean
    getLockLockable(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLockLockable(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getLockLockable(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLockLockable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLockLockable(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getLockUnlockDC(NWObject oObject)
        throws NotInContextException
    {
        return getLockUnlockDC(oObject, null, false);
    }

    public int
    getLockUnlockDC(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLockUnlockDC(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getLockUnlockDC(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLockUnlockDC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLockUnlockDC(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getLocked(NWObject oTarget)
        throws NotInContextException
    {
        return getLocked(oTarget, null, false);
    }

    public boolean
    getLocked(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLocked(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getLocked(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLocked");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLocked(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getLootable(NWObject oCreature)
        throws NotInContextException
    {
        return getLootable(oCreature, null, false);
    }

    public boolean
    getLootable(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getLootable(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getLootable(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLootable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getLootable(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getMaster(NWObject oAssociate)
        throws NotInContextException
    {
        return getMaster(oAssociate, null, false);
    }

    public NWObject
    getMaster(NWObject oAssociate, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getMaster(oAssociate, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getMaster(NWObject oAssociate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMaster");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getMaster(oAssociate, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getMatchedSubstring(int nString)
        throws NotInContextException
    {
        return getMatchedSubstring(nString, null, false);
    }

    public String
    getMatchedSubstring(int nString, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getMatchedSubstring(nString, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getMatchedSubstring(int nString, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMatchedSubstring");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getMatchedSubstring(nString, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getMatchedSubstringsCount()
        throws NotInContextException
    {
        return getMatchedSubstringsCount(null, false);
    }

    public int
    getMatchedSubstringsCount(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getMatchedSubstringsCount(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getMatchedSubstringsCount(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMatchedSubstringsCount");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getMatchedSubstringsCount(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getMaxHenchmen()
        throws NotInContextException
    {
        return getMaxHenchmen(null, false);
    }

    public int
    getMaxHenchmen(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getMaxHenchmen(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getMaxHenchmen(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMaxHenchmen");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getMaxHenchmen(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getMaxHitPoints(NWObject oObject)
        throws NotInContextException
    {
        return getMaxHitPoints(oObject, null, false);
    }

    public int
    getMaxHitPoints(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getMaxHitPoints(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getMaxHitPoints(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMaxHitPoints");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getMaxHitPoints(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public MetaMagic
    getMetaMagicFeat()
        throws NotInContextException
    {
        return getMetaMagicFeat(null, false);
    }

    public MetaMagic
    getMetaMagicFeat(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getMetaMagicFeat(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private MetaMagic
    getMetaMagicFeat(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMetaMagicFeat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getMetaMagicFeat(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getModule()
        throws NotInContextException
    {
        return getModule(null, false);
    }

    public NWObject
    getModule(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getModule(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getModule(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getModule");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getModule(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getModuleItemAcquired()
        throws NotInContextException
    {
        return getModuleItemAcquired(null, false);
    }

    public NWObject
    getModuleItemAcquired(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getModuleItemAcquired(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getModuleItemAcquired(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getModuleItemAcquired");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getModuleItemAcquired(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getModuleItemAcquiredBy()
        throws NotInContextException
    {
        return getModuleItemAcquiredBy(null, false);
    }

    public NWObject
    getModuleItemAcquiredBy(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getModuleItemAcquiredBy(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getModuleItemAcquiredBy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getModuleItemAcquiredBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getModuleItemAcquiredBy(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getModuleItemAcquiredFrom()
        throws NotInContextException
    {
        return getModuleItemAcquiredFrom(null, false);
    }

    public NWObject
    getModuleItemAcquiredFrom(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getModuleItemAcquiredFrom(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getModuleItemAcquiredFrom(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getModuleItemAcquiredFrom");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getModuleItemAcquiredFrom(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getModuleItemAcquiredStackSize()
        throws NotInContextException
    {
        return getModuleItemAcquiredStackSize(null, false);
    }

    public int
    getModuleItemAcquiredStackSize(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getModuleItemAcquiredStackSize(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getModuleItemAcquiredStackSize(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getModuleItemAcquiredStackSize");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getModuleItemAcquiredStackSize(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getModuleItemLost()
        throws NotInContextException
    {
        return getModuleItemLost(null, false);
    }

    public NWObject
    getModuleItemLost(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getModuleItemLost(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getModuleItemLost(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getModuleItemLost");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getModuleItemLost(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getModuleItemLostBy()
        throws NotInContextException
    {
        return getModuleItemLostBy(null, false);
    }

    public NWObject
    getModuleItemLostBy(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getModuleItemLostBy(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getModuleItemLostBy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getModuleItemLostBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getModuleItemLostBy(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getModuleName()
        throws NotInContextException
    {
        return getModuleName(null, false);
    }

    public String
    getModuleName(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getModuleName(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getModuleName(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getModuleName");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getModuleName(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getModuleXPScale()
        throws NotInContextException
    {
        return getModuleXPScale(null, false);
    }

    public int
    getModuleXPScale(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getModuleXPScale(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getModuleXPScale(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getModuleXPScale");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getModuleXPScale(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getMovementRate(NWObject oCreature)
        throws NotInContextException
    {
        return getMovementRate(oCreature, null, false);
    }

    public int
    getMovementRate(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getMovementRate(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getMovementRate(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMovementRate");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getMovementRate(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getName(NWObject oObject, boolean bOriginalName)
        throws NotInContextException
    {
        return getName(oObject, bOriginalName, null, false);
    }

    public String
    getName(NWObject oObject, boolean bOriginalName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getName(oObject, bOriginalName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getName(NWObject oObject, boolean bOriginalName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getName");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getName(oObject, bOriginalName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getNearestCreature(int nFirstCriteriaType, int nFirstCriteriaValue, NWObject oTarget, int nNth, int nSecondCriteriaType, int nSecondCriteriaValue, int nThirdCriteriaType, int nThirdCriteriaValue)
        throws NotInContextException
    {
        return getNearestCreature(nFirstCriteriaType, nFirstCriteriaValue, oTarget, nNth, nSecondCriteriaType, nSecondCriteriaValue, nThirdCriteriaType, nThirdCriteriaValue, null, false);
    }

    public NWObject
    getNearestCreature(int nFirstCriteriaType, int nFirstCriteriaValue, NWObject oTarget, int nNth, int nSecondCriteriaType, int nSecondCriteriaValue, int nThirdCriteriaType, int nThirdCriteriaValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getNearestCreature(nFirstCriteriaType, nFirstCriteriaValue, oTarget, nNth, nSecondCriteriaType, nSecondCriteriaValue, nThirdCriteriaType, nThirdCriteriaValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getNearestCreature(int nFirstCriteriaType, int nFirstCriteriaValue, NWObject oTarget, int nNth, int nSecondCriteriaType, int nSecondCriteriaValue, int nThirdCriteriaType, int nThirdCriteriaValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getNearestCreature");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getNearestCreature(nFirstCriteriaType, nFirstCriteriaValue, oTarget, nNth, nSecondCriteriaType, nSecondCriteriaValue, nThirdCriteriaType, nThirdCriteriaValue, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getNearestCreatureToLocation(int nFirstCriteriaType, int nFirstCriteriaValue, NWLocation lLocation, int nNth, int nSecondCriteriaType, int nSecondCriteriaValue, int nThirdCriteriaType, int nThirdCriteriaValue)
        throws NotInContextException
    {
        return getNearestCreatureToLocation(nFirstCriteriaType, nFirstCriteriaValue, lLocation, nNth, nSecondCriteriaType, nSecondCriteriaValue, nThirdCriteriaType, nThirdCriteriaValue, null, false);
    }

    public NWObject
    getNearestCreatureToLocation(int nFirstCriteriaType, int nFirstCriteriaValue, NWLocation lLocation, int nNth, int nSecondCriteriaType, int nSecondCriteriaValue, int nThirdCriteriaType, int nThirdCriteriaValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getNearestCreatureToLocation(nFirstCriteriaType, nFirstCriteriaValue, lLocation, nNth, nSecondCriteriaType, nSecondCriteriaValue, nThirdCriteriaType, nThirdCriteriaValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getNearestCreatureToLocation(int nFirstCriteriaType, int nFirstCriteriaValue, NWLocation lLocation, int nNth, int nSecondCriteriaType, int nSecondCriteriaValue, int nThirdCriteriaType, int nThirdCriteriaValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getNearestCreatureToLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getNearestCreatureToLocation(nFirstCriteriaType, nFirstCriteriaValue, lLocation, nNth, nSecondCriteriaType, nSecondCriteriaValue, nThirdCriteriaType, nThirdCriteriaValue, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getNearestObject(ObjectType tObjectType, NWObject oTarget, int nNth)
        throws NotInContextException
    {
        return getNearestObject(tObjectType, oTarget, nNth, null, false);
    }

    public NWObject
    getNearestObject(ObjectType tObjectType, NWObject oTarget, int nNth, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getNearestObject(tObjectType, oTarget, nNth, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getNearestObject(ObjectType tObjectType, NWObject oTarget, int nNth, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getNearestObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getNearestObject(tObjectType, oTarget, nNth, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getNearestObjectByTag(String sTag, NWObject oTarget, int nNth)
        throws NotInContextException
    {
        return getNearestObjectByTag(sTag, oTarget, nNth, null, false);
    }

    public NWObject
    getNearestObjectByTag(String sTag, NWObject oTarget, int nNth, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getNearestObjectByTag(sTag, oTarget, nNth, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getNearestObjectByTag(String sTag, NWObject oTarget, int nNth, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getNearestObjectByTag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getNearestObjectByTag(sTag, oTarget, nNth, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getNearestObjectToLocation(ObjectType tObjectType, NWLocation lLocation, int nNth)
        throws NotInContextException
    {
        return getNearestObjectToLocation(tObjectType, lLocation, nNth, null, false);
    }

    public NWObject
    getNearestObjectToLocation(ObjectType tObjectType, NWLocation lLocation, int nNth, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getNearestObjectToLocation(tObjectType, lLocation, nNth, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getNearestObjectToLocation(ObjectType tObjectType, NWLocation lLocation, int nNth, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getNearestObjectToLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getNearestObjectToLocation(tObjectType, lLocation, nNth, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getNearestTrapToObject(NWObject oTarget, boolean bTrapDetected)
        throws NotInContextException
    {
        return getNearestTrapToObject(oTarget, bTrapDetected, null, false);
    }

    public NWObject
    getNearestTrapToObject(NWObject oTarget, boolean bTrapDetected, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getNearestTrapToObject(oTarget, bTrapDetected, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getNearestTrapToObject(NWObject oTarget, boolean bTrapDetected, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getNearestTrapToObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getNearestTrapToObject(oTarget, bTrapDetected, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getNumStackedItems(NWObject oItem)
        throws NotInContextException
    {
        return getNumStackedItems(oItem, null, false);
    }

    public int
    getNumStackedItems(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getNumStackedItems(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getNumStackedItems(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getNumStackedItems");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getNumStackedItems(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getObjectByTag(String sTag, int nNth)
        throws NotInContextException
    {
        return getObjectByTag(sTag, nNth, null, false);
    }

    public NWObject
    getObjectByTag(String sTag, int nNth, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getObjectByTag(sTag, nNth, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getObjectByTag(String sTag, int nNth, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getObjectByTag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getObjectByTag(sTag, nNth, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getObjectHeard(NWObject oTarget, NWObject oSource)
        throws NotInContextException
    {
        return getObjectHeard(oTarget, oSource, null, false);
    }

    public boolean
    getObjectHeard(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getObjectHeard(oTarget, oSource, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getObjectHeard(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getObjectHeard");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getObjectHeard(oTarget, oSource, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getObjectSeen(NWObject oTarget, NWObject oSource)
        throws NotInContextException
    {
        return getObjectSeen(oTarget, oSource, null, false);
    }

    public boolean
    getObjectSeen(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getObjectSeen(oTarget, oSource, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getObjectSeen(NWObject oTarget, NWObject oSource, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getObjectSeen");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getObjectSeen(oTarget, oSource, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public ObjectType
    getObjectType(NWObject oTarget)
        throws NotInContextException
    {
        return getObjectType(oTarget, null, false);
    }

    public ObjectType
    getObjectType(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getObjectType(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private ObjectType
    getObjectType(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getObjectType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getObjectType(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getPCChatMessage()
        throws NotInContextException
    {
        return getPCChatMessage(null, false);
    }

    public String
    getPCChatMessage(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCChatMessage(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getPCChatMessage(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCChatMessage");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCChatMessage(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getPCChatSpeaker()
        throws NotInContextException
    {
        return getPCChatSpeaker(null, false);
    }

    public NWObject
    getPCChatSpeaker(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCChatSpeaker(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getPCChatSpeaker(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCChatSpeaker");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCChatSpeaker(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getPCChatVolume()
        throws NotInContextException
    {
        return getPCChatVolume(null, false);
    }

    public int
    getPCChatVolume(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCChatVolume(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getPCChatVolume(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCChatVolume");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCChatVolume(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getPCIPAddress(NWObject oPlayer)
        throws NotInContextException
    {
        return getPCIPAddress(oPlayer, null, false);
    }

    public String
    getPCIPAddress(NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCIPAddress(oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getPCIPAddress(NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCIPAddress");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCIPAddress(oPlayer, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getPCItemLastEquipped()
        throws NotInContextException
    {
        return getPCItemLastEquipped(null, false);
    }

    public NWObject
    getPCItemLastEquipped(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCItemLastEquipped(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getPCItemLastEquipped(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCItemLastEquipped");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCItemLastEquipped(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getPCItemLastEquippedBy()
        throws NotInContextException
    {
        return getPCItemLastEquippedBy(null, false);
    }

    public NWObject
    getPCItemLastEquippedBy(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCItemLastEquippedBy(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getPCItemLastEquippedBy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCItemLastEquippedBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCItemLastEquippedBy(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getPCItemLastUnequipped()
        throws NotInContextException
    {
        return getPCItemLastUnequipped(null, false);
    }

    public NWObject
    getPCItemLastUnequipped(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCItemLastUnequipped(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getPCItemLastUnequipped(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCItemLastUnequipped");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCItemLastUnequipped(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getPCItemLastUnequippedBy()
        throws NotInContextException
    {
        return getPCItemLastUnequippedBy(null, false);
    }

    public NWObject
    getPCItemLastUnequippedBy(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCItemLastUnequippedBy(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getPCItemLastUnequippedBy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCItemLastUnequippedBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCItemLastUnequippedBy(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getPCLevellingUp()
        throws NotInContextException
    {
        return getPCLevellingUp(null, false);
    }

    public NWObject
    getPCLevellingUp(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCLevellingUp(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getPCLevellingUp(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCLevellingUp");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCLevellingUp(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getPCPlayerName(NWObject oPlayer)
        throws NotInContextException
    {
        return getPCPlayerName(oPlayer, null, false);
    }

    public String
    getPCPlayerName(NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCPlayerName(oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getPCPlayerName(NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCPlayerName");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCPlayerName(oPlayer, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getPCPublicCDKey(NWObject oPlayer, boolean bSinglePlayerCDKey)
        throws NotInContextException
    {
        return getPCPublicCDKey(oPlayer, bSinglePlayerCDKey, null, false);
    }

    public String
    getPCPublicCDKey(NWObject oPlayer, boolean bSinglePlayerCDKey, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCPublicCDKey(oPlayer, bSinglePlayerCDKey, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getPCPublicCDKey(NWObject oPlayer, boolean bSinglePlayerCDKey, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCPublicCDKey");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCPublicCDKey(oPlayer, bSinglePlayerCDKey, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getPCSpeaker()
        throws NotInContextException
    {
        return getPCSpeaker(null, false);
    }

    public NWObject
    getPCSpeaker(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPCSpeaker(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getPCSpeaker(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPCSpeaker");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPCSpeaker(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public PhenoType
    getPhenoType(NWObject oCreature)
        throws NotInContextException
    {
        return getPhenoType(oCreature, null, false);
    }

    public PhenoType
    getPhenoType(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPhenoType(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private PhenoType
    getPhenoType(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPhenoType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPhenoType(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getPickpocketableFlag(NWObject oItem)
        throws NotInContextException
    {
        return getPickpocketableFlag(oItem, null, false);
    }

    public boolean
    getPickpocketableFlag(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPickpocketableFlag(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getPickpocketableFlag(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPickpocketableFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPickpocketableFlag(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getPlaceableIllumination(NWObject oPlaceable)
        throws NotInContextException
    {
        return getPlaceableIllumination(oPlaceable, null, false);
    }

    public int
    getPlaceableIllumination(NWObject oPlaceable, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPlaceableIllumination(oPlaceable, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getPlaceableIllumination(NWObject oPlaceable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPlaceableIllumination");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPlaceableIllumination(oPlaceable, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getPlaceableLastClickedBy()
        throws NotInContextException
    {
        return getPlaceableLastClickedBy(null, false);
    }

    public NWObject
    getPlaceableLastClickedBy(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPlaceableLastClickedBy(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getPlaceableLastClickedBy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPlaceableLastClickedBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPlaceableLastClickedBy(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getPlotFlag(NWObject oTarget)
        throws NotInContextException
    {
        return getPlotFlag(oTarget, null, false);
    }

    public boolean
    getPlotFlag(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPlotFlag(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getPlotFlag(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPlotFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPlotFlag(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getPortraitId(NWObject oTarget)
        throws NotInContextException
    {
        return getPortraitId(oTarget, null, false);
    }

    public int
    getPortraitId(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPortraitId(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getPortraitId(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPortraitId");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPortraitId(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getPortraitResRef(NWObject oTarget)
        throws NotInContextException
    {
        return getPortraitResRef(oTarget, null, false);
    }

    public String
    getPortraitResRef(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPortraitResRef(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getPortraitResRef(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPortraitResRef");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPortraitResRef(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWVector
    getPosition(NWObject oTarget)
        throws NotInContextException
    {
        return getPosition(oTarget, null, false);
    }

    public NWVector
    getPosition(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getPosition(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWVector
    getPosition(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPosition");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getPosition(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public RacialType
    getRacialType(NWObject oCreature)
        throws NotInContextException
    {
        return getRacialType(oCreature, null, false);
    }

    public RacialType
    getRacialType(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getRacialType(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private RacialType
    getRacialType(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getRacialType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getRacialType(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getReflexAdjustedDamage(int nDamage, NWObject oTarget, int nDC, SaveType tSaveType, NWObject oSaveVersus)
        throws NotInContextException
    {
        return getReflexAdjustedDamage(nDamage, oTarget, nDC, tSaveType, oSaveVersus, null, false);
    }

    public int
    getReflexAdjustedDamage(int nDamage, NWObject oTarget, int nDC, SaveType tSaveType, NWObject oSaveVersus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getReflexAdjustedDamage(nDamage, oTarget, nDC, tSaveType, oSaveVersus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getReflexAdjustedDamage(int nDamage, NWObject oTarget, int nDC, SaveType tSaveType, NWObject oSaveVersus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getReflexAdjustedDamage");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getReflexAdjustedDamage(nDamage, oTarget, nDC, tSaveType, oSaveVersus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getReflexSavingThrow(NWObject oTarget)
        throws NotInContextException
    {
        return getReflexSavingThrow(oTarget, null, false);
    }

    public int
    getReflexSavingThrow(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getReflexSavingThrow(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getReflexSavingThrow(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getReflexSavingThrow");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getReflexSavingThrow(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getReputation(NWObject oSource, NWObject oTarget)
        throws NotInContextException
    {
        return getReputation(oSource, oTarget, null, false);
    }

    public int
    getReputation(NWObject oSource, NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getReputation(oSource, oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getReputation(NWObject oSource, NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getReputation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getReputation(oSource, oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getResRef(NWObject oObject)
        throws NotInContextException
    {
        return getResRef(oObject, null, false);
    }

    public String
    getResRef(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getResRef(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getResRef(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getResRef");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getResRef(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getSittingCreature(NWObject oChair)
        throws NotInContextException
    {
        return getSittingCreature(oChair, null, false);
    }

    public NWObject
    getSittingCreature(NWObject oChair, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getSittingCreature(oChair, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getSittingCreature(NWObject oChair, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSittingCreature");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getSittingCreature(oChair, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getSkillRank(int nSkill, NWObject oTarget, boolean bBaseSkillRank)
        throws NotInContextException
    {
        return getSkillRank(nSkill, oTarget, bBaseSkillRank, null, false);
    }

    public int
    getSkillRank(int nSkill, NWObject oTarget, boolean bBaseSkillRank, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getSkillRank(nSkill, oTarget, bBaseSkillRank, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getSkillRank(int nSkill, NWObject oTarget, boolean bBaseSkillRank, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSkillRank");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getSkillRank(nSkill, oTarget, bBaseSkillRank, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getSkyBox(NWObject oArea)
        throws NotInContextException
    {
        return getSkyBox(oArea, null, false);
    }

    public int
    getSkyBox(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getSkyBox(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getSkyBox(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSkyBox");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getSkyBox(oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getSpellCastItem()
        throws NotInContextException
    {
        return getSpellCastItem(null, false);
    }

    public NWObject
    getSpellCastItem(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getSpellCastItem(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getSpellCastItem(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSpellCastItem");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getSpellCastItem(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getSpellId()
        throws NotInContextException
    {
        return getSpellId(null, false);
    }

    public int
    getSpellId(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getSpellId(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getSpellId(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSpellId");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getSpellId(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getSpellResistance(NWObject oCreature)
        throws NotInContextException
    {
        return getSpellResistance(oCreature, null, false);
    }

    public int
    getSpellResistance(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getSpellResistance(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getSpellResistance(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSpellResistance");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getSpellResistance(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getSpellSaveDC()
        throws NotInContextException
    {
        return getSpellSaveDC(null, false);
    }

    public int
    getSpellSaveDC(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getSpellSaveDC(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getSpellSaveDC(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSpellSaveDC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getSpellSaveDC(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWLocation
    getSpellTargetLocation()
        throws NotInContextException
    {
        return getSpellTargetLocation(null, false);
    }

    public NWLocation
    getSpellTargetLocation(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getSpellTargetLocation(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWLocation
    getSpellTargetLocation(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSpellTargetLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getSpellTargetLocation(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getSpellTargetObject()
        throws NotInContextException
    {
        return getSpellTargetObject(null, false);
    }

    public NWObject
    getSpellTargetObject(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getSpellTargetObject(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getSpellTargetObject(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSpellTargetObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getSpellTargetObject(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getStandardFactionReputation(StandardFaction tStandardFaction, NWObject oCreature)
        throws NotInContextException
    {
        return getStandardFactionReputation(tStandardFaction, oCreature, null, false);
    }

    public int
    getStandardFactionReputation(StandardFaction tStandardFaction, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getStandardFactionReputation(tStandardFaction, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getStandardFactionReputation(StandardFaction tStandardFaction, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStandardFactionReputation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getStandardFactionReputation(tStandardFaction, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWLocation
    getStartingLocation()
        throws NotInContextException
    {
        return getStartingLocation(null, false);
    }

    public NWLocation
    getStartingLocation(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getStartingLocation(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWLocation
    getStartingLocation(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStartingLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getStartingLocation(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWN.Persistable
    getState(String key)
        throws StateNotAvailableException
    {
        return getState(key, null, false);
    }

    public NWN.Persistable
    getState(String key, java.util.Map<String, String> __ctx)
        throws StateNotAvailableException
    {
        return getState(key, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWN.Persistable
    getState(String key, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws StateNotAvailableException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getState");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getState(key, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getStealthMode(NWObject oCreature)
        throws NotInContextException
    {
        return getStealthMode(oCreature, null, false);
    }

    public int
    getStealthMode(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getStealthMode(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getStealthMode(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStealthMode");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getStealthMode(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getStolenFlag(NWObject oStolen)
        throws NotInContextException
    {
        return getStolenFlag(oStolen, null, false);
    }

    public boolean
    getStolenFlag(NWObject oStolen, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getStolenFlag(oStolen, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getStolenFlag(NWObject oStolen, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStolenFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getStolenFlag(oStolen, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getStoreGold(NWObject oidStore)
        throws NotInContextException
    {
        return getStoreGold(oidStore, null, false);
    }

    public int
    getStoreGold(NWObject oidStore, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getStoreGold(oidStore, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getStoreGold(NWObject oidStore, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStoreGold");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getStoreGold(oidStore, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getStoreIdentifyCost(NWObject oidStore)
        throws NotInContextException
    {
        return getStoreIdentifyCost(oidStore, null, false);
    }

    public int
    getStoreIdentifyCost(NWObject oidStore, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getStoreIdentifyCost(oidStore, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getStoreIdentifyCost(NWObject oidStore, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStoreIdentifyCost");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getStoreIdentifyCost(oidStore, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getStoreMaxBuyPrice(NWObject oidStore)
        throws NotInContextException
    {
        return getStoreMaxBuyPrice(oidStore, null, false);
    }

    public int
    getStoreMaxBuyPrice(NWObject oidStore, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getStoreMaxBuyPrice(oidStore, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getStoreMaxBuyPrice(NWObject oidStore, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStoreMaxBuyPrice");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getStoreMaxBuyPrice(oidStore, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    getStrRefSoundDuration(int nStrRef)
        throws NotInContextException
    {
        return getStrRefSoundDuration(nStrRef, null, false);
    }

    public double
    getStrRefSoundDuration(int nStrRef, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getStrRefSoundDuration(nStrRef, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    getStrRefSoundDuration(int nStrRef, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStrRefSoundDuration");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getStrRefSoundDuration(nStrRef, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getStringByStrRef(int nStrRef, Gender tGender)
        throws NotInContextException
    {
        return getStringByStrRef(nStrRef, tGender, null, false);
    }

    public String
    getStringByStrRef(int nStrRef, Gender tGender, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getStringByStrRef(nStrRef, tGender, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getStringByStrRef(int nStrRef, Gender tGender, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStringByStrRef");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getStringByStrRef(nStrRef, tGender, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getSubRace(NWObject oTarget)
        throws NotInContextException
    {
        return getSubRace(oTarget, null, false);
    }

    public String
    getSubRace(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getSubRace(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getSubRace(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSubRace");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getSubRace(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getTag(NWObject oObject)
        throws NotInContextException
    {
        return getTag(oObject, null, false);
    }

    public String
    getTag(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTag(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getTag(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTag(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TileMainLightColor
    getTileMainLight1Color(NWLocation lTile)
        throws NotInContextException
    {
        return getTileMainLight1Color(lTile, null, false);
    }

    public TileMainLightColor
    getTileMainLight1Color(NWLocation lTile, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTileMainLight1Color(lTile, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TileMainLightColor
    getTileMainLight1Color(NWLocation lTile, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTileMainLight1Color");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTileMainLight1Color(lTile, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TileMainLightColor
    getTileMainLight2Color(NWLocation lTile)
        throws NotInContextException
    {
        return getTileMainLight2Color(lTile, null, false);
    }

    public TileMainLightColor
    getTileMainLight2Color(NWLocation lTile, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTileMainLight2Color(lTile, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TileMainLightColor
    getTileMainLight2Color(NWLocation lTile, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTileMainLight2Color");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTileMainLight2Color(lTile, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TileSourceLightColor
    getTileSourceLight1Color(NWLocation lTile)
        throws NotInContextException
    {
        return getTileSourceLight1Color(lTile, null, false);
    }

    public TileSourceLightColor
    getTileSourceLight1Color(NWLocation lTile, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTileSourceLight1Color(lTile, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TileSourceLightColor
    getTileSourceLight1Color(NWLocation lTile, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTileSourceLight1Color");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTileSourceLight1Color(lTile, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TileSourceLightColor
    getTileSourceLight2Color(NWLocation lTile)
        throws NotInContextException
    {
        return getTileSourceLight2Color(lTile, null, false);
    }

    public TileSourceLightColor
    getTileSourceLight2Color(NWLocation lTile, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTileSourceLight2Color(lTile, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TileSourceLightColor
    getTileSourceLight2Color(NWLocation lTile, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTileSourceLight2Color");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTileSourceLight2Color(lTile, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getTilesetResRef(NWObject oArea)
        throws NotInContextException
    {
        return getTilesetResRef(oArea, null, false);
    }

    public String
    getTilesetResRef(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTilesetResRef(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getTilesetResRef(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTilesetResRef");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTilesetResRef(oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getTimeHour()
        throws NotInContextException
    {
        return getTimeHour(null, false);
    }

    public int
    getTimeHour(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTimeHour(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getTimeHour(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTimeHour");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTimeHour(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getTimeMillisecond()
        throws NotInContextException
    {
        return getTimeMillisecond(null, false);
    }

    public int
    getTimeMillisecond(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTimeMillisecond(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getTimeMillisecond(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTimeMillisecond");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTimeMillisecond(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getTimeMinute()
        throws NotInContextException
    {
        return getTimeMinute(null, false);
    }

    public int
    getTimeMinute(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTimeMinute(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getTimeMinute(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTimeMinute");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTimeMinute(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getTimeSecond()
        throws NotInContextException
    {
        return getTimeSecond(null, false);
    }

    public int
    getTimeSecond(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTimeSecond(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getTimeSecond(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTimeSecond");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTimeSecond(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getTotalDamageDealt()
        throws NotInContextException
    {
        return getTotalDamageDealt(null, false);
    }

    public int
    getTotalDamageDealt(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTotalDamageDealt(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getTotalDamageDealt(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTotalDamageDealt");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTotalDamageDealt(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getTransitionTarget(NWObject oTransition)
        throws NotInContextException
    {
        return getTransitionTarget(oTransition, null, false);
    }

    public NWObject
    getTransitionTarget(NWObject oTransition, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTransitionTarget(oTransition, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getTransitionTarget(NWObject oTransition, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransitionTarget");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTransitionTarget(oTransition, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getTrapActive(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapActive(oTrapObject, null, false);
    }

    public boolean
    getTrapActive(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapActive(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getTrapActive(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapActive");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapActive(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getTrapBaseType(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapBaseType(oTrapObject, null, false);
    }

    public int
    getTrapBaseType(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapBaseType(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getTrapBaseType(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapBaseType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapBaseType(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getTrapCreator(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapCreator(oTrapObject, null, false);
    }

    public NWObject
    getTrapCreator(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapCreator(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getTrapCreator(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapCreator");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapCreator(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getTrapDetectDC(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapDetectDC(oTrapObject, null, false);
    }

    public int
    getTrapDetectDC(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapDetectDC(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getTrapDetectDC(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapDetectDC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapDetectDC(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getTrapDetectable(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapDetectable(oTrapObject, null, false);
    }

    public boolean
    getTrapDetectable(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapDetectable(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getTrapDetectable(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapDetectable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapDetectable(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getTrapDetectedBy(NWObject oTrapObject, NWObject oCreature)
        throws NotInContextException
    {
        return getTrapDetectedBy(oTrapObject, oCreature, null, false);
    }

    public boolean
    getTrapDetectedBy(NWObject oTrapObject, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapDetectedBy(oTrapObject, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getTrapDetectedBy(NWObject oTrapObject, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapDetectedBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapDetectedBy(oTrapObject, oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getTrapDisarmDC(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapDisarmDC(oTrapObject, null, false);
    }

    public int
    getTrapDisarmDC(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapDisarmDC(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getTrapDisarmDC(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapDisarmDC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapDisarmDC(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getTrapDisarmable(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapDisarmable(oTrapObject, null, false);
    }

    public boolean
    getTrapDisarmable(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapDisarmable(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getTrapDisarmable(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapDisarmable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapDisarmable(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getTrapFlagged(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapFlagged(oTrapObject, null, false);
    }

    public boolean
    getTrapFlagged(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapFlagged(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getTrapFlagged(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapFlagged");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapFlagged(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    getTrapKeyTag(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapKeyTag(oTrapObject, null, false);
    }

    public String
    getTrapKeyTag(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapKeyTag(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    getTrapKeyTag(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapKeyTag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapKeyTag(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getTrapOneShot(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapOneShot(oTrapObject, null, false);
    }

    public boolean
    getTrapOneShot(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapOneShot(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getTrapOneShot(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapOneShot");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapOneShot(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getTrapRecoverable(NWObject oTrapObject)
        throws NotInContextException
    {
        return getTrapRecoverable(oTrapObject, null, false);
    }

    public boolean
    getTrapRecoverable(NWObject oTrapObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTrapRecoverable(oTrapObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getTrapRecoverable(NWObject oTrapObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTrapRecoverable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTrapRecoverable(oTrapObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getTurnResistanceHD(NWObject oUndead)
        throws NotInContextException
    {
        return getTurnResistanceHD(oUndead, null, false);
    }

    public int
    getTurnResistanceHD(NWObject oUndead, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getTurnResistanceHD(oUndead, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getTurnResistanceHD(NWObject oUndead, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTurnResistanceHD");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getTurnResistanceHD(oUndead, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getUseableFlag(NWObject oObject)
        throws NotInContextException
    {
        return getUseableFlag(oObject, null, false);
    }

    public boolean
    getUseableFlag(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getUseableFlag(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getUseableFlag(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getUseableFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getUseableFlag(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getUserDefinedEventNumber()
        throws NotInContextException
    {
        return getUserDefinedEventNumber(null, false);
    }

    public int
    getUserDefinedEventNumber(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getUserDefinedEventNumber(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getUserDefinedEventNumber(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getUserDefinedEventNumber");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getUserDefinedEventNumber(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    getWaypointByTag(String sWaypointTag)
        throws NotInContextException
    {
        return getWaypointByTag(sWaypointTag, null, false);
    }

    public NWObject
    getWaypointByTag(String sWaypointTag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getWaypointByTag(sWaypointTag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    getWaypointByTag(String sWaypointTag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getWaypointByTag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getWaypointByTag(sWaypointTag, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    getWeaponRanged(NWObject oItem)
        throws NotInContextException
    {
        return getWeaponRanged(oItem, null, false);
    }

    public boolean
    getWeaponRanged(NWObject oItem, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getWeaponRanged(oItem, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    getWeaponRanged(NWObject oItem, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getWeaponRanged");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getWeaponRanged(oItem, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public Weather
    getWeather(NWObject oArea)
        throws NotInContextException
    {
        return getWeather(oArea, null, false);
    }

    public Weather
    getWeather(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getWeather(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private Weather
    getWeather(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getWeather");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getWeather(oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getWeight(NWObject oTarget)
        throws NotInContextException
    {
        return getWeight(oTarget, null, false);
    }

    public int
    getWeight(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getWeight(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getWeight(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getWeight");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getWeight(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getWillSavingThrow(NWObject oTarget)
        throws NotInContextException
    {
        return getWillSavingThrow(oTarget, null, false);
    }

    public int
    getWillSavingThrow(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getWillSavingThrow(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getWillSavingThrow(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getWillSavingThrow");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getWillSavingThrow(oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    getXP(NWObject oCreature)
        throws NotInContextException
    {
        return getXP(oCreature, null, false);
    }

    public int
    getXP(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return getXP(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    getXP(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getXP");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.getXP(oCreature, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    giveGoldToCreature(NWObject oCreature, int nGP)
        throws NotInContextException
    {
        giveGoldToCreature(oCreature, nGP, null, false);
    }

    public void
    giveGoldToCreature(NWObject oCreature, int nGP, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        giveGoldToCreature(oCreature, nGP, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    giveGoldToCreature(NWObject oCreature, int nGP, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("giveGoldToCreature");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.giveGoldToCreature(oCreature, nGP, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    giveXPToCreature(NWObject oCreature, int nXpAmount)
        throws NotInContextException
    {
        giveXPToCreature(oCreature, nXpAmount, null, false);
    }

    public void
    giveXPToCreature(NWObject oCreature, int nXpAmount, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        giveXPToCreature(oCreature, nXpAmount, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    giveXPToCreature(NWObject oCreature, int nXpAmount, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("giveXPToCreature");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.giveXPToCreature(oCreature, nXpAmount, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    hasState(String key)
    {
        return hasState(key, null, false);
    }

    public boolean
    hasState(String key, java.util.Map<String, String> __ctx)
    {
        return hasState(key, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    hasState(String key, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("hasState");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.hasState(key, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    hoursToSeconds(int nHours)
        throws NotInContextException
    {
        return hoursToSeconds(nHours, null, false);
    }

    public double
    hoursToSeconds(int nHours, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return hoursToSeconds(nHours, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    hoursToSeconds(int nHours, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("hoursToSeconds");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.hoursToSeconds(nHours, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    incrementRemainingFeatUses(NWObject oCreature, int nFeat)
        throws NotInContextException
    {
        incrementRemainingFeatUses(oCreature, nFeat, null, false);
    }

    public void
    incrementRemainingFeatUses(NWObject oCreature, int nFeat, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        incrementRemainingFeatUses(oCreature, nFeat, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    incrementRemainingFeatUses(NWObject oCreature, int nFeat, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("incrementRemainingFeatUses");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.incrementRemainingFeatUses(oCreature, nFeat, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public boolean
    isInConversation(NWObject oObject)
        throws NotInContextException
    {
        return isInConversation(oObject, null, false);
    }

    public boolean
    isInConversation(NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return isInConversation(oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private boolean
    isInConversation(NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("isInConversation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.isInConversation(oObject, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyACBonus(int nBonus)
        throws NotInContextException
    {
        return itemPropertyACBonus(nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyACBonus(int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyACBonus(nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyACBonus(int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyACBonus");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyACBonus(nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyACBonusVsAlign(IPAlignGroup tIPAlignGroup, int nACBonus)
        throws NotInContextException
    {
        return itemPropertyACBonusVsAlign(tIPAlignGroup, nACBonus, null, false);
    }

    public NWItemProperty
    itemPropertyACBonusVsAlign(IPAlignGroup tIPAlignGroup, int nACBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyACBonusVsAlign(tIPAlignGroup, nACBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyACBonusVsAlign(IPAlignGroup tIPAlignGroup, int nACBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyACBonusVsAlign");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyACBonusVsAlign(tIPAlignGroup, nACBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyACBonusVsDmgType(IPDamageType tIPDamageType, int nACBonus)
        throws NotInContextException
    {
        return itemPropertyACBonusVsDmgType(tIPDamageType, nACBonus, null, false);
    }

    public NWItemProperty
    itemPropertyACBonusVsDmgType(IPDamageType tIPDamageType, int nACBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyACBonusVsDmgType(tIPDamageType, nACBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyACBonusVsDmgType(IPDamageType tIPDamageType, int nACBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyACBonusVsDmgType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyACBonusVsDmgType(tIPDamageType, nACBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyACBonusVsRace(IPRacialType tIPRacialType, int nACBonus)
        throws NotInContextException
    {
        return itemPropertyACBonusVsRace(tIPRacialType, nACBonus, null, false);
    }

    public NWItemProperty
    itemPropertyACBonusVsRace(IPRacialType tIPRacialType, int nACBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyACBonusVsRace(tIPRacialType, nACBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyACBonusVsRace(IPRacialType tIPRacialType, int nACBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyACBonusVsRace");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyACBonusVsRace(tIPRacialType, nACBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyACBonusVsSAlign(Alignment tAlignment, int nACBonus)
        throws NotInContextException
    {
        return itemPropertyACBonusVsSAlign(tAlignment, nACBonus, null, false);
    }

    public NWItemProperty
    itemPropertyACBonusVsSAlign(Alignment tAlignment, int nACBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyACBonusVsSAlign(tAlignment, nACBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyACBonusVsSAlign(Alignment tAlignment, int nACBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyACBonusVsSAlign");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyACBonusVsSAlign(tAlignment, nACBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyAbilityBonus(Ability tAbility, int nBonus)
        throws NotInContextException
    {
        return itemPropertyAbilityBonus(tAbility, nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyAbilityBonus(Ability tAbility, int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyAbilityBonus(tAbility, nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyAbilityBonus(Ability tAbility, int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyAbilityBonus");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyAbilityBonus(tAbility, nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyAdditional(int nAdditionalProperty)
        throws NotInContextException
    {
        return itemPropertyAdditional(nAdditionalProperty, null, false);
    }

    public NWItemProperty
    itemPropertyAdditional(int nAdditionalProperty, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyAdditional(nAdditionalProperty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyAdditional(int nAdditionalProperty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyAdditional");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyAdditional(nAdditionalProperty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyArcaneSpellFailure(int nModLevel)
        throws NotInContextException
    {
        return itemPropertyArcaneSpellFailure(nModLevel, null, false);
    }

    public NWItemProperty
    itemPropertyArcaneSpellFailure(int nModLevel, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyArcaneSpellFailure(nModLevel, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyArcaneSpellFailure(int nModLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyArcaneSpellFailure");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyArcaneSpellFailure(nModLevel, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyAttackBonus(int nBonus)
        throws NotInContextException
    {
        return itemPropertyAttackBonus(nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyAttackBonus(int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyAttackBonus(nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyAttackBonus(int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyAttackBonus");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyAttackBonus(nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyAttackBonusVsAlign(IPAlignGroup tIPAlignGroup, int nBonus)
        throws NotInContextException
    {
        return itemPropertyAttackBonusVsAlign(tIPAlignGroup, nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyAttackBonusVsAlign(IPAlignGroup tIPAlignGroup, int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyAttackBonusVsAlign(tIPAlignGroup, nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyAttackBonusVsAlign(IPAlignGroup tIPAlignGroup, int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyAttackBonusVsAlign");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyAttackBonusVsAlign(tIPAlignGroup, nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyAttackBonusVsRace(IPRacialType tIPRacialType, int nBonus)
        throws NotInContextException
    {
        return itemPropertyAttackBonusVsRace(tIPRacialType, nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyAttackBonusVsRace(IPRacialType tIPRacialType, int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyAttackBonusVsRace(tIPRacialType, nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyAttackBonusVsRace(IPRacialType tIPRacialType, int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyAttackBonusVsRace");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyAttackBonusVsRace(tIPRacialType, nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyAttackBonusVsSAlign(Alignment tAlignment, int nBonus)
        throws NotInContextException
    {
        return itemPropertyAttackBonusVsSAlign(tAlignment, nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyAttackBonusVsSAlign(Alignment tAlignment, int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyAttackBonusVsSAlign(tAlignment, nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyAttackBonusVsSAlign(Alignment tAlignment, int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyAttackBonusVsSAlign");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyAttackBonusVsSAlign(tAlignment, nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyAttackPenalty(int nPenalty)
        throws NotInContextException
    {
        return itemPropertyAttackPenalty(nPenalty, null, false);
    }

    public NWItemProperty
    itemPropertyAttackPenalty(int nPenalty, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyAttackPenalty(nPenalty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyAttackPenalty(int nPenalty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyAttackPenalty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyAttackPenalty(nPenalty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyBonusFeat(int nFeat)
        throws NotInContextException
    {
        return itemPropertyBonusFeat(nFeat, null, false);
    }

    public NWItemProperty
    itemPropertyBonusFeat(int nFeat, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyBonusFeat(nFeat, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyBonusFeat(int nFeat, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyBonusFeat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyBonusFeat(nFeat, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyBonusLevelSpell(int nClass, int nSpellLevel)
        throws NotInContextException
    {
        return itemPropertyBonusLevelSpell(nClass, nSpellLevel, null, false);
    }

    public NWItemProperty
    itemPropertyBonusLevelSpell(int nClass, int nSpellLevel, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyBonusLevelSpell(nClass, nSpellLevel, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyBonusLevelSpell(int nClass, int nSpellLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyBonusLevelSpell");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyBonusLevelSpell(nClass, nSpellLevel, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyBonusSavingThrow(int nBaseSaveType, int nBonus)
        throws NotInContextException
    {
        return itemPropertyBonusSavingThrow(nBaseSaveType, nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyBonusSavingThrow(int nBaseSaveType, int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyBonusSavingThrow(nBaseSaveType, nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyBonusSavingThrow(int nBaseSaveType, int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyBonusSavingThrow");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyBonusSavingThrow(nBaseSaveType, nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyBonusSavingThrowVsX(int nBonusType, int nBonus)
        throws NotInContextException
    {
        return itemPropertyBonusSavingThrowVsX(nBonusType, nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyBonusSavingThrowVsX(int nBonusType, int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyBonusSavingThrowVsX(nBonusType, nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyBonusSavingThrowVsX(int nBonusType, int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyBonusSavingThrowVsX");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyBonusSavingThrowVsX(nBonusType, nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyBonusSpellResistance(int nBonus)
        throws NotInContextException
    {
        return itemPropertyBonusSpellResistance(nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyBonusSpellResistance(int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyBonusSpellResistance(nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyBonusSpellResistance(int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyBonusSpellResistance");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyBonusSpellResistance(nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyCastSpell(int nSpell, int nNumUses)
        throws NotInContextException
    {
        return itemPropertyCastSpell(nSpell, nNumUses, null, false);
    }

    public NWItemProperty
    itemPropertyCastSpell(int nSpell, int nNumUses, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyCastSpell(nSpell, nNumUses, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyCastSpell(int nSpell, int nNumUses, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyCastSpell");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyCastSpell(nSpell, nNumUses, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyContainerReducedWeight(int nContainerType)
        throws NotInContextException
    {
        return itemPropertyContainerReducedWeight(nContainerType, null, false);
    }

    public NWItemProperty
    itemPropertyContainerReducedWeight(int nContainerType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyContainerReducedWeight(nContainerType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyContainerReducedWeight(int nContainerType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyContainerReducedWeight");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyContainerReducedWeight(nContainerType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDamageBonus(IPDamageType tIPDamageType, int nDamage)
        throws NotInContextException
    {
        return itemPropertyDamageBonus(tIPDamageType, nDamage, null, false);
    }

    public NWItemProperty
    itemPropertyDamageBonus(IPDamageType tIPDamageType, int nDamage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDamageBonus(tIPDamageType, nDamage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDamageBonus(IPDamageType tIPDamageType, int nDamage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDamageBonus");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDamageBonus(tIPDamageType, nDamage, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDamageBonusVsAlign(IPAlignGroup tIPAlignGroup, IPDamageType tIPDamageType, int nDamage)
        throws NotInContextException
    {
        return itemPropertyDamageBonusVsAlign(tIPAlignGroup, tIPDamageType, nDamage, null, false);
    }

    public NWItemProperty
    itemPropertyDamageBonusVsAlign(IPAlignGroup tIPAlignGroup, IPDamageType tIPDamageType, int nDamage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDamageBonusVsAlign(tIPAlignGroup, tIPDamageType, nDamage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDamageBonusVsAlign(IPAlignGroup tIPAlignGroup, IPDamageType tIPDamageType, int nDamage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDamageBonusVsAlign");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDamageBonusVsAlign(tIPAlignGroup, tIPDamageType, nDamage, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDamageBonusVsRace(IPRacialType tIPRacialType, IPDamageType tIPDamageType, int nDamage)
        throws NotInContextException
    {
        return itemPropertyDamageBonusVsRace(tIPRacialType, tIPDamageType, nDamage, null, false);
    }

    public NWItemProperty
    itemPropertyDamageBonusVsRace(IPRacialType tIPRacialType, IPDamageType tIPDamageType, int nDamage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDamageBonusVsRace(tIPRacialType, tIPDamageType, nDamage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDamageBonusVsRace(IPRacialType tIPRacialType, IPDamageType tIPDamageType, int nDamage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDamageBonusVsRace");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDamageBonusVsRace(tIPRacialType, tIPDamageType, nDamage, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDamageBonusVsSAlign(Alignment tAlignment, IPDamageType tIPDamageType, int nDamage)
        throws NotInContextException
    {
        return itemPropertyDamageBonusVsSAlign(tAlignment, tIPDamageType, nDamage, null, false);
    }

    public NWItemProperty
    itemPropertyDamageBonusVsSAlign(Alignment tAlignment, IPDamageType tIPDamageType, int nDamage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDamageBonusVsSAlign(tAlignment, tIPDamageType, nDamage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDamageBonusVsSAlign(Alignment tAlignment, IPDamageType tIPDamageType, int nDamage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDamageBonusVsSAlign");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDamageBonusVsSAlign(tAlignment, tIPDamageType, nDamage, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDamageImmunity(IPDamageType tIPDamageType, int nImmuneBonus)
        throws NotInContextException
    {
        return itemPropertyDamageImmunity(tIPDamageType, nImmuneBonus, null, false);
    }

    public NWItemProperty
    itemPropertyDamageImmunity(IPDamageType tIPDamageType, int nImmuneBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDamageImmunity(tIPDamageType, nImmuneBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDamageImmunity(IPDamageType tIPDamageType, int nImmuneBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDamageImmunity");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDamageImmunity(tIPDamageType, nImmuneBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDamagePenalty(int nPenalty)
        throws NotInContextException
    {
        return itemPropertyDamagePenalty(nPenalty, null, false);
    }

    public NWItemProperty
    itemPropertyDamagePenalty(int nPenalty, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDamagePenalty(nPenalty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDamagePenalty(int nPenalty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDamagePenalty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDamagePenalty(nPenalty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDamageReduction(int nEnhancement, int nHPSoak)
        throws NotInContextException
    {
        return itemPropertyDamageReduction(nEnhancement, nHPSoak, null, false);
    }

    public NWItemProperty
    itemPropertyDamageReduction(int nEnhancement, int nHPSoak, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDamageReduction(nEnhancement, nHPSoak, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDamageReduction(int nEnhancement, int nHPSoak, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDamageReduction");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDamageReduction(nEnhancement, nHPSoak, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDamageResistance(IPDamageType tIPDamageType, int nHPResist)
        throws NotInContextException
    {
        return itemPropertyDamageResistance(tIPDamageType, nHPResist, null, false);
    }

    public NWItemProperty
    itemPropertyDamageResistance(IPDamageType tIPDamageType, int nHPResist, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDamageResistance(tIPDamageType, nHPResist, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDamageResistance(IPDamageType tIPDamageType, int nHPResist, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDamageResistance");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDamageResistance(tIPDamageType, nHPResist, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDamageVulnerability(IPDamageType tIPDamageType, int nVulnerability)
        throws NotInContextException
    {
        return itemPropertyDamageVulnerability(tIPDamageType, nVulnerability, null, false);
    }

    public NWItemProperty
    itemPropertyDamageVulnerability(IPDamageType tIPDamageType, int nVulnerability, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDamageVulnerability(tIPDamageType, nVulnerability, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDamageVulnerability(IPDamageType tIPDamageType, int nVulnerability, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDamageVulnerability");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDamageVulnerability(tIPDamageType, nVulnerability, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDarkvision()
        throws NotInContextException
    {
        return itemPropertyDarkvision(null, false);
    }

    public NWItemProperty
    itemPropertyDarkvision(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDarkvision(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDarkvision(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDarkvision");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDarkvision(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDecreaseAC(int nModifierType, int nPenalty)
        throws NotInContextException
    {
        return itemPropertyDecreaseAC(nModifierType, nPenalty, null, false);
    }

    public NWItemProperty
    itemPropertyDecreaseAC(int nModifierType, int nPenalty, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDecreaseAC(nModifierType, nPenalty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDecreaseAC(int nModifierType, int nPenalty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDecreaseAC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDecreaseAC(nModifierType, nPenalty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDecreaseAbility(Ability tAbility, int nModifier)
        throws NotInContextException
    {
        return itemPropertyDecreaseAbility(tAbility, nModifier, null, false);
    }

    public NWItemProperty
    itemPropertyDecreaseAbility(Ability tAbility, int nModifier, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDecreaseAbility(tAbility, nModifier, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDecreaseAbility(Ability tAbility, int nModifier, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDecreaseAbility");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDecreaseAbility(tAbility, nModifier, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyDecreaseSkill(int nSkill, int nPenalty)
        throws NotInContextException
    {
        return itemPropertyDecreaseSkill(nSkill, nPenalty, null, false);
    }

    public NWItemProperty
    itemPropertyDecreaseSkill(int nSkill, int nPenalty, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyDecreaseSkill(nSkill, nPenalty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyDecreaseSkill(int nSkill, int nPenalty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyDecreaseSkill");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyDecreaseSkill(nSkill, nPenalty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyEnhancementBonus(int nEnhancementBonus)
        throws NotInContextException
    {
        return itemPropertyEnhancementBonus(nEnhancementBonus, null, false);
    }

    public NWItemProperty
    itemPropertyEnhancementBonus(int nEnhancementBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyEnhancementBonus(nEnhancementBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyEnhancementBonus(int nEnhancementBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyEnhancementBonus");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyEnhancementBonus(nEnhancementBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyEnhancementBonusVsAlign(IPAlignGroup tIPAlignGroup, int nBonus)
        throws NotInContextException
    {
        return itemPropertyEnhancementBonusVsAlign(tIPAlignGroup, nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyEnhancementBonusVsAlign(IPAlignGroup tIPAlignGroup, int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyEnhancementBonusVsAlign(tIPAlignGroup, nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyEnhancementBonusVsAlign(IPAlignGroup tIPAlignGroup, int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyEnhancementBonusVsAlign");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyEnhancementBonusVsAlign(tIPAlignGroup, nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyEnhancementBonusVsRace(IPRacialType tIPRacialType, int nBonus)
        throws NotInContextException
    {
        return itemPropertyEnhancementBonusVsRace(tIPRacialType, nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyEnhancementBonusVsRace(IPRacialType tIPRacialType, int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyEnhancementBonusVsRace(tIPRacialType, nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyEnhancementBonusVsRace(IPRacialType tIPRacialType, int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyEnhancementBonusVsRace");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyEnhancementBonusVsRace(tIPRacialType, nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyEnhancementBonusVsSAlign(Alignment tAlignment, int nBonus)
        throws NotInContextException
    {
        return itemPropertyEnhancementBonusVsSAlign(tAlignment, nBonus, null, false);
    }

    public NWItemProperty
    itemPropertyEnhancementBonusVsSAlign(Alignment tAlignment, int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyEnhancementBonusVsSAlign(tAlignment, nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyEnhancementBonusVsSAlign(Alignment tAlignment, int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyEnhancementBonusVsSAlign");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyEnhancementBonusVsSAlign(tAlignment, nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyEnhancementPenalty(int nPenalty)
        throws NotInContextException
    {
        return itemPropertyEnhancementPenalty(nPenalty, null, false);
    }

    public NWItemProperty
    itemPropertyEnhancementPenalty(int nPenalty, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyEnhancementPenalty(nPenalty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyEnhancementPenalty(int nPenalty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyEnhancementPenalty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyEnhancementPenalty(nPenalty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyExtraMeleeDamageType(IPDamageType tIPDamageType)
        throws NotInContextException
    {
        return itemPropertyExtraMeleeDamageType(tIPDamageType, null, false);
    }

    public NWItemProperty
    itemPropertyExtraMeleeDamageType(IPDamageType tIPDamageType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyExtraMeleeDamageType(tIPDamageType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyExtraMeleeDamageType(IPDamageType tIPDamageType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyExtraMeleeDamageType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyExtraMeleeDamageType(tIPDamageType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyExtraRangeDamageType(IPDamageType tIPDamageType)
        throws NotInContextException
    {
        return itemPropertyExtraRangeDamageType(tIPDamageType, null, false);
    }

    public NWItemProperty
    itemPropertyExtraRangeDamageType(IPDamageType tIPDamageType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyExtraRangeDamageType(tIPDamageType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyExtraRangeDamageType(IPDamageType tIPDamageType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyExtraRangeDamageType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyExtraRangeDamageType(tIPDamageType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyFreeAction()
        throws NotInContextException
    {
        return itemPropertyFreeAction(null, false);
    }

    public NWItemProperty
    itemPropertyFreeAction(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyFreeAction(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyFreeAction(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyFreeAction");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyFreeAction(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyHaste()
        throws NotInContextException
    {
        return itemPropertyHaste(null, false);
    }

    public NWItemProperty
    itemPropertyHaste(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyHaste(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyHaste(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyHaste");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyHaste(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyHealersKit(int nModifier)
        throws NotInContextException
    {
        return itemPropertyHealersKit(nModifier, null, false);
    }

    public NWItemProperty
    itemPropertyHealersKit(int nModifier, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyHealersKit(nModifier, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyHealersKit(int nModifier, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyHealersKit");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyHealersKit(nModifier, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyHolyAvenger()
        throws NotInContextException
    {
        return itemPropertyHolyAvenger(null, false);
    }

    public NWItemProperty
    itemPropertyHolyAvenger(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyHolyAvenger(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyHolyAvenger(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyHolyAvenger");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyHolyAvenger(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyImmunityMisc(IPMiscImmunityType tIPMiscImmunityType)
        throws NotInContextException
    {
        return itemPropertyImmunityMisc(tIPMiscImmunityType, null, false);
    }

    public NWItemProperty
    itemPropertyImmunityMisc(IPMiscImmunityType tIPMiscImmunityType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyImmunityMisc(tIPMiscImmunityType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyImmunityMisc(IPMiscImmunityType tIPMiscImmunityType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyImmunityMisc");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyImmunityMisc(tIPMiscImmunityType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyImmunityToSpellLevel(int nLevel)
        throws NotInContextException
    {
        return itemPropertyImmunityToSpellLevel(nLevel, null, false);
    }

    public NWItemProperty
    itemPropertyImmunityToSpellLevel(int nLevel, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyImmunityToSpellLevel(nLevel, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyImmunityToSpellLevel(int nLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyImmunityToSpellLevel");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyImmunityToSpellLevel(nLevel, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyImprovedEvasion()
        throws NotInContextException
    {
        return itemPropertyImprovedEvasion(null, false);
    }

    public NWItemProperty
    itemPropertyImprovedEvasion(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyImprovedEvasion(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyImprovedEvasion(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyImprovedEvasion");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyImprovedEvasion(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyKeen()
        throws NotInContextException
    {
        return itemPropertyKeen(null, false);
    }

    public NWItemProperty
    itemPropertyKeen(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyKeen(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyKeen(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyKeen");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyKeen(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyLight(int nBrightness, int nColor)
        throws NotInContextException
    {
        return itemPropertyLight(nBrightness, nColor, null, false);
    }

    public NWItemProperty
    itemPropertyLight(int nBrightness, int nColor, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyLight(nBrightness, nColor, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyLight(int nBrightness, int nColor, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyLight");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyLight(nBrightness, nColor, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyLimitUseByAlign(IPAlignGroup tIPAlignGroup)
        throws NotInContextException
    {
        return itemPropertyLimitUseByAlign(tIPAlignGroup, null, false);
    }

    public NWItemProperty
    itemPropertyLimitUseByAlign(IPAlignGroup tIPAlignGroup, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyLimitUseByAlign(tIPAlignGroup, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyLimitUseByAlign(IPAlignGroup tIPAlignGroup, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyLimitUseByAlign");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyLimitUseByAlign(tIPAlignGroup, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyLimitUseByClass(int nClass)
        throws NotInContextException
    {
        return itemPropertyLimitUseByClass(nClass, null, false);
    }

    public NWItemProperty
    itemPropertyLimitUseByClass(int nClass, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyLimitUseByClass(nClass, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyLimitUseByClass(int nClass, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyLimitUseByClass");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyLimitUseByClass(nClass, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyLimitUseByRace(IPRacialType tIPRacialType)
        throws NotInContextException
    {
        return itemPropertyLimitUseByRace(tIPRacialType, null, false);
    }

    public NWItemProperty
    itemPropertyLimitUseByRace(IPRacialType tIPRacialType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyLimitUseByRace(tIPRacialType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyLimitUseByRace(IPRacialType tIPRacialType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyLimitUseByRace");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyLimitUseByRace(tIPRacialType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyLimitUseBySAlign(Alignment tAlignment)
        throws NotInContextException
    {
        return itemPropertyLimitUseBySAlign(tAlignment, null, false);
    }

    public NWItemProperty
    itemPropertyLimitUseBySAlign(Alignment tAlignment, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyLimitUseBySAlign(tAlignment, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyLimitUseBySAlign(Alignment tAlignment, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyLimitUseBySAlign");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyLimitUseBySAlign(tAlignment, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyMassiveCritical(int nDamage)
        throws NotInContextException
    {
        return itemPropertyMassiveCritical(nDamage, null, false);
    }

    public NWItemProperty
    itemPropertyMassiveCritical(int nDamage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyMassiveCritical(nDamage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyMassiveCritical(int nDamage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyMassiveCritical");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyMassiveCritical(nDamage, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyMaterial(int nMaterialType)
        throws NotInContextException
    {
        return itemPropertyMaterial(nMaterialType, null, false);
    }

    public NWItemProperty
    itemPropertyMaterial(int nMaterialType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyMaterial(nMaterialType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyMaterial(int nMaterialType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyMaterial");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyMaterial(nMaterialType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyMaxRangeStrengthMod(int nModifier)
        throws NotInContextException
    {
        return itemPropertyMaxRangeStrengthMod(nModifier, null, false);
    }

    public NWItemProperty
    itemPropertyMaxRangeStrengthMod(int nModifier, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyMaxRangeStrengthMod(nModifier, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyMaxRangeStrengthMod(int nModifier, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyMaxRangeStrengthMod");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyMaxRangeStrengthMod(nModifier, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyMonsterDamage(int nDamage)
        throws NotInContextException
    {
        return itemPropertyMonsterDamage(nDamage, null, false);
    }

    public NWItemProperty
    itemPropertyMonsterDamage(int nDamage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyMonsterDamage(nDamage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyMonsterDamage(int nDamage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyMonsterDamage");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyMonsterDamage(nDamage, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyNoDamage()
        throws NotInContextException
    {
        return itemPropertyNoDamage(null, false);
    }

    public NWItemProperty
    itemPropertyNoDamage(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyNoDamage(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyNoDamage(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyNoDamage");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyNoDamage(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyOnHitCastSpell(int nSpell, int nLevel)
        throws NotInContextException
    {
        return itemPropertyOnHitCastSpell(nSpell, nLevel, null, false);
    }

    public NWItemProperty
    itemPropertyOnHitCastSpell(int nSpell, int nLevel, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyOnHitCastSpell(nSpell, nLevel, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyOnHitCastSpell(int nSpell, int nLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyOnHitCastSpell");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyOnHitCastSpell(nSpell, nLevel, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyOnHitProps(int nProperty, int nSaveDC, int nSpecial)
        throws NotInContextException
    {
        return itemPropertyOnHitProps(nProperty, nSaveDC, nSpecial, null, false);
    }

    public NWItemProperty
    itemPropertyOnHitProps(int nProperty, int nSaveDC, int nSpecial, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyOnHitProps(nProperty, nSaveDC, nSpecial, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyOnHitProps(int nProperty, int nSaveDC, int nSpecial, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyOnHitProps");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyOnHitProps(nProperty, nSaveDC, nSpecial, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyOnMonsterHitProperties(int nProperty, int nSpecial)
        throws NotInContextException
    {
        return itemPropertyOnMonsterHitProperties(nProperty, nSpecial, null, false);
    }

    public NWItemProperty
    itemPropertyOnMonsterHitProperties(int nProperty, int nSpecial, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyOnMonsterHitProperties(nProperty, nSpecial, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyOnMonsterHitProperties(int nProperty, int nSpecial, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyOnMonsterHitProperties");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyOnMonsterHitProperties(nProperty, nSpecial, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyQuality(int nQuality)
        throws NotInContextException
    {
        return itemPropertyQuality(nQuality, null, false);
    }

    public NWItemProperty
    itemPropertyQuality(int nQuality, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyQuality(nQuality, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyQuality(int nQuality, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyQuality");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyQuality(nQuality, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyReducedSavingThrow(int nBonusType, int nPenalty)
        throws NotInContextException
    {
        return itemPropertyReducedSavingThrow(nBonusType, nPenalty, null, false);
    }

    public NWItemProperty
    itemPropertyReducedSavingThrow(int nBonusType, int nPenalty, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyReducedSavingThrow(nBonusType, nPenalty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyReducedSavingThrow(int nBonusType, int nPenalty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyReducedSavingThrow");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyReducedSavingThrow(nBonusType, nPenalty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyReducedSavingThrowVsX(int nBaseSaveType, int nPenalty)
        throws NotInContextException
    {
        return itemPropertyReducedSavingThrowVsX(nBaseSaveType, nPenalty, null, false);
    }

    public NWItemProperty
    itemPropertyReducedSavingThrowVsX(int nBaseSaveType, int nPenalty, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyReducedSavingThrowVsX(nBaseSaveType, nPenalty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyReducedSavingThrowVsX(int nBaseSaveType, int nPenalty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyReducedSavingThrowVsX");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyReducedSavingThrowVsX(nBaseSaveType, nPenalty, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyRegeneration(int nRegenAmount)
        throws NotInContextException
    {
        return itemPropertyRegeneration(nRegenAmount, null, false);
    }

    public NWItemProperty
    itemPropertyRegeneration(int nRegenAmount, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyRegeneration(nRegenAmount, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyRegeneration(int nRegenAmount, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyRegeneration");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyRegeneration(nRegenAmount, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertySkillBonus(int nSkill, int nBonus)
        throws NotInContextException
    {
        return itemPropertySkillBonus(nSkill, nBonus, null, false);
    }

    public NWItemProperty
    itemPropertySkillBonus(int nSkill, int nBonus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertySkillBonus(nSkill, nBonus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertySkillBonus(int nSkill, int nBonus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertySkillBonus");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertySkillBonus(nSkill, nBonus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertySpecialWalk(int nWalkType)
        throws NotInContextException
    {
        return itemPropertySpecialWalk(nWalkType, null, false);
    }

    public NWItemProperty
    itemPropertySpecialWalk(int nWalkType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertySpecialWalk(nWalkType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertySpecialWalk(int nWalkType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertySpecialWalk");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertySpecialWalk(nWalkType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertySpellImmunitySchool(IPSpellSchool tIPSpellSchool)
        throws NotInContextException
    {
        return itemPropertySpellImmunitySchool(tIPSpellSchool, null, false);
    }

    public NWItemProperty
    itemPropertySpellImmunitySchool(IPSpellSchool tIPSpellSchool, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertySpellImmunitySchool(tIPSpellSchool, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertySpellImmunitySchool(IPSpellSchool tIPSpellSchool, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertySpellImmunitySchool");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertySpellImmunitySchool(tIPSpellSchool, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertySpellImmunitySpecific(int nSpell)
        throws NotInContextException
    {
        return itemPropertySpellImmunitySpecific(nSpell, null, false);
    }

    public NWItemProperty
    itemPropertySpellImmunitySpecific(int nSpell, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertySpellImmunitySpecific(nSpell, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertySpellImmunitySpecific(int nSpell, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertySpellImmunitySpecific");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertySpellImmunitySpecific(nSpell, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyThievesTools(int nModifier)
        throws NotInContextException
    {
        return itemPropertyThievesTools(nModifier, null, false);
    }

    public NWItemProperty
    itemPropertyThievesTools(int nModifier, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyThievesTools(nModifier, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyThievesTools(int nModifier, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyThievesTools");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyThievesTools(nModifier, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyTrap(int nTrapLevel, IPTrapType tIPTrapType)
        throws NotInContextException
    {
        return itemPropertyTrap(nTrapLevel, tIPTrapType, null, false);
    }

    public NWItemProperty
    itemPropertyTrap(int nTrapLevel, IPTrapType tIPTrapType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyTrap(nTrapLevel, tIPTrapType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyTrap(int nTrapLevel, IPTrapType tIPTrapType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyTrap");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyTrap(nTrapLevel, tIPTrapType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyTrueSeeing()
        throws NotInContextException
    {
        return itemPropertyTrueSeeing(null, false);
    }

    public NWItemProperty
    itemPropertyTrueSeeing(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyTrueSeeing(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyTrueSeeing(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyTrueSeeing");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyTrueSeeing(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyTurnResistance(int nModifier)
        throws NotInContextException
    {
        return itemPropertyTurnResistance(nModifier, null, false);
    }

    public NWItemProperty
    itemPropertyTurnResistance(int nModifier, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyTurnResistance(nModifier, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyTurnResistance(int nModifier, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyTurnResistance");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyTurnResistance(nModifier, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyUnlimitedAmmo(int nAmmoDamage)
        throws NotInContextException
    {
        return itemPropertyUnlimitedAmmo(nAmmoDamage, null, false);
    }

    public NWItemProperty
    itemPropertyUnlimitedAmmo(int nAmmoDamage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyUnlimitedAmmo(nAmmoDamage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyUnlimitedAmmo(int nAmmoDamage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyUnlimitedAmmo");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyUnlimitedAmmo(nAmmoDamage, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyVampiricRegeneration(int nRegenAmount)
        throws NotInContextException
    {
        return itemPropertyVampiricRegeneration(nRegenAmount, null, false);
    }

    public NWItemProperty
    itemPropertyVampiricRegeneration(int nRegenAmount, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyVampiricRegeneration(nRegenAmount, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyVampiricRegeneration(int nRegenAmount, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyVampiricRegeneration");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyVampiricRegeneration(nRegenAmount, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyVisualEffect(int nEffect)
        throws NotInContextException
    {
        return itemPropertyVisualEffect(nEffect, null, false);
    }

    public NWItemProperty
    itemPropertyVisualEffect(int nEffect, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyVisualEffect(nEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyVisualEffect(int nEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyVisualEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyVisualEffect(nEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyWeightIncrease(int nWeight)
        throws NotInContextException
    {
        return itemPropertyWeightIncrease(nWeight, null, false);
    }

    public NWItemProperty
    itemPropertyWeightIncrease(int nWeight, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyWeightIncrease(nWeight, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyWeightIncrease(int nWeight, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyWeightIncrease");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyWeightIncrease(nWeight, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWItemProperty
    itemPropertyWeightReduction(int nReduction)
        throws NotInContextException
    {
        return itemPropertyWeightReduction(nReduction, null, false);
    }

    public NWItemProperty
    itemPropertyWeightReduction(int nReduction, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return itemPropertyWeightReduction(nReduction, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWItemProperty
    itemPropertyWeightReduction(int nReduction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("itemPropertyWeightReduction");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.itemPropertyWeightReduction(nReduction, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    jumpToLocation(NWLocation lDestination)
        throws NotInContextException
    {
        jumpToLocation(lDestination, null, false);
    }

    public void
    jumpToLocation(NWLocation lDestination, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        jumpToLocation(lDestination, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    jumpToLocation(NWLocation lDestination, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("jumpToLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.jumpToLocation(lDestination, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    jumpToObject(NWObject oToJumpTo, boolean bWalkStraightLineToPoint)
        throws NotInContextException
    {
        jumpToObject(oToJumpTo, bWalkStraightLineToPoint, null, false);
    }

    public void
    jumpToObject(NWObject oToJumpTo, boolean bWalkStraightLineToPoint, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        jumpToObject(oToJumpTo, bWalkStraightLineToPoint, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    jumpToObject(NWObject oToJumpTo, boolean bWalkStraightLineToPoint, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("jumpToObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.jumpToObject(oToJumpTo, bWalkStraightLineToPoint, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    levelUpHenchman(NWObject oCreature, int nClass, boolean bReadyAllSpells, int nPackage)
        throws NotInContextException
    {
        return levelUpHenchman(oCreature, nClass, bReadyAllSpells, nPackage, null, false);
    }

    public int
    levelUpHenchman(NWObject oCreature, int nClass, boolean bReadyAllSpells, int nPackage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return levelUpHenchman(oCreature, nClass, bReadyAllSpells, nPackage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    levelUpHenchman(NWObject oCreature, int nClass, boolean bReadyAllSpells, int nPackage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("levelUpHenchman");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.levelUpHenchman(oCreature, nClass, bReadyAllSpells, nPackage, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    lineOfSightObject(NWObject oSource, NWObject oTarget)
        throws NotInContextException
    {
        return lineOfSightObject(oSource, oTarget, null, false);
    }

    public int
    lineOfSightObject(NWObject oSource, NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return lineOfSightObject(oSource, oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    lineOfSightObject(NWObject oSource, NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("lineOfSightObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.lineOfSightObject(oSource, oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    lineOfSightVector(NWVector vSource, NWVector vTarget)
        throws NotInContextException
    {
        return lineOfSightVector(vSource, vTarget, null, false);
    }

    public int
    lineOfSightVector(NWVector vSource, NWVector vTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return lineOfSightVector(vSource, vTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    lineOfSightVector(NWVector vSource, NWVector vTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("lineOfSightVector");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.lineOfSightVector(vSource, vTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    lockCameraDirection(NWObject oPlayer, boolean bLocked)
        throws NotInContextException
    {
        lockCameraDirection(oPlayer, bLocked, null, false);
    }

    public void
    lockCameraDirection(NWObject oPlayer, boolean bLocked, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        lockCameraDirection(oPlayer, bLocked, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    lockCameraDirection(NWObject oPlayer, boolean bLocked, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("lockCameraDirection");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.lockCameraDirection(oPlayer, bLocked, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    lockCameraDistance(NWObject oPlayer, boolean bLocked)
        throws NotInContextException
    {
        lockCameraDistance(oPlayer, bLocked, null, false);
    }

    public void
    lockCameraDistance(NWObject oPlayer, boolean bLocked, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        lockCameraDistance(oPlayer, bLocked, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    lockCameraDistance(NWObject oPlayer, boolean bLocked, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("lockCameraDistance");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.lockCameraDistance(oPlayer, bLocked, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    lockCameraPitch(NWObject oPlayer, boolean bLocked)
        throws NotInContextException
    {
        lockCameraPitch(oPlayer, bLocked, null, false);
    }

    public void
    lockCameraPitch(NWObject oPlayer, boolean bLocked, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        lockCameraPitch(oPlayer, bLocked, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    lockCameraPitch(NWObject oPlayer, boolean bLocked, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("lockCameraPitch");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.lockCameraPitch(oPlayer, bLocked, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    magicalEffect(NWEffect eEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return magicalEffect(eEffect, null, false);
    }

    public NWEffect
    magicalEffect(NWEffect eEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return magicalEffect(eEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    magicalEffect(NWEffect eEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("magicalEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.magicalEffect(eEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    musicBackgroundChangeDay(NWObject oArea, int nTrack)
        throws NotInContextException
    {
        musicBackgroundChangeDay(oArea, nTrack, null, false);
    }

    public void
    musicBackgroundChangeDay(NWObject oArea, int nTrack, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        musicBackgroundChangeDay(oArea, nTrack, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    musicBackgroundChangeDay(NWObject oArea, int nTrack, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBackgroundChangeDay");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.musicBackgroundChangeDay(oArea, nTrack, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    musicBackgroundChangeNight(NWObject oArea, int nTrack)
        throws NotInContextException
    {
        musicBackgroundChangeNight(oArea, nTrack, null, false);
    }

    public void
    musicBackgroundChangeNight(NWObject oArea, int nTrack, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        musicBackgroundChangeNight(oArea, nTrack, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    musicBackgroundChangeNight(NWObject oArea, int nTrack, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBackgroundChangeNight");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.musicBackgroundChangeNight(oArea, nTrack, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    musicBackgroundGetBattleTrack(NWObject oArea)
        throws NotInContextException
    {
        return musicBackgroundGetBattleTrack(oArea, null, false);
    }

    public int
    musicBackgroundGetBattleTrack(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return musicBackgroundGetBattleTrack(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    musicBackgroundGetBattleTrack(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBackgroundGetBattleTrack");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.musicBackgroundGetBattleTrack(oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    musicBackgroundGetDayTrack(NWObject oArea)
        throws NotInContextException
    {
        return musicBackgroundGetDayTrack(oArea, null, false);
    }

    public int
    musicBackgroundGetDayTrack(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return musicBackgroundGetDayTrack(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    musicBackgroundGetDayTrack(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBackgroundGetDayTrack");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.musicBackgroundGetDayTrack(oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    musicBackgroundGetNightTrack(NWObject oArea)
        throws NotInContextException
    {
        return musicBackgroundGetNightTrack(oArea, null, false);
    }

    public int
    musicBackgroundGetNightTrack(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return musicBackgroundGetNightTrack(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    musicBackgroundGetNightTrack(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBackgroundGetNightTrack");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.musicBackgroundGetNightTrack(oArea, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    musicBackgroundPlay(NWObject oArea)
        throws NotInContextException
    {
        musicBackgroundPlay(oArea, null, false);
    }

    public void
    musicBackgroundPlay(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        musicBackgroundPlay(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    musicBackgroundPlay(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBackgroundPlay");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.musicBackgroundPlay(oArea, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    musicBackgroundSetDelay(NWObject oArea, int nDelay)
        throws NotInContextException
    {
        musicBackgroundSetDelay(oArea, nDelay, null, false);
    }

    public void
    musicBackgroundSetDelay(NWObject oArea, int nDelay, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        musicBackgroundSetDelay(oArea, nDelay, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    musicBackgroundSetDelay(NWObject oArea, int nDelay, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBackgroundSetDelay");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.musicBackgroundSetDelay(oArea, nDelay, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    musicBackgroundStop(NWObject oArea)
        throws NotInContextException
    {
        musicBackgroundStop(oArea, null, false);
    }

    public void
    musicBackgroundStop(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        musicBackgroundStop(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    musicBackgroundStop(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBackgroundStop");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.musicBackgroundStop(oArea, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    musicBattleChange(NWObject oArea, int nTrack)
        throws NotInContextException
    {
        musicBattleChange(oArea, nTrack, null, false);
    }

    public void
    musicBattleChange(NWObject oArea, int nTrack, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        musicBattleChange(oArea, nTrack, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    musicBattleChange(NWObject oArea, int nTrack, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBattleChange");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.musicBattleChange(oArea, nTrack, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    musicBattlePlay(NWObject oArea)
        throws NotInContextException
    {
        musicBattlePlay(oArea, null, false);
    }

    public void
    musicBattlePlay(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        musicBattlePlay(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    musicBattlePlay(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBattlePlay");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.musicBattlePlay(oArea, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    musicBattleStop(NWObject oArea)
        throws NotInContextException
    {
        musicBattleStop(oArea, null, false);
    }

    public void
    musicBattleStop(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        musicBattleStop(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    musicBattleStop(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("musicBattleStop");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.musicBattleStop(oArea, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    nightToDay(NWObject oPlayer, double fTransitionTime)
        throws NotInContextException
    {
        nightToDay(oPlayer, fTransitionTime, null, false);
    }

    public void
    nightToDay(NWObject oPlayer, double fTransitionTime, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        nightToDay(oPlayer, fTransitionTime, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    nightToDay(NWObject oPlayer, double fTransitionTime, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("nightToDay");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.nightToDay(oPlayer, fTransitionTime, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    openInventory(NWObject oCreature, NWObject oPlayer)
        throws NotInContextException
    {
        openInventory(oCreature, oPlayer, null, false);
    }

    public void
    openInventory(NWObject oCreature, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        openInventory(oCreature, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    openInventory(NWObject oCreature, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("openInventory");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.openInventory(oCreature, oPlayer, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    openStore(NWObject oStore, NWObject oPC, int nBonusMarkUp, int nBonusMarkDown)
        throws NotInContextException
    {
        openStore(oStore, oPC, nBonusMarkUp, nBonusMarkDown, null, false);
    }

    public void
    openStore(NWObject oStore, NWObject oPC, int nBonusMarkUp, int nBonusMarkDown, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        openStore(oStore, oPC, nBonusMarkUp, nBonusMarkDown, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    openStore(NWObject oStore, NWObject oPC, int nBonusMarkUp, int nBonusMarkDown, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("openStore");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.openStore(oStore, oPC, nBonusMarkUp, nBonusMarkDown, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    playAnimation(int nAnimation, double fSpeed, double fSeconds)
        throws NotInContextException
    {
        playAnimation(nAnimation, fSpeed, fSeconds, null, false);
    }

    public void
    playAnimation(int nAnimation, double fSpeed, double fSeconds, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        playAnimation(nAnimation, fSpeed, fSeconds, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    playAnimation(int nAnimation, double fSpeed, double fSeconds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("playAnimation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.playAnimation(nAnimation, fSpeed, fSeconds, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    playSound(String sSoundName)
        throws NotInContextException
    {
        playSound(sSoundName, null, false);
    }

    public void
    playSound(String sSoundName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        playSound(sSoundName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    playSound(String sSoundName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("playSound");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.playSound(sSoundName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    playSoundByStrRef(int nStrRef, int nRunAsAction)
        throws NotInContextException
    {
        playSoundByStrRef(nStrRef, nRunAsAction, null, false);
    }

    public void
    playSoundByStrRef(int nStrRef, int nRunAsAction, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        playSoundByStrRef(nStrRef, nRunAsAction, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    playSoundByStrRef(int nStrRef, int nRunAsAction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("playSoundByStrRef");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.playSoundByStrRef(nStrRef, nRunAsAction, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    playVoiceChat(int nVoiceChatID, NWObject oTarget)
        throws NotInContextException
    {
        playVoiceChat(nVoiceChatID, oTarget, null, false);
    }

    public void
    playVoiceChat(int nVoiceChatID, NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        playVoiceChat(nVoiceChatID, oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    playVoiceChat(int nVoiceChatID, NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("playVoiceChat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.playVoiceChat(nVoiceChatID, oTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    popUpDeathGUIPanel(NWObject oPC, boolean bRespawnButtonEnabled, boolean bWaitForHelpButtonEnabled, int nHelpStringReference, String sHelpString)
        throws NotInContextException
    {
        popUpDeathGUIPanel(oPC, bRespawnButtonEnabled, bWaitForHelpButtonEnabled, nHelpStringReference, sHelpString, null, false);
    }

    public void
    popUpDeathGUIPanel(NWObject oPC, boolean bRespawnButtonEnabled, boolean bWaitForHelpButtonEnabled, int nHelpStringReference, String sHelpString, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        popUpDeathGUIPanel(oPC, bRespawnButtonEnabled, bWaitForHelpButtonEnabled, nHelpStringReference, sHelpString, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    popUpDeathGUIPanel(NWObject oPC, boolean bRespawnButtonEnabled, boolean bWaitForHelpButtonEnabled, int nHelpStringReference, String sHelpString, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("popUpDeathGUIPanel");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.popUpDeathGUIPanel(oPC, bRespawnButtonEnabled, bWaitForHelpButtonEnabled, nHelpStringReference, sHelpString, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    popUpGUIPanel(NWObject oPC, int nGUIPanel)
        throws NotInContextException
    {
        popUpGUIPanel(oPC, nGUIPanel, null, false);
    }

    public void
    popUpGUIPanel(NWObject oPC, int nGUIPanel, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        popUpGUIPanel(oPC, nGUIPanel, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    popUpGUIPanel(NWObject oPC, int nGUIPanel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("popUpGUIPanel");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.popUpGUIPanel(oPC, nGUIPanel, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    putState(String key, NWN.Persistable state)
    {
        putState(key, state, null, false);
    }

    public void
    putState(String key, NWN.Persistable state, java.util.Map<String, String> __ctx)
    {
        putState(key, state, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    putState(String key, NWN.Persistable state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.putState(key, state, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public String
    randomName(int nNameType)
        throws NotInContextException
    {
        return randomName(nNameType, null, false);
    }

    public String
    randomName(int nNameType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return randomName(nNameType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private String
    randomName(int nNameType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("randomName");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.randomName(nNameType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    recomputeStaticLighting(NWObject oArea)
        throws NotInContextException
    {
        recomputeStaticLighting(oArea, null, false);
    }

    public void
    recomputeStaticLighting(NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        recomputeStaticLighting(oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    recomputeStaticLighting(NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("recomputeStaticLighting");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.recomputeStaticLighting(oArea, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SavingThrowResult
    reflexSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus)
        throws NotInContextException
    {
        return reflexSave(oCreature, nDC, tSaveType, oSaveVersus, null, false);
    }

    public SavingThrowResult
    reflexSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return reflexSave(oCreature, nDC, tSaveType, oSaveVersus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SavingThrowResult
    reflexSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("reflexSave");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.reflexSave(oCreature, nDC, tSaveType, oSaveVersus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    removeEffect(NWObject oCreature, NWEffect eEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        removeEffect(oCreature, eEffect, null, false);
    }

    public void
    removeEffect(NWObject oCreature, NWEffect eEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        removeEffect(oCreature, eEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    removeEffect(NWObject oCreature, NWEffect eEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.removeEffect(oCreature, eEffect, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    removeFromParty(NWObject oPC)
        throws NotInContextException
    {
        removeFromParty(oPC, null, false);
    }

    public void
    removeFromParty(NWObject oPC, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        removeFromParty(oPC, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    removeFromParty(NWObject oPC, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeFromParty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.removeFromParty(oPC, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    removeHenchman(NWObject oMaster, NWObject oHenchman)
        throws NotInContextException
    {
        removeHenchman(oMaster, oHenchman, null, false);
    }

    public void
    removeHenchman(NWObject oMaster, NWObject oHenchman, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        removeHenchman(oMaster, oHenchman, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    removeHenchman(NWObject oMaster, NWObject oHenchman, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeHenchman");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.removeHenchman(oMaster, oHenchman, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    removeItemProperty(NWObject oItem, NWItemProperty ipProperty)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        removeItemProperty(oItem, ipProperty, null, false);
    }

    public void
    removeItemProperty(NWObject oItem, NWItemProperty ipProperty, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        removeItemProperty(oItem, ipProperty, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    removeItemProperty(NWObject oItem, NWItemProperty ipProperty, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeItemProperty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.removeItemProperty(oItem, ipProperty, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    removeJournalQuestEntry(String szPlotID, NWObject oCreature, boolean bAllPartyMembers, boolean bAllPlayers)
        throws NotInContextException
    {
        removeJournalQuestEntry(szPlotID, oCreature, bAllPartyMembers, bAllPlayers, null, false);
    }

    public void
    removeJournalQuestEntry(String szPlotID, NWObject oCreature, boolean bAllPartyMembers, boolean bAllPlayers, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        removeJournalQuestEntry(szPlotID, oCreature, bAllPartyMembers, bAllPlayers, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    removeJournalQuestEntry(String szPlotID, NWObject oCreature, boolean bAllPartyMembers, boolean bAllPlayers, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeJournalQuestEntry");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.removeJournalQuestEntry(szPlotID, oCreature, bAllPartyMembers, bAllPlayers, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    removeSummonedAssociate(NWObject oMaster, NWObject oAssociate)
        throws NotInContextException
    {
        removeSummonedAssociate(oMaster, oAssociate, null, false);
    }

    public void
    removeSummonedAssociate(NWObject oMaster, NWObject oAssociate, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        removeSummonedAssociate(oMaster, oAssociate, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    removeSummonedAssociate(NWObject oMaster, NWObject oAssociate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeSummonedAssociate");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.removeSummonedAssociate(oMaster, oAssociate, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    resistSpell(NWObject oCaster, NWObject oTarget)
        throws NotInContextException
    {
        return resistSpell(oCaster, oTarget, null, false);
    }

    public int
    resistSpell(NWObject oCaster, NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return resistSpell(oCaster, oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    resistSpell(NWObject oCaster, NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("resistSpell");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.resistSpell(oCaster, oTarget, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    restoreBaseAttackBonus(NWObject oCreature)
        throws NotInContextException
    {
        restoreBaseAttackBonus(oCreature, null, false);
    }

    public void
    restoreBaseAttackBonus(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        restoreBaseAttackBonus(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    restoreBaseAttackBonus(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("restoreBaseAttackBonus");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.restoreBaseAttackBonus(oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    restoreCameraFacing()
        throws NotInContextException
    {
        restoreCameraFacing(null, false);
    }

    public void
    restoreCameraFacing(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        restoreCameraFacing(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    restoreCameraFacing(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("restoreCameraFacing");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.restoreCameraFacing(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWObject
    retrieveCampaignObject(String sCampaignName, String sVarName, NWLocation locLocation, NWObject oOwner, NWObject oPlayer)
        throws NotInContextException
    {
        return retrieveCampaignObject(sCampaignName, sVarName, locLocation, oOwner, oPlayer, null, false);
    }

    public NWObject
    retrieveCampaignObject(String sCampaignName, String sVarName, NWLocation locLocation, NWObject oOwner, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return retrieveCampaignObject(sCampaignName, sVarName, locLocation, oOwner, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWObject
    retrieveCampaignObject(String sCampaignName, String sVarName, NWLocation locLocation, NWObject oOwner, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("retrieveCampaignObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.retrieveCampaignObject(sCampaignName, sVarName, locLocation, oOwner, oPlayer, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    roundsToSeconds(int nRounds)
        throws NotInContextException
    {
        return roundsToSeconds(nRounds, null, false);
    }

    public double
    roundsToSeconds(int nRounds, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return roundsToSeconds(nRounds, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    roundsToSeconds(int nRounds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("roundsToSeconds");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.roundsToSeconds(nRounds, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    sendMessageToAllDMs(String szMessage)
        throws NotInContextException
    {
        sendMessageToAllDMs(szMessage, null, false);
    }

    public void
    sendMessageToAllDMs(String szMessage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        sendMessageToAllDMs(szMessage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    sendMessageToAllDMs(String szMessage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("sendMessageToAllDMs");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.sendMessageToAllDMs(szMessage, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    sendMessageToPC(NWObject oPlayer, String szMessage)
        throws NotInContextException
    {
        sendMessageToPC(oPlayer, szMessage, null, false);
    }

    public void
    sendMessageToPC(NWObject oPlayer, String szMessage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        sendMessageToPC(oPlayer, szMessage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    sendMessageToPC(NWObject oPlayer, String szMessage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("sendMessageToPC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.sendMessageToPC(oPlayer, szMessage, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    sendMessageToPCByStrRef(NWObject oPlayer, int nStrRef)
        throws NotInContextException
    {
        sendMessageToPCByStrRef(oPlayer, nStrRef, null, false);
    }

    public void
    sendMessageToPCByStrRef(NWObject oPlayer, int nStrRef, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        sendMessageToPCByStrRef(oPlayer, nStrRef, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    sendMessageToPCByStrRef(NWObject oPlayer, int nStrRef, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("sendMessageToPCByStrRef");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.sendMessageToPCByStrRef(oPlayer, nStrRef, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setAILevel(NWObject oTarget, AILevel tAILevel)
        throws NotInContextException
    {
        setAILevel(oTarget, tAILevel, null, false);
    }

    public void
    setAILevel(NWObject oTarget, AILevel tAILevel, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setAILevel(oTarget, tAILevel, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setAILevel(NWObject oTarget, AILevel tAILevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setAILevel");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setAILevel(oTarget, tAILevel, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setActionMode(NWObject oCreature, ActionMode tActionMode, boolean bStatus)
        throws NotInContextException
    {
        setActionMode(oCreature, tActionMode, bStatus, null, false);
    }

    public void
    setActionMode(NWObject oCreature, ActionMode tActionMode, boolean bStatus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setActionMode(oCreature, tActionMode, bStatus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setActionMode(NWObject oCreature, ActionMode tActionMode, boolean bStatus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setActionMode");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setActionMode(oCreature, tActionMode, bStatus, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setAreaTransitionBMP(int nPredefinedAreaTransition, String sCustomAreaTransitionBMP)
        throws NotInContextException
    {
        setAreaTransitionBMP(nPredefinedAreaTransition, sCustomAreaTransitionBMP, null, false);
    }

    public void
    setAreaTransitionBMP(int nPredefinedAreaTransition, String sCustomAreaTransitionBMP, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setAreaTransitionBMP(nPredefinedAreaTransition, sCustomAreaTransitionBMP, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setAreaTransitionBMP(int nPredefinedAreaTransition, String sCustomAreaTransitionBMP, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setAreaTransitionBMP");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setAreaTransitionBMP(nPredefinedAreaTransition, sCustomAreaTransitionBMP, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setAssociateListenPatterns(NWObject oTarget)
        throws NotInContextException
    {
        setAssociateListenPatterns(oTarget, null, false);
    }

    public void
    setAssociateListenPatterns(NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setAssociateListenPatterns(oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setAssociateListenPatterns(NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setAssociateListenPatterns");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setAssociateListenPatterns(oTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setBaseAttackBonus(int nBaseAttackBonus, NWObject oCreature)
        throws NotInContextException
    {
        setBaseAttackBonus(nBaseAttackBonus, oCreature, null, false);
    }

    public void
    setBaseAttackBonus(int nBaseAttackBonus, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setBaseAttackBonus(nBaseAttackBonus, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setBaseAttackBonus(int nBaseAttackBonus, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setBaseAttackBonus");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setBaseAttackBonus(nBaseAttackBonus, oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCalendar(int nYear, int nMonth, int nDay)
        throws NotInContextException
    {
        setCalendar(nYear, nMonth, nDay, null, false);
    }

    public void
    setCalendar(int nYear, int nMonth, int nDay, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCalendar(nYear, nMonth, nDay, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCalendar(int nYear, int nMonth, int nDay, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCalendar");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCalendar(nYear, nMonth, nDay, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCameraFacing(double fDirection, double fDistance, double fPitch, int nTransitionType)
        throws NotInContextException
    {
        setCameraFacing(fDirection, fDistance, fPitch, nTransitionType, null, false);
    }

    public void
    setCameraFacing(double fDirection, double fDistance, double fPitch, int nTransitionType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCameraFacing(fDirection, fDistance, fPitch, nTransitionType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCameraFacing(double fDirection, double fDistance, double fPitch, int nTransitionType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCameraFacing");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCameraFacing(fDirection, fDistance, fPitch, nTransitionType, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCameraHeight(NWObject oPlayer, double fHeight)
        throws NotInContextException
    {
        setCameraHeight(oPlayer, fHeight, null, false);
    }

    public void
    setCameraHeight(NWObject oPlayer, double fHeight, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCameraHeight(oPlayer, fHeight, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCameraHeight(NWObject oPlayer, double fHeight, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCameraHeight");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCameraHeight(oPlayer, fHeight, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCameraMode(NWObject oPlayer, int nCameraMode)
        throws NotInContextException
    {
        setCameraMode(oPlayer, nCameraMode, null, false);
    }

    public void
    setCameraMode(NWObject oPlayer, int nCameraMode, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCameraMode(oPlayer, nCameraMode, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCameraMode(NWObject oPlayer, int nCameraMode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCameraMode");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCameraMode(oPlayer, nCameraMode, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCampaignFloat(String sCampaignName, String sVarName, double flFloat, NWObject oPlayer)
        throws NotInContextException
    {
        setCampaignFloat(sCampaignName, sVarName, flFloat, oPlayer, null, false);
    }

    public void
    setCampaignFloat(String sCampaignName, String sVarName, double flFloat, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCampaignFloat(sCampaignName, sVarName, flFloat, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCampaignFloat(String sCampaignName, String sVarName, double flFloat, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCampaignFloat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCampaignFloat(sCampaignName, sVarName, flFloat, oPlayer, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCampaignInt(String sCampaignName, String sVarName, int nInt, NWObject oPlayer)
        throws NotInContextException
    {
        setCampaignInt(sCampaignName, sVarName, nInt, oPlayer, null, false);
    }

    public void
    setCampaignInt(String sCampaignName, String sVarName, int nInt, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCampaignInt(sCampaignName, sVarName, nInt, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCampaignInt(String sCampaignName, String sVarName, int nInt, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCampaignInt");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCampaignInt(sCampaignName, sVarName, nInt, oPlayer, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCampaignLocation(String sCampaignName, String sVarName, NWLocation locLocation, NWObject oPlayer)
        throws NotInContextException
    {
        setCampaignLocation(sCampaignName, sVarName, locLocation, oPlayer, null, false);
    }

    public void
    setCampaignLocation(String sCampaignName, String sVarName, NWLocation locLocation, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCampaignLocation(sCampaignName, sVarName, locLocation, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCampaignLocation(String sCampaignName, String sVarName, NWLocation locLocation, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCampaignLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCampaignLocation(sCampaignName, sVarName, locLocation, oPlayer, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCampaignString(String sCampaignName, String sVarName, String sString, NWObject oPlayer)
        throws NotInContextException
    {
        setCampaignString(sCampaignName, sVarName, sString, oPlayer, null, false);
    }

    public void
    setCampaignString(String sCampaignName, String sVarName, String sString, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCampaignString(sCampaignName, sVarName, sString, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCampaignString(String sCampaignName, String sVarName, String sString, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCampaignString");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCampaignString(sCampaignName, sVarName, sString, oPlayer, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCampaignVector(String sCampaignName, String sVarName, NWVector vVector, NWObject oPlayer)
        throws NotInContextException
    {
        setCampaignVector(sCampaignName, sVarName, vVector, oPlayer, null, false);
    }

    public void
    setCampaignVector(String sCampaignName, String sVarName, NWVector vVector, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCampaignVector(sCampaignName, sVarName, vVector, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCampaignVector(String sCampaignName, String sVarName, NWVector vVector, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCampaignVector");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCampaignVector(sCampaignName, sVarName, vVector, oPlayer, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setColor(NWObject oObject, int nColorChannel, int nColorValue)
        throws NotInContextException
    {
        setColor(oObject, nColorChannel, nColorValue, null, false);
    }

    public void
    setColor(NWObject oObject, int nColorChannel, int nColorValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setColor(oObject, nColorChannel, nColorValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setColor(NWObject oObject, int nColorChannel, int nColorValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setColor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setColor(oObject, nColorChannel, nColorValue, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCommandable(boolean bCommandable, NWObject oTarget)
        throws NotInContextException
    {
        setCommandable(bCommandable, oTarget, null, false);
    }

    public void
    setCommandable(boolean bCommandable, NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCommandable(bCommandable, oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCommandable(boolean bCommandable, NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCommandable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCommandable(bCommandable, oTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCreatureAppearanceType(NWObject oCreature, int nAppearanceType)
        throws NotInContextException
    {
        setCreatureAppearanceType(oCreature, nAppearanceType, null, false);
    }

    public void
    setCreatureAppearanceType(NWObject oCreature, int nAppearanceType, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCreatureAppearanceType(oCreature, nAppearanceType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCreatureAppearanceType(NWObject oCreature, int nAppearanceType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCreatureAppearanceType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCreatureAppearanceType(oCreature, nAppearanceType, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCreatureBodyPart(CreaturePart tCreaturePart, int nModelNumber, NWObject oCreature)
        throws NotInContextException
    {
        setCreatureBodyPart(tCreaturePart, nModelNumber, oCreature, null, false);
    }

    public void
    setCreatureBodyPart(CreaturePart tCreaturePart, int nModelNumber, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCreatureBodyPart(tCreaturePart, nModelNumber, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCreatureBodyPart(CreaturePart tCreaturePart, int nModelNumber, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCreatureBodyPart");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCreatureBodyPart(tCreaturePart, nModelNumber, oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCreatureTailType(int nTailType, NWObject oCreature)
        throws NotInContextException
    {
        setCreatureTailType(nTailType, oCreature, null, false);
    }

    public void
    setCreatureTailType(int nTailType, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCreatureTailType(nTailType, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCreatureTailType(int nTailType, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCreatureTailType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCreatureTailType(nTailType, oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCreatureWingType(int nWingType, NWObject oCreature)
        throws NotInContextException
    {
        setCreatureWingType(nWingType, oCreature, null, false);
    }

    public void
    setCreatureWingType(int nWingType, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCreatureWingType(nWingType, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCreatureWingType(int nWingType, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCreatureWingType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCreatureWingType(nWingType, oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCustomToken(int nCustomTokenNumber, String sTokenValue)
        throws NotInContextException
    {
        setCustomToken(nCustomTokenNumber, sTokenValue, null, false);
    }

    public void
    setCustomToken(int nCustomTokenNumber, String sTokenValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCustomToken(nCustomTokenNumber, sTokenValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCustomToken(int nCustomTokenNumber, String sTokenValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCustomToken");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCustomToken(nCustomTokenNumber, sTokenValue, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCutsceneCameraMoveRate(NWObject oCreature, double fRate)
        throws NotInContextException
    {
        setCutsceneCameraMoveRate(oCreature, fRate, null, false);
    }

    public void
    setCutsceneCameraMoveRate(NWObject oCreature, double fRate, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCutsceneCameraMoveRate(oCreature, fRate, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCutsceneCameraMoveRate(NWObject oCreature, double fRate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCutsceneCameraMoveRate");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCutsceneCameraMoveRate(oCreature, fRate, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCutsceneMode(NWObject oCreature, boolean bInCutscene, boolean bLeftClickingEnabled)
        throws NotInContextException
    {
        setCutsceneMode(oCreature, bInCutscene, bLeftClickingEnabled, null, false);
    }

    public void
    setCutsceneMode(NWObject oCreature, boolean bInCutscene, boolean bLeftClickingEnabled, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setCutsceneMode(oCreature, bInCutscene, bLeftClickingEnabled, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCutsceneMode(NWObject oCreature, boolean bInCutscene, boolean bLeftClickingEnabled, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setCutsceneMode");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setCutsceneMode(oCreature, bInCutscene, bLeftClickingEnabled, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setDeity(NWObject oCreature, String sDeity)
        throws NotInContextException
    {
        setDeity(oCreature, sDeity, null, false);
    }

    public void
    setDeity(NWObject oCreature, String sDeity, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setDeity(oCreature, sDeity, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setDeity(NWObject oCreature, String sDeity, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setDeity");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setDeity(oCreature, sDeity, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setDescription(NWObject oObject, String sNewDescription, boolean bIdentifiedDescription)
        throws NotInContextException
    {
        setDescription(oObject, sNewDescription, bIdentifiedDescription, null, false);
    }

    public void
    setDescription(NWObject oObject, String sNewDescription, boolean bIdentifiedDescription, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setDescription(oObject, sNewDescription, bIdentifiedDescription, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setDescription(NWObject oObject, String sNewDescription, boolean bIdentifiedDescription, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setDescription");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setDescription(oObject, sNewDescription, bIdentifiedDescription, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setDroppableFlag(NWObject oItem, boolean bDroppable)
        throws NotInContextException
    {
        setDroppableFlag(oItem, bDroppable, null, false);
    }

    public void
    setDroppableFlag(NWObject oItem, boolean bDroppable, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setDroppableFlag(oItem, bDroppable, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setDroppableFlag(NWObject oItem, boolean bDroppable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setDroppableFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setDroppableFlag(oItem, bDroppable, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setEffectExposed(NWEffect eff, boolean bShown)
        throws InvalidEffectException,
               NotInContextException
    {
        setEffectExposed(eff, bShown, null, false);
    }

    public void
    setEffectExposed(NWEffect eff, boolean bShown, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        setEffectExposed(eff, bShown, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setEffectExposed(NWEffect eff, boolean bShown, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setEffectExposed");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setEffectExposed(eff, bShown, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setEffectIconShown(NWEffect eff, boolean bShown)
        throws InvalidEffectException,
               NotInContextException
    {
        setEffectIconShown(eff, bShown, null, false);
    }

    public void
    setEffectIconShown(NWEffect eff, boolean bShown, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        setEffectIconShown(eff, bShown, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setEffectIconShown(NWEffect eff, boolean bShown, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setEffectIconShown");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setEffectIconShown(eff, bShown, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setEffectInteger(NWEffect e, int index, int value)
        throws InvalidArgumentException,
               InvalidEffectException
    {
        setEffectInteger(e, index, value, null, false);
    }

    public void
    setEffectInteger(NWEffect e, int index, int value, java.util.Map<String, String> __ctx)
        throws InvalidArgumentException,
               InvalidEffectException
    {
        setEffectInteger(e, index, value, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setEffectInteger(NWEffect e, int index, int value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidArgumentException,
               InvalidEffectException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setEffectInteger");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setEffectInteger(e, index, value, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setEffectTrueType(NWEffect e, EffectTrueType t)
        throws InvalidItemPropertyException
    {
        setEffectTrueType(e, t, null, false);
    }

    public void
    setEffectTrueType(NWEffect e, EffectTrueType t, java.util.Map<String, String> __ctx)
        throws InvalidItemPropertyException
    {
        setEffectTrueType(e, t, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setEffectTrueType(NWEffect e, EffectTrueType t, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidItemPropertyException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setEffectTrueType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setEffectTrueType(e, t, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setEncounterActive(boolean bNewValue, NWObject oEncounter)
        throws NotInContextException
    {
        setEncounterActive(bNewValue, oEncounter, null, false);
    }

    public void
    setEncounterActive(boolean bNewValue, NWObject oEncounter, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setEncounterActive(bNewValue, oEncounter, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setEncounterActive(boolean bNewValue, NWObject oEncounter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setEncounterActive");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setEncounterActive(bNewValue, oEncounter, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setEncounterDifficulty(int nEncounterDifficulty, NWObject oEncounter)
        throws NotInContextException
    {
        setEncounterDifficulty(nEncounterDifficulty, oEncounter, null, false);
    }

    public void
    setEncounterDifficulty(int nEncounterDifficulty, NWObject oEncounter, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setEncounterDifficulty(nEncounterDifficulty, oEncounter, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setEncounterDifficulty(int nEncounterDifficulty, NWObject oEncounter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setEncounterDifficulty");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setEncounterDifficulty(nEncounterDifficulty, oEncounter, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setEncounterSpawnsCurrent(int nNewValue, NWObject oEncounter)
        throws NotInContextException
    {
        setEncounterSpawnsCurrent(nNewValue, oEncounter, null, false);
    }

    public void
    setEncounterSpawnsCurrent(int nNewValue, NWObject oEncounter, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setEncounterSpawnsCurrent(nNewValue, oEncounter, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setEncounterSpawnsCurrent(int nNewValue, NWObject oEncounter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setEncounterSpawnsCurrent");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setEncounterSpawnsCurrent(nNewValue, oEncounter, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setEncounterSpawnsMax(int nNewValue, NWObject oEncounter)
        throws NotInContextException
    {
        setEncounterSpawnsMax(nNewValue, oEncounter, null, false);
    }

    public void
    setEncounterSpawnsMax(int nNewValue, NWObject oEncounter, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setEncounterSpawnsMax(nNewValue, oEncounter, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setEncounterSpawnsMax(int nNewValue, NWObject oEncounter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setEncounterSpawnsMax");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setEncounterSpawnsMax(nNewValue, oEncounter, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFacing(double fDirection)
        throws NotInContextException
    {
        setFacing(fDirection, null, false);
    }

    public void
    setFacing(double fDirection, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setFacing(fDirection, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFacing(double fDirection, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setFacing");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setFacing(fDirection, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFacingPoint(NWVector vTarget)
        throws NotInContextException
    {
        setFacingPoint(vTarget, null, false);
    }

    public void
    setFacingPoint(NWVector vTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setFacingPoint(vTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFacingPoint(NWVector vTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setFacingPoint");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setFacingPoint(vTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFogAmount(int nFogType, int nFogAmount, NWObject oArea)
        throws NotInContextException
    {
        setFogAmount(nFogType, nFogAmount, oArea, null, false);
    }

    public void
    setFogAmount(int nFogType, int nFogAmount, NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setFogAmount(nFogType, nFogAmount, oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFogAmount(int nFogType, int nFogAmount, NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setFogAmount");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setFogAmount(nFogType, nFogAmount, oArea, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFogColor(int nFogType, int nFogColor, NWObject oArea)
        throws NotInContextException
    {
        setFogColor(nFogType, nFogColor, oArea, null, false);
    }

    public void
    setFogColor(int nFogType, int nFogColor, NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setFogColor(nFogType, nFogColor, oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFogColor(int nFogType, int nFogColor, NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setFogColor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setFogColor(nFogType, nFogColor, oArea, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFootstepType(int nFootstepType, NWObject oCreature)
        throws NotInContextException
    {
        setFootstepType(nFootstepType, oCreature, null, false);
    }

    public void
    setFootstepType(int nFootstepType, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setFootstepType(nFootstepType, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFootstepType(int nFootstepType, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setFootstepType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setFootstepType(nFootstepType, oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFortitudeSavingThrow(NWObject oObject, int nFortitudeSave)
        throws NotInContextException
    {
        setFortitudeSavingThrow(oObject, nFortitudeSave, null, false);
    }

    public void
    setFortitudeSavingThrow(NWObject oObject, int nFortitudeSave, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setFortitudeSavingThrow(oObject, nFortitudeSave, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFortitudeSavingThrow(NWObject oObject, int nFortitudeSave, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setFortitudeSavingThrow");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setFortitudeSavingThrow(oObject, nFortitudeSave, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setHardness(int nHardness, NWObject oObject)
        throws NotInContextException
    {
        setHardness(nHardness, oObject, null, false);
    }

    public void
    setHardness(int nHardness, NWObject oObject, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setHardness(nHardness, oObject, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setHardness(int nHardness, NWObject oObject, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setHardness");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setHardness(nHardness, oObject, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setIdentified(NWObject oItem, boolean bIdentified)
        throws NotInContextException
    {
        setIdentified(oItem, bIdentified, null, false);
    }

    public void
    setIdentified(NWObject oItem, boolean bIdentified, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setIdentified(oItem, bIdentified, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setIdentified(NWObject oItem, boolean bIdentified, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setIdentified");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setIdentified(oItem, bIdentified, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setImmortal(NWObject oCreature, boolean bImmortal)
        throws NotInContextException
    {
        setImmortal(oCreature, bImmortal, null, false);
    }

    public void
    setImmortal(NWObject oCreature, boolean bImmortal, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setImmortal(oCreature, bImmortal, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setImmortal(NWObject oCreature, boolean bImmortal, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setImmortal");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setImmortal(oCreature, bImmortal, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setInfiniteFlag(NWObject oItem, boolean bInfinite)
        throws NotInContextException
    {
        setInfiniteFlag(oItem, bInfinite, null, false);
    }

    public void
    setInfiniteFlag(NWObject oItem, boolean bInfinite, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setInfiniteFlag(oItem, bInfinite, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setInfiniteFlag(NWObject oItem, boolean bInfinite, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setInfiniteFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setInfiniteFlag(oItem, bInfinite, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setIsDestroyable(boolean bDestroyable, boolean bRaiseable, boolean bSelectableWhenDead)
        throws NotInContextException
    {
        setIsDestroyable(bDestroyable, bRaiseable, bSelectableWhenDead, null, false);
    }

    public void
    setIsDestroyable(boolean bDestroyable, boolean bRaiseable, boolean bSelectableWhenDead, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setIsDestroyable(bDestroyable, bRaiseable, bSelectableWhenDead, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setIsDestroyable(boolean bDestroyable, boolean bRaiseable, boolean bSelectableWhenDead, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setIsDestroyable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setIsDestroyable(bDestroyable, bRaiseable, bSelectableWhenDead, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setIsTemporaryEnemy(NWObject oTarget, NWObject oSource, boolean bDecays, double fDurationInSeconds)
        throws NotInContextException
    {
        setIsTemporaryEnemy(oTarget, oSource, bDecays, fDurationInSeconds, null, false);
    }

    public void
    setIsTemporaryEnemy(NWObject oTarget, NWObject oSource, boolean bDecays, double fDurationInSeconds, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setIsTemporaryEnemy(oTarget, oSource, bDecays, fDurationInSeconds, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setIsTemporaryEnemy(NWObject oTarget, NWObject oSource, boolean bDecays, double fDurationInSeconds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setIsTemporaryEnemy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setIsTemporaryEnemy(oTarget, oSource, bDecays, fDurationInSeconds, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setIsTemporaryFriend(NWObject oTarget, NWObject oSource, boolean bDecays, double fDurationInSeconds)
        throws NotInContextException
    {
        setIsTemporaryFriend(oTarget, oSource, bDecays, fDurationInSeconds, null, false);
    }

    public void
    setIsTemporaryFriend(NWObject oTarget, NWObject oSource, boolean bDecays, double fDurationInSeconds, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setIsTemporaryFriend(oTarget, oSource, bDecays, fDurationInSeconds, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setIsTemporaryFriend(NWObject oTarget, NWObject oSource, boolean bDecays, double fDurationInSeconds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setIsTemporaryFriend");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setIsTemporaryFriend(oTarget, oSource, bDecays, fDurationInSeconds, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setIsTemporaryNeutral(NWObject oTarget, NWObject oSource, boolean bDecays, double fDurationInSeconds)
        throws NotInContextException
    {
        setIsTemporaryNeutral(oTarget, oSource, bDecays, fDurationInSeconds, null, false);
    }

    public void
    setIsTemporaryNeutral(NWObject oTarget, NWObject oSource, boolean bDecays, double fDurationInSeconds, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setIsTemporaryNeutral(oTarget, oSource, bDecays, fDurationInSeconds, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setIsTemporaryNeutral(NWObject oTarget, NWObject oSource, boolean bDecays, double fDurationInSeconds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setIsTemporaryNeutral");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setIsTemporaryNeutral(oTarget, oSource, bDecays, fDurationInSeconds, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setItemCharges(NWObject oItem, int nCharges)
        throws NotInContextException
    {
        setItemCharges(oItem, nCharges, null, false);
    }

    public void
    setItemCharges(NWObject oItem, int nCharges, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setItemCharges(oItem, nCharges, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setItemCharges(NWObject oItem, int nCharges, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setItemCharges");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setItemCharges(oItem, nCharges, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setItemCursedFlag(NWObject oItem, boolean bCursed)
        throws NotInContextException
    {
        setItemCursedFlag(oItem, bCursed, null, false);
    }

    public void
    setItemCursedFlag(NWObject oItem, boolean bCursed, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setItemCursedFlag(oItem, bCursed, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setItemCursedFlag(NWObject oItem, boolean bCursed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setItemCursedFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setItemCursedFlag(oItem, bCursed, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setItemPropertyInteger(NWItemProperty e, int index, int value)
        throws InvalidArgumentException,
               InvalidItemPropertyException
    {
        setItemPropertyInteger(e, index, value, null, false);
    }

    public void
    setItemPropertyInteger(NWItemProperty e, int index, int value, java.util.Map<String, String> __ctx)
        throws InvalidArgumentException,
               InvalidItemPropertyException
    {
        setItemPropertyInteger(e, index, value, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setItemPropertyInteger(NWItemProperty e, int index, int value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidArgumentException,
               InvalidItemPropertyException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setItemPropertyInteger");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setItemPropertyInteger(e, index, value, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setItemStackSize(NWObject oItem, int nSize)
        throws NotInContextException
    {
        setItemStackSize(oItem, nSize, null, false);
    }

    public void
    setItemStackSize(NWObject oItem, int nSize, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setItemStackSize(oItem, nSize, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setItemStackSize(NWObject oItem, int nSize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setItemStackSize");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setItemStackSize(oItem, nSize, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setKeyRequiredFeedback(NWObject oObject, String sFeedbackMessage)
        throws NotInContextException
    {
        setKeyRequiredFeedback(oObject, sFeedbackMessage, null, false);
    }

    public void
    setKeyRequiredFeedback(NWObject oObject, String sFeedbackMessage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setKeyRequiredFeedback(oObject, sFeedbackMessage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setKeyRequiredFeedback(NWObject oObject, String sFeedbackMessage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setKeyRequiredFeedback");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setKeyRequiredFeedback(oObject, sFeedbackMessage, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setListenPattern(NWObject oObject, String sPattern, int nNumber)
        throws NotInContextException
    {
        setListenPattern(oObject, sPattern, nNumber, null, false);
    }

    public void
    setListenPattern(NWObject oObject, String sPattern, int nNumber, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setListenPattern(oObject, sPattern, nNumber, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setListenPattern(NWObject oObject, String sPattern, int nNumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setListenPattern");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setListenPattern(oObject, sPattern, nNumber, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setListening(NWObject oObject, boolean bValue)
        throws NotInContextException
    {
        setListening(oObject, bValue, null, false);
    }

    public void
    setListening(NWObject oObject, boolean bValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setListening(oObject, bValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setListening(NWObject oObject, boolean bValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setListening");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setListening(oObject, bValue, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLocalFloat(NWObject oObject, String sVarName, double fValue)
        throws NotInContextException
    {
        setLocalFloat(oObject, sVarName, fValue, null, false);
    }

    public void
    setLocalFloat(NWObject oObject, String sVarName, double fValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLocalFloat(oObject, sVarName, fValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLocalFloat(NWObject oObject, String sVarName, double fValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLocalFloat");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLocalFloat(oObject, sVarName, fValue, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLocalInt(NWObject oObject, String sVarName, int nValue)
        throws NotInContextException
    {
        setLocalInt(oObject, sVarName, nValue, null, false);
    }

    public void
    setLocalInt(NWObject oObject, String sVarName, int nValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLocalInt(oObject, sVarName, nValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLocalInt(NWObject oObject, String sVarName, int nValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLocalInt");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLocalInt(oObject, sVarName, nValue, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLocalLocation(NWObject oObject, String sVarName, NWLocation lValue)
        throws NotInContextException
    {
        setLocalLocation(oObject, sVarName, lValue, null, false);
    }

    public void
    setLocalLocation(NWObject oObject, String sVarName, NWLocation lValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLocalLocation(oObject, sVarName, lValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLocalLocation(NWObject oObject, String sVarName, NWLocation lValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLocalLocation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLocalLocation(oObject, sVarName, lValue, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLocalObject(NWObject oObject, String sVarName, NWObject oValue)
        throws NotInContextException
    {
        setLocalObject(oObject, sVarName, oValue, null, false);
    }

    public void
    setLocalObject(NWObject oObject, String sVarName, NWObject oValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLocalObject(oObject, sVarName, oValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLocalObject(NWObject oObject, String sVarName, NWObject oValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLocalObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLocalObject(oObject, sVarName, oValue, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLocalString(NWObject oObject, String sVarName, String sValue)
        throws NotInContextException
    {
        setLocalString(oObject, sVarName, sValue, null, false);
    }

    public void
    setLocalString(NWObject oObject, String sVarName, String sValue, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLocalString(oObject, sVarName, sValue, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLocalString(NWObject oObject, String sVarName, String sValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLocalString");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLocalString(oObject, sVarName, sValue, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLockKeyRequired(NWObject oObject, boolean bKeyRequired)
        throws NotInContextException
    {
        setLockKeyRequired(oObject, bKeyRequired, null, false);
    }

    public void
    setLockKeyRequired(NWObject oObject, boolean bKeyRequired, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLockKeyRequired(oObject, bKeyRequired, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLockKeyRequired(NWObject oObject, boolean bKeyRequired, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLockKeyRequired");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLockKeyRequired(oObject, bKeyRequired, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLockKeyTag(NWObject oObject, String sNewKeyTag)
        throws NotInContextException
    {
        setLockKeyTag(oObject, sNewKeyTag, null, false);
    }

    public void
    setLockKeyTag(NWObject oObject, String sNewKeyTag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLockKeyTag(oObject, sNewKeyTag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLockKeyTag(NWObject oObject, String sNewKeyTag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLockKeyTag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLockKeyTag(oObject, sNewKeyTag, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLockLockDC(NWObject oObject, int nNewLockDC)
        throws NotInContextException
    {
        setLockLockDC(oObject, nNewLockDC, null, false);
    }

    public void
    setLockLockDC(NWObject oObject, int nNewLockDC, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLockLockDC(oObject, nNewLockDC, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLockLockDC(NWObject oObject, int nNewLockDC, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLockLockDC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLockLockDC(oObject, nNewLockDC, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLockLockable(NWObject oObject, boolean bLockable)
        throws NotInContextException
    {
        setLockLockable(oObject, bLockable, null, false);
    }

    public void
    setLockLockable(NWObject oObject, boolean bLockable, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLockLockable(oObject, bLockable, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLockLockable(NWObject oObject, boolean bLockable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLockLockable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLockLockable(oObject, bLockable, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLockUnlockDC(NWObject oObject, int nNewUnlockDC)
        throws NotInContextException
    {
        setLockUnlockDC(oObject, nNewUnlockDC, null, false);
    }

    public void
    setLockUnlockDC(NWObject oObject, int nNewUnlockDC, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLockUnlockDC(oObject, nNewUnlockDC, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLockUnlockDC(NWObject oObject, int nNewUnlockDC, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLockUnlockDC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLockUnlockDC(oObject, nNewUnlockDC, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLocked(NWObject oTarget, boolean bLocked)
        throws NotInContextException
    {
        setLocked(oTarget, bLocked, null, false);
    }

    public void
    setLocked(NWObject oTarget, boolean bLocked, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLocked(oTarget, bLocked, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLocked(NWObject oTarget, boolean bLocked, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLocked");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLocked(oTarget, bLocked, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setLootable(NWObject oCreature, boolean bLootable)
        throws NotInContextException
    {
        setLootable(oCreature, bLootable, null, false);
    }

    public void
    setLootable(NWObject oCreature, boolean bLootable, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setLootable(oCreature, bLootable, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setLootable(NWObject oCreature, boolean bLootable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLootable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setLootable(oCreature, bLootable, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setMapPinEnabled(NWObject oMapPin, boolean bEnabled)
        throws NotInContextException
    {
        setMapPinEnabled(oMapPin, bEnabled, null, false);
    }

    public void
    setMapPinEnabled(NWObject oMapPin, boolean bEnabled, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setMapPinEnabled(oMapPin, bEnabled, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setMapPinEnabled(NWObject oMapPin, boolean bEnabled, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setMapPinEnabled");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setMapPinEnabled(oMapPin, bEnabled, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setMaxHenchmen(int nNumHenchmen)
        throws NotInContextException
    {
        setMaxHenchmen(nNumHenchmen, null, false);
    }

    public void
    setMaxHenchmen(int nNumHenchmen, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setMaxHenchmen(nNumHenchmen, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setMaxHenchmen(int nNumHenchmen, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setMaxHenchmen");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setMaxHenchmen(nNumHenchmen, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setModuleXPScale(int nXPScale)
        throws NotInContextException
    {
        setModuleXPScale(nXPScale, null, false);
    }

    public void
    setModuleXPScale(int nXPScale, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setModuleXPScale(nXPScale, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setModuleXPScale(int nXPScale, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setModuleXPScale");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setModuleXPScale(nXPScale, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setName(NWObject oObject, String sNewName)
        throws NotInContextException
    {
        setName(oObject, sNewName, null, false);
    }

    public void
    setName(NWObject oObject, String sNewName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setName(oObject, sNewName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setName(NWObject oObject, String sNewName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setName");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setName(oObject, sNewName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPCChatMessage(String sNewChatMessage)
        throws NotInContextException
    {
        setPCChatMessage(sNewChatMessage, null, false);
    }

    public void
    setPCChatMessage(String sNewChatMessage, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPCChatMessage(sNewChatMessage, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPCChatMessage(String sNewChatMessage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPCChatMessage");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPCChatMessage(sNewChatMessage, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPCChatVolume(TalkVolume tTalkVolume)
        throws NotInContextException
    {
        setPCChatVolume(tTalkVolume, null, false);
    }

    public void
    setPCChatVolume(TalkVolume tTalkVolume, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPCChatVolume(tTalkVolume, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPCChatVolume(TalkVolume tTalkVolume, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPCChatVolume");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPCChatVolume(tTalkVolume, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPCDislike(NWObject oPlayer, NWObject oTarget)
        throws NotInContextException
    {
        setPCDislike(oPlayer, oTarget, null, false);
    }

    public void
    setPCDislike(NWObject oPlayer, NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPCDislike(oPlayer, oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPCDislike(NWObject oPlayer, NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPCDislike");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPCDislike(oPlayer, oTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPCLike(NWObject oPlayer, NWObject oTarget)
        throws NotInContextException
    {
        setPCLike(oPlayer, oTarget, null, false);
    }

    public void
    setPCLike(NWObject oPlayer, NWObject oTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPCLike(oPlayer, oTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPCLike(NWObject oPlayer, NWObject oTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPCLike");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPCLike(oPlayer, oTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPanelButtonFlash(NWObject oPlayer, Button tButton, boolean bEnableFlash)
        throws NotInContextException
    {
        setPanelButtonFlash(oPlayer, tButton, bEnableFlash, null, false);
    }

    public void
    setPanelButtonFlash(NWObject oPlayer, Button tButton, boolean bEnableFlash, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPanelButtonFlash(oPlayer, tButton, bEnableFlash, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPanelButtonFlash(NWObject oPlayer, Button tButton, boolean bEnableFlash, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPanelButtonFlash");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPanelButtonFlash(oPlayer, tButton, bEnableFlash, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPhenoType(PhenoType tPhenoType, NWObject oCreature)
        throws NotInContextException
    {
        setPhenoType(tPhenoType, oCreature, null, false);
    }

    public void
    setPhenoType(PhenoType tPhenoType, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPhenoType(tPhenoType, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPhenoType(PhenoType tPhenoType, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPhenoType");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPhenoType(tPhenoType, oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPickpocketableFlag(NWObject oItem, boolean bPickpocketable)
        throws NotInContextException
    {
        setPickpocketableFlag(oItem, bPickpocketable, null, false);
    }

    public void
    setPickpocketableFlag(NWObject oItem, boolean bPickpocketable, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPickpocketableFlag(oItem, bPickpocketable, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPickpocketableFlag(NWObject oItem, boolean bPickpocketable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPickpocketableFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPickpocketableFlag(oItem, bPickpocketable, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPlaceableIllumination(NWObject oPlaceable, boolean bIlluminate)
        throws NotInContextException
    {
        setPlaceableIllumination(oPlaceable, bIlluminate, null, false);
    }

    public void
    setPlaceableIllumination(NWObject oPlaceable, boolean bIlluminate, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPlaceableIllumination(oPlaceable, bIlluminate, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPlaceableIllumination(NWObject oPlaceable, boolean bIlluminate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPlaceableIllumination");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPlaceableIllumination(oPlaceable, bIlluminate, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPlotFlag(NWObject oTarget, boolean bPlotFlag)
        throws NotInContextException
    {
        setPlotFlag(oTarget, bPlotFlag, null, false);
    }

    public void
    setPlotFlag(NWObject oTarget, boolean bPlotFlag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPlotFlag(oTarget, bPlotFlag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPlotFlag(NWObject oTarget, boolean bPlotFlag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPlotFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPlotFlag(oTarget, bPlotFlag, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPortraitId(NWObject oTarget, int nPortraitId)
        throws NotInContextException
    {
        setPortraitId(oTarget, nPortraitId, null, false);
    }

    public void
    setPortraitId(NWObject oTarget, int nPortraitId, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPortraitId(oTarget, nPortraitId, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPortraitId(NWObject oTarget, int nPortraitId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPortraitId");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPortraitId(oTarget, nPortraitId, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setPortraitResRef(NWObject oTarget, String sPortraitResRef)
        throws NotInContextException
    {
        setPortraitResRef(oTarget, sPortraitResRef, null, false);
    }

    public void
    setPortraitResRef(NWObject oTarget, String sPortraitResRef, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setPortraitResRef(oTarget, sPortraitResRef, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setPortraitResRef(NWObject oTarget, String sPortraitResRef, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPortraitResRef");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setPortraitResRef(oTarget, sPortraitResRef, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setReflexSavingThrow(NWObject oObject, int nReflexSave)
        throws NotInContextException
    {
        setReflexSavingThrow(oObject, nReflexSave, null, false);
    }

    public void
    setReflexSavingThrow(NWObject oObject, int nReflexSave, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setReflexSavingThrow(oObject, nReflexSave, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setReflexSavingThrow(NWObject oObject, int nReflexSave, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setReflexSavingThrow");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setReflexSavingThrow(oObject, nReflexSave, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setSkyBox(int nSkyBox, NWObject oArea)
        throws NotInContextException
    {
        setSkyBox(nSkyBox, oArea, null, false);
    }

    public void
    setSkyBox(int nSkyBox, NWObject oArea, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setSkyBox(nSkyBox, oArea, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setSkyBox(int nSkyBox, NWObject oArea, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setSkyBox");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setSkyBox(nSkyBox, oArea, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setStandardFactionReputation(StandardFaction tStandardFaction, int nNewReputation, NWObject oCreature)
        throws NotInContextException
    {
        setStandardFactionReputation(tStandardFaction, nNewReputation, oCreature, null, false);
    }

    public void
    setStandardFactionReputation(StandardFaction tStandardFaction, int nNewReputation, NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setStandardFactionReputation(tStandardFaction, nNewReputation, oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setStandardFactionReputation(StandardFaction tStandardFaction, int nNewReputation, NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setStandardFactionReputation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setStandardFactionReputation(tStandardFaction, nNewReputation, oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setStolenFlag(NWObject oItem, boolean bStolenFlag)
        throws NotInContextException
    {
        setStolenFlag(oItem, bStolenFlag, null, false);
    }

    public void
    setStolenFlag(NWObject oItem, boolean bStolenFlag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setStolenFlag(oItem, bStolenFlag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setStolenFlag(NWObject oItem, boolean bStolenFlag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setStolenFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setStolenFlag(oItem, bStolenFlag, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setStoreGold(NWObject oidStore, int nGold)
        throws NotInContextException
    {
        setStoreGold(oidStore, nGold, null, false);
    }

    public void
    setStoreGold(NWObject oidStore, int nGold, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setStoreGold(oidStore, nGold, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setStoreGold(NWObject oidStore, int nGold, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setStoreGold");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setStoreGold(oidStore, nGold, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setStoreIdentifyCost(NWObject oidStore, int nCost)
        throws NotInContextException
    {
        setStoreIdentifyCost(oidStore, nCost, null, false);
    }

    public void
    setStoreIdentifyCost(NWObject oidStore, int nCost, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setStoreIdentifyCost(oidStore, nCost, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setStoreIdentifyCost(NWObject oidStore, int nCost, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setStoreIdentifyCost");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setStoreIdentifyCost(oidStore, nCost, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setStoreMaxBuyPrice(NWObject oidStore, int nMaxBuy)
        throws NotInContextException
    {
        setStoreMaxBuyPrice(oidStore, nMaxBuy, null, false);
    }

    public void
    setStoreMaxBuyPrice(NWObject oidStore, int nMaxBuy, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setStoreMaxBuyPrice(oidStore, nMaxBuy, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setStoreMaxBuyPrice(NWObject oidStore, int nMaxBuy, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setStoreMaxBuyPrice");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setStoreMaxBuyPrice(oidStore, nMaxBuy, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setSubRace(NWObject oCreature, String sSubRace)
        throws NotInContextException
    {
        setSubRace(oCreature, sSubRace, null, false);
    }

    public void
    setSubRace(NWObject oCreature, String sSubRace, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setSubRace(oCreature, sSubRace, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setSubRace(NWObject oCreature, String sSubRace, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setSubRace");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setSubRace(oCreature, sSubRace, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTileMainLightColor(NWLocation lTileLocation, TileMainLightColor nMainLight1Color, TileMainLightColor nMainLight2Color)
        throws NotInContextException
    {
        setTileMainLightColor(lTileLocation, nMainLight1Color, nMainLight2Color, null, false);
    }

    public void
    setTileMainLightColor(NWLocation lTileLocation, TileMainLightColor nMainLight1Color, TileMainLightColor nMainLight2Color, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTileMainLightColor(lTileLocation, nMainLight1Color, nMainLight2Color, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTileMainLightColor(NWLocation lTileLocation, TileMainLightColor nMainLight1Color, TileMainLightColor nMainLight2Color, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTileMainLightColor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTileMainLightColor(lTileLocation, nMainLight1Color, nMainLight2Color, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTileSourceLightColor(NWLocation lTileLocation, TileSourceLightColor nSourceLight1Color, TileSourceLightColor nSourceLight2Color)
        throws NotInContextException
    {
        setTileSourceLightColor(lTileLocation, nSourceLight1Color, nSourceLight2Color, null, false);
    }

    public void
    setTileSourceLightColor(NWLocation lTileLocation, TileSourceLightColor nSourceLight1Color, TileSourceLightColor nSourceLight2Color, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTileSourceLightColor(lTileLocation, nSourceLight1Color, nSourceLight2Color, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTileSourceLightColor(NWLocation lTileLocation, TileSourceLightColor nSourceLight1Color, TileSourceLightColor nSourceLight2Color, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTileSourceLightColor");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTileSourceLightColor(lTileLocation, nSourceLight1Color, nSourceLight2Color, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTime(int nHour, int nMinute, int nSecond, int nMillisecond)
        throws NotInContextException
    {
        setTime(nHour, nMinute, nSecond, nMillisecond, null, false);
    }

    public void
    setTime(int nHour, int nMinute, int nSecond, int nMillisecond, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTime(nHour, nMinute, nSecond, nMillisecond, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTime(int nHour, int nMinute, int nSecond, int nMillisecond, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTime");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTime(nHour, nMinute, nSecond, nMillisecond, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTrapActive(NWObject oTrapObject, boolean bActive)
        throws NotInContextException
    {
        setTrapActive(oTrapObject, bActive, null, false);
    }

    public void
    setTrapActive(NWObject oTrapObject, boolean bActive, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTrapActive(oTrapObject, bActive, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTrapActive(NWObject oTrapObject, boolean bActive, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTrapActive");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTrapActive(oTrapObject, bActive, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTrapDetectDC(NWObject oTrapObject, int nDetectDC)
        throws NotInContextException
    {
        setTrapDetectDC(oTrapObject, nDetectDC, null, false);
    }

    public void
    setTrapDetectDC(NWObject oTrapObject, int nDetectDC, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTrapDetectDC(oTrapObject, nDetectDC, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTrapDetectDC(NWObject oTrapObject, int nDetectDC, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTrapDetectDC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTrapDetectDC(oTrapObject, nDetectDC, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTrapDetectable(NWObject oTrapObject, boolean bDetectable)
        throws NotInContextException
    {
        setTrapDetectable(oTrapObject, bDetectable, null, false);
    }

    public void
    setTrapDetectable(NWObject oTrapObject, boolean bDetectable, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTrapDetectable(oTrapObject, bDetectable, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTrapDetectable(NWObject oTrapObject, boolean bDetectable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTrapDetectable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTrapDetectable(oTrapObject, bDetectable, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    setTrapDetectedBy(NWObject oTrap, NWObject oDetector, boolean bDetected)
        throws NotInContextException
    {
        return setTrapDetectedBy(oTrap, oDetector, bDetected, null, false);
    }

    public int
    setTrapDetectedBy(NWObject oTrap, NWObject oDetector, boolean bDetected, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return setTrapDetectedBy(oTrap, oDetector, bDetected, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    setTrapDetectedBy(NWObject oTrap, NWObject oDetector, boolean bDetected, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTrapDetectedBy");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.setTrapDetectedBy(oTrap, oDetector, bDetected, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTrapDisabled(NWObject oTrap)
        throws NotInContextException
    {
        setTrapDisabled(oTrap, null, false);
    }

    public void
    setTrapDisabled(NWObject oTrap, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTrapDisabled(oTrap, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTrapDisabled(NWObject oTrap, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTrapDisabled");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTrapDisabled(oTrap, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTrapDisarmDC(NWObject oTrapObject, int nDisarmDC)
        throws NotInContextException
    {
        setTrapDisarmDC(oTrapObject, nDisarmDC, null, false);
    }

    public void
    setTrapDisarmDC(NWObject oTrapObject, int nDisarmDC, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTrapDisarmDC(oTrapObject, nDisarmDC, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTrapDisarmDC(NWObject oTrapObject, int nDisarmDC, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTrapDisarmDC");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTrapDisarmDC(oTrapObject, nDisarmDC, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTrapDisarmable(NWObject oTrapObject, boolean bDisarmable)
        throws NotInContextException
    {
        setTrapDisarmable(oTrapObject, bDisarmable, null, false);
    }

    public void
    setTrapDisarmable(NWObject oTrapObject, boolean bDisarmable, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTrapDisarmable(oTrapObject, bDisarmable, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTrapDisarmable(NWObject oTrapObject, boolean bDisarmable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTrapDisarmable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTrapDisarmable(oTrapObject, bDisarmable, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTrapKeyTag(NWObject oTrapObject, String sKeyTag)
        throws NotInContextException
    {
        setTrapKeyTag(oTrapObject, sKeyTag, null, false);
    }

    public void
    setTrapKeyTag(NWObject oTrapObject, String sKeyTag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTrapKeyTag(oTrapObject, sKeyTag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTrapKeyTag(NWObject oTrapObject, String sKeyTag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTrapKeyTag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTrapKeyTag(oTrapObject, sKeyTag, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTrapOneShot(NWObject oTrapObject, boolean bOneShot)
        throws NotInContextException
    {
        setTrapOneShot(oTrapObject, bOneShot, null, false);
    }

    public void
    setTrapOneShot(NWObject oTrapObject, boolean bOneShot, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTrapOneShot(oTrapObject, bOneShot, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTrapOneShot(NWObject oTrapObject, boolean bOneShot, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTrapOneShot");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTrapOneShot(oTrapObject, bOneShot, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTrapRecoverable(NWObject oTrapObject, boolean bRecoverable)
        throws NotInContextException
    {
        setTrapRecoverable(oTrapObject, bRecoverable, null, false);
    }

    public void
    setTrapRecoverable(NWObject oTrapObject, boolean bRecoverable, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setTrapRecoverable(oTrapObject, bRecoverable, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTrapRecoverable(NWObject oTrapObject, boolean bRecoverable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTrapRecoverable");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setTrapRecoverable(oTrapObject, bRecoverable, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setUseableFlag(NWObject oPlaceable, boolean bUseableFlag)
        throws NotInContextException
    {
        setUseableFlag(oPlaceable, bUseableFlag, null, false);
    }

    public void
    setUseableFlag(NWObject oPlaceable, boolean bUseableFlag, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setUseableFlag(oPlaceable, bUseableFlag, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setUseableFlag(NWObject oPlaceable, boolean bUseableFlag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setUseableFlag");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setUseableFlag(oPlaceable, bUseableFlag, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setWeather(NWObject oTarget, Weather tWeather)
        throws NotInContextException
    {
        setWeather(oTarget, tWeather, null, false);
    }

    public void
    setWeather(NWObject oTarget, Weather tWeather, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setWeather(oTarget, tWeather, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setWeather(NWObject oTarget, Weather tWeather, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setWeather");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setWeather(oTarget, tWeather, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setWillSavingThrow(NWObject oObject, int nWillSave)
        throws NotInContextException
    {
        setWillSavingThrow(oObject, nWillSave, null, false);
    }

    public void
    setWillSavingThrow(NWObject oObject, int nWillSave, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setWillSavingThrow(oObject, nWillSave, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setWillSavingThrow(NWObject oObject, int nWillSave, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setWillSavingThrow");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setWillSavingThrow(oObject, nWillSave, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setXP(NWObject oCreature, int nXpAmount)
        throws NotInContextException
    {
        setXP(oCreature, nXpAmount, null, false);
    }

    public void
    setXP(NWObject oCreature, int nXpAmount, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        setXP(oCreature, nXpAmount, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setXP(NWObject oCreature, int nXpAmount, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setXP");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.setXP(oCreature, nXpAmount, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    soundObjectPlay(NWObject oSound)
        throws NotInContextException
    {
        soundObjectPlay(oSound, null, false);
    }

    public void
    soundObjectPlay(NWObject oSound, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        soundObjectPlay(oSound, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    soundObjectPlay(NWObject oSound, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("soundObjectPlay");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.soundObjectPlay(oSound, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    soundObjectSetPosition(NWObject oSound, NWVector vPosition)
        throws NotInContextException
    {
        soundObjectSetPosition(oSound, vPosition, null, false);
    }

    public void
    soundObjectSetPosition(NWObject oSound, NWVector vPosition, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        soundObjectSetPosition(oSound, vPosition, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    soundObjectSetPosition(NWObject oSound, NWVector vPosition, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("soundObjectSetPosition");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.soundObjectSetPosition(oSound, vPosition, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    soundObjectSetVolume(NWObject oSound, int nVolume)
        throws NotInContextException
    {
        soundObjectSetVolume(oSound, nVolume, null, false);
    }

    public void
    soundObjectSetVolume(NWObject oSound, int nVolume, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        soundObjectSetVolume(oSound, nVolume, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    soundObjectSetVolume(NWObject oSound, int nVolume, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("soundObjectSetVolume");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.soundObjectSetVolume(oSound, nVolume, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    soundObjectStop(NWObject oSound)
        throws NotInContextException
    {
        soundObjectStop(oSound, null, false);
    }

    public void
    soundObjectStop(NWObject oSound, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        soundObjectStop(oSound, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    soundObjectStop(NWObject oSound, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("soundObjectStop");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.soundObjectStop(oSound, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    speakOneLinerConversation(String sDialogResRef, NWObject oTokenTarget)
        throws NotInContextException
    {
        speakOneLinerConversation(sDialogResRef, oTokenTarget, null, false);
    }

    public void
    speakOneLinerConversation(String sDialogResRef, NWObject oTokenTarget, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        speakOneLinerConversation(sDialogResRef, oTokenTarget, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    speakOneLinerConversation(String sDialogResRef, NWObject oTokenTarget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("speakOneLinerConversation");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.speakOneLinerConversation(sDialogResRef, oTokenTarget, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    speakString(String sStringToSpeak, TalkVolume tTalkVolume)
        throws NotInContextException
    {
        speakString(sStringToSpeak, tTalkVolume, null, false);
    }

    public void
    speakString(String sStringToSpeak, TalkVolume tTalkVolume, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        speakString(sStringToSpeak, tTalkVolume, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    speakString(String sStringToSpeak, TalkVolume tTalkVolume, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("speakString");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.speakString(sStringToSpeak, tTalkVolume, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    speakStringByStrRef(int nStrRef, TalkVolume tTalkVolume)
        throws NotInContextException
    {
        speakStringByStrRef(nStrRef, tTalkVolume, null, false);
    }

    public void
    speakStringByStrRef(int nStrRef, TalkVolume tTalkVolume, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        speakStringByStrRef(nStrRef, tTalkVolume, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    speakStringByStrRef(int nStrRef, TalkVolume tTalkVolume, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("speakStringByStrRef");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.speakStringByStrRef(nStrRef, tTalkVolume, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    startNewModule(String sModuleName)
        throws NotInContextException
    {
        startNewModule(sModuleName, null, false);
    }

    public void
    startNewModule(String sModuleName, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        startNewModule(sModuleName, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    startNewModule(String sModuleName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("startNewModule");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.startNewModule(sModuleName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    stopFade(NWObject oCreature)
        throws NotInContextException
    {
        stopFade(oCreature, null, false);
    }

    public void
    stopFade(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        stopFade(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    stopFade(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("stopFade");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.stopFade(oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    storeCameraFacing()
        throws NotInContextException
    {
        storeCameraFacing(null, false);
    }

    public void
    storeCameraFacing(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        storeCameraFacing(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    storeCameraFacing(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("storeCameraFacing");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.storeCameraFacing(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public int
    storeCampaignObject(String sCampaignName, String sVarName, NWObject oObject, NWObject oPlayer)
        throws NotInContextException
    {
        return storeCampaignObject(sCampaignName, sVarName, oObject, oPlayer, null, false);
    }

    public int
    storeCampaignObject(String sCampaignName, String sVarName, NWObject oObject, NWObject oPlayer, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return storeCampaignObject(sCampaignName, sVarName, oObject, oPlayer, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private int
    storeCampaignObject(String sCampaignName, String sVarName, NWObject oObject, NWObject oPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("storeCampaignObject");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.storeCampaignObject(sCampaignName, sVarName, oObject, oPlayer, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    summonAnimalCompanion(NWObject oMaster)
        throws NotInContextException
    {
        summonAnimalCompanion(oMaster, null, false);
    }

    public void
    summonAnimalCompanion(NWObject oMaster, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        summonAnimalCompanion(oMaster, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    summonAnimalCompanion(NWObject oMaster, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("summonAnimalCompanion");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.summonAnimalCompanion(oMaster, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    summonFamiliar(NWObject oMaster)
        throws NotInContextException
    {
        summonFamiliar(oMaster, null, false);
    }

    public void
    summonFamiliar(NWObject oMaster, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        summonFamiliar(oMaster, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    summonFamiliar(NWObject oMaster, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("summonFamiliar");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.summonFamiliar(oMaster, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    supernaturalEffect(NWEffect eEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return supernaturalEffect(eEffect, null, false);
    }

    public NWEffect
    supernaturalEffect(NWEffect eEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return supernaturalEffect(eEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    supernaturalEffect(NWEffect eEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("supernaturalEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.supernaturalEffect(eEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    surrenderToEnemies()
        throws NotInContextException
    {
        surrenderToEnemies(null, false);
    }

    public void
    surrenderToEnemies(java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        surrenderToEnemies(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    surrenderToEnemies(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("surrenderToEnemies");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.surrenderToEnemies(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    takeGoldFromCreature(int nAmount, NWObject oCreatureToTakeFrom, boolean bDestroy)
        throws NotInContextException
    {
        takeGoldFromCreature(nAmount, oCreatureToTakeFrom, bDestroy, null, false);
    }

    public void
    takeGoldFromCreature(int nAmount, NWObject oCreatureToTakeFrom, boolean bDestroy, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        takeGoldFromCreature(nAmount, oCreatureToTakeFrom, bDestroy, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    takeGoldFromCreature(int nAmount, NWObject oCreatureToTakeFrom, boolean bDestroy, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("takeGoldFromCreature");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.takeGoldFromCreature(nAmount, oCreatureToTakeFrom, bDestroy, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public AttackResult
    touchAttackMelee(NWObject oTarget, boolean bDisplayFeedback)
        throws NotInContextException
    {
        return touchAttackMelee(oTarget, bDisplayFeedback, null, false);
    }

    public AttackResult
    touchAttackMelee(NWObject oTarget, boolean bDisplayFeedback, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return touchAttackMelee(oTarget, bDisplayFeedback, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private AttackResult
    touchAttackMelee(NWObject oTarget, boolean bDisplayFeedback, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("touchAttackMelee");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.touchAttackMelee(oTarget, bDisplayFeedback, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public AttackResult
    touchAttackRanged(NWObject oTarget, boolean bDisplayFeedback)
        throws NotInContextException
    {
        return touchAttackRanged(oTarget, bDisplayFeedback, null, false);
    }

    public AttackResult
    touchAttackRanged(NWObject oTarget, boolean bDisplayFeedback, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return touchAttackRanged(oTarget, bDisplayFeedback, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private AttackResult
    touchAttackRanged(NWObject oTarget, boolean bDisplayFeedback, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("touchAttackRanged");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.touchAttackRanged(oTarget, bDisplayFeedback, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    turnsToSeconds(int nTurns)
        throws NotInContextException
    {
        return turnsToSeconds(nTurns, null, false);
    }

    public double
    turnsToSeconds(int nTurns, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return turnsToSeconds(nTurns, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    turnsToSeconds(int nTurns, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("turnsToSeconds");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.turnsToSeconds(nTurns, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    unpossessFamiliar(NWObject oCreature)
        throws NotInContextException
    {
        unpossessFamiliar(oCreature, null, false);
    }

    public void
    unpossessFamiliar(NWObject oCreature, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        unpossessFamiliar(oCreature, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    unpossessFamiliar(NWObject oCreature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unpossessFamiliar");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.unpossessFamiliar(oCreature, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    vectorMagnitude(NWVector vVector)
        throws NotInContextException
    {
        return vectorMagnitude(vVector, null, false);
    }

    public double
    vectorMagnitude(NWVector vVector, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return vectorMagnitude(vVector, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    vectorMagnitude(NWVector vVector, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("vectorMagnitude");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.vectorMagnitude(vVector, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWVector
    vectorNormalize(NWVector vVector)
        throws NotInContextException
    {
        return vectorNormalize(vVector, null, false);
    }

    public NWVector
    vectorNormalize(NWVector vVector, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return vectorNormalize(vVector, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWVector
    vectorNormalize(NWVector vVector, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("vectorNormalize");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.vectorNormalize(vVector, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public double
    vectorToAngle(NWVector vVector)
        throws NotInContextException
    {
        return vectorToAngle(vVector, null, false);
    }

    public double
    vectorToAngle(NWVector vVector, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return vectorToAngle(vVector, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private double
    vectorToAngle(NWVector vVector, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("vectorToAngle");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.vectorToAngle(vVector, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    versusAlignmentEffect(NWEffect eEffect, int nLawChaos, int nGoodEvil)
        throws InvalidEffectException,
               NotInContextException
    {
        return versusAlignmentEffect(eEffect, nLawChaos, nGoodEvil, null, false);
    }

    public NWEffect
    versusAlignmentEffect(NWEffect eEffect, int nLawChaos, int nGoodEvil, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return versusAlignmentEffect(eEffect, nLawChaos, nGoodEvil, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    versusAlignmentEffect(NWEffect eEffect, int nLawChaos, int nGoodEvil, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("versusAlignmentEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.versusAlignmentEffect(eEffect, nLawChaos, nGoodEvil, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    versusRacialTypeEffect(NWEffect eEffect, RacialType tRacialType)
        throws InvalidEffectException,
               NotInContextException
    {
        return versusRacialTypeEffect(eEffect, tRacialType, null, false);
    }

    public NWEffect
    versusRacialTypeEffect(NWEffect eEffect, RacialType tRacialType, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return versusRacialTypeEffect(eEffect, tRacialType, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    versusRacialTypeEffect(NWEffect eEffect, RacialType tRacialType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("versusRacialTypeEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.versusRacialTypeEffect(eEffect, tRacialType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public NWEffect
    versusTrapEffect(NWEffect eEffect)
        throws InvalidEffectException,
               NotInContextException
    {
        return versusTrapEffect(eEffect, null, false);
    }

    public NWEffect
    versusTrapEffect(NWEffect eEffect, java.util.Map<String, String> __ctx)
        throws InvalidEffectException,
               NotInContextException
    {
        return versusTrapEffect(eEffect, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private NWEffect
    versusTrapEffect(NWEffect eEffect, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidEffectException,
               NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("versusTrapEffect");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.versusTrapEffect(eEffect, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SavingThrowResult
    willSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus)
        throws NotInContextException
    {
        return willSave(oCreature, nDC, tSaveType, oSaveVersus, null, false);
    }

    public SavingThrowResult
    willSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        return willSave(oCreature, nDC, tSaveType, oSaveVersus, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SavingThrowResult
    willSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("willSave");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                return __del.willSave(oCreature, nDC, tSaveType, oSaveVersus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    writeTimestampedLogEntry(String sLogEntry)
        throws NotInContextException
    {
        writeTimestampedLogEntry(sLogEntry, null, false);
    }

    public void
    writeTimestampedLogEntry(String sLogEntry, java.util.Map<String, String> __ctx)
        throws NotInContextException
    {
        writeTimestampedLogEntry(sLogEntry, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    writeTimestampedLogEntry(String sLogEntry, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotInContextException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("writeTimestampedLogEntry");
                __delBase = __getDelegate(false);
                _NWScriptDel __del = (_NWScriptDel)__delBase;
                __del.writeTimestampedLogEntry(sLogEntry, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public static NWScriptPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        NWScriptPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (NWScriptPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::NWN::NWScript"))
                {
                    NWScriptPrxHelper __h = new NWScriptPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static NWScriptPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        NWScriptPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (NWScriptPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::NWN::NWScript", __ctx))
                {
                    NWScriptPrxHelper __h = new NWScriptPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static NWScriptPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        NWScriptPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::NWN::NWScript"))
                {
                    NWScriptPrxHelper __h = new NWScriptPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static NWScriptPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        NWScriptPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::NWN::NWScript", __ctx))
                {
                    NWScriptPrxHelper __h = new NWScriptPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static NWScriptPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        NWScriptPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (NWScriptPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                NWScriptPrxHelper __h = new NWScriptPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static NWScriptPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        NWScriptPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            NWScriptPrxHelper __h = new NWScriptPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _NWScriptDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _NWScriptDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, NWScriptPrx v)
    {
        __os.writeProxy(v);
    }

    public static NWScriptPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            NWScriptPrxHelper result = new NWScriptPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
