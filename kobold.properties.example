# Where to listen for ICE events.
ice.endpoint=default -h 127.0.0.1 -p 5223

# ICE properties. Usually no need to touch.
ice.properties = ThreadPool.Client.Size=2, Ice.ThreadPool.Client.SizeMax=15, \
	Ice.ThreadPool.Server.Size=2, Ice.ThreadPool.Server.SizeMax=15

# Specify the path to your complete 2da file collection here.
# This is needed by the TwoDA class.
twoda_path=./2da/

# Invalidate cached objects that went invalid after this many ms.
G.invalidateInvalidAfter=120000

# The default caching policy, unless explicitly specified for events.
# Valid values:
#   none: never cache anything
#   event: cache values per-event (recommended, default)
#   indef: cache values until explicitly invalidated
# Do not set 'indef' unless you know no other script will ever change
# values. Even then, things might break with hard-to-reproduce bugs.
G.defaultCachePolicy=event

# Reload configuration files when they have changed. Depending on
# the plugin and variable, changes may or may not take effect.
reloadConfigOnChange=true

# Emit a warning when a single Event takes longer than this many ms
# on a single listener. Will print both the event and the listener.
eventTimeWarnThreshold=350

# Emit a warning when a single Event takes longer than this many ms.
eventAllTimeWarnThreshold=2000

# Enable a tick timer that fires the OnTick event every 1000 milliseconds.
# Some plugins will depend on this, and there is no latency/speed disadvantage,
# so do not disable it unless you know what you are doing.
tickEnabled=true
# Emit warnings if a tick is at least this many ms late.
tickDriftWarn=1000
# Global timer tick interval. 500 is usually fine. Some plugins may
# break if they depend on a specific tick interval being used.
tickInterval=500

# A list of all plugins to load. Load order is importance - events
# will be distributed from top to bottom, and will not propagate
# further if stopped by a plugin.

# A comma-separated list of event names that are ignored and simply
# answered with ClientResult.Continue.
ignoreEvents=

# The nwnx namespace contains NWNX extensions for common plugins.
# Load them before any other plugins. Core functionality does
# not depend on them, but plugins usually do.
plugins=es.elv.kobold.nwnx.Chat
plugins=es.elv.kobold.nwnx.Events
plugins=es.elv.kobold.nwnx.DMActions

# The ext namespace contains plugins that send out custom events
# that do not depend on NWNX, but merely repackage existing
# information in a more accessible format.
plugins=es.elv.kobold.ext.ChatListener
plugins=es.elv.kobold.ext.NPCEquipEvents

# Load your custom plugins at the end.
plugins=es.elv.kobold.Greeter
